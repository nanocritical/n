from n import *
from n.sysheap import Heap Sysheap

--fun refconv p:@I32 = (slice I32) -- @[]I32
--  return p
--
--fun mrefconv p:@!I32 = (mutable_slice I32) -- @![]I32
--  return p
--
--fun mmrefconv p:@#I32 = (mercurial_slice I32) -- @#[]I32
--  return p
--
--Sysheap met slice_realloc s:@#@[]t = Void
--Sysheap met slice_realloc s:@#(slice t) = Void
--Sysheap met slice_free s:@#(slice t) = Void
--
--fun cannot_grow_inplace s:@[]I32 = @[]I32
--  heap.slice_realloc @!s

fun Main = I32
--  block
--    let s = refconv 1
--    Assert <- s.count == 1
--    Assert <- (s.at 0). == 1
--
--  block
--    let x = 42
--    let s = mrefconv @!x
--    Assert <- s.count == 1
--    Assert <- (s.at 0). == 42
--    (s.at 0)! = 41
--    Assert <- (s.at 0). == 41
--
--  block
--    let a = {0:I32 1 2}
--    let s = a.sub a.all -- a.[..]
--    let 
--
--  let s = {}:(slice I32)
--  such
--    (heap.slice_realloc I32) @!Sysheap @#s 1
--  let p = s!at 0
--  p! = 1
--  return p. - 1
	let v:[]I32
	let x = v.[1]
	return x.
