MODULE_BODY :nlang.builtins.__internal_not_typeable__
 IMPORT :nlang.builtins.__internal_not_typeable__
  IDENT(nlang)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__literal_null__)
  IMPORT :<import>
   IDENT(nlang)
   IMPORT :<import>
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
   IMPORT :<import>
    BIN(.)
     IDENT(nlang)
     IDENT(containers)
   IMPORT :<import>
    BIN(.)
     IDENT(nlang)
     IDENT(memory)
   IMPORT :<import>
    BIN(.)
     IDENT(nlang)
     IDENT(chars)
   IMPORT :<import>
    BIN(.)
     IDENT(nlang)
     IDENT(vectors)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__literal_integer__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__literal_floating__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__internal_not_typeable__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__call_function_slot__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__mutable__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__mercurial__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`any)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`copyable)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`copyable_but_owned)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`trivial_copy)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`trivial_copy_but_owned)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`return_by_copy)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`default_ctor)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`trivial_ctor)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`trivial_dtor)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`matchable)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`has_equality)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`trivial_equality)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`has_compare)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`ordered)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`trivial_order)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`ordered_by_compare)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`arithmetic)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`bitwise)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`sum_copy)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`sum_equality)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`sum_order)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(void)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`__ref_compatible)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`any_any_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`any_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`any_mutable_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`any_nullable_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`any_nullable_mutable_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(mutable_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(mercurial_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(nullable_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(nullable_mutable_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(nullable_mercurial_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`any_tuple)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_2)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_3)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_4)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_5)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_6)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_7)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_8)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_9)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_10)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_11)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_12)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_13)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_14)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_15)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_16)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`numeric)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`integer)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`signed_integer)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`unsigned_integer)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`native_integer)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`native_signed_integer)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`native_unsigned_integer)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`native_anysign_integer)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`generalized_boolean)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`bool_compatible)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`native_boolean)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`floating)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`native_floating)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(bool)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(i8)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(i16)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(i32)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(i64)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(u8)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(u16)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(u32)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(u64)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(ssize)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(size)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(float)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(double)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`auto_ctor)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`ctor_with)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`trivial_array_ctor)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`array_ctor)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(static_array)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`sum_ctor_with)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(abort)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(assert)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(unreached)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__pre__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__post__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__invariant__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__example__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(likely)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(unlikely)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(unused)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(optional)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(min)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(max)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`error)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(error)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(drop)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(fatal)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(valist)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(vararg)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(containers)
    IDENT(`locus)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(containers)
    IDENT(`fwd_locus)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(containers)
    IDENT(`bidir_locus)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(containers)
    IDENT(`iterator)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(containers)
    IDENT(index_range)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(containers)
    IDENT(index_iterator)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(containers)
    IDENT(range)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(memory)
    IDENT(`allocator)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(memory)
    IDENT(slice)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(chars)
    IDENT(char)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(chars)
    IDENT(`static_string_compatible)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(chars)
    IDENT(`const_string)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(chars)
    IDENT(`string)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(chars)
    IDENT(`string_buffer)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(chars)
    IDENT(static_string)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(chars)
    IDENT(`show)
  IMPORT :<import>
   BIN(.)
    IDENT(nlang)
    IDENT(print)
  IMPORT :<import>
   BIN(.)
    IDENT(nlang)
    IDENT(say)
  IMPORT :<import>
   BIN(.)
    IDENT(nlang)
    IDENT(just_const)
  IMPORT :<import>
   BIN(.)
    IDENT(nlang)
    IDENT(just_mutable)
 IMPORT :nlang.builtins.__internal_not_typeable__
  BIN(.)
   IDENT(nlang)
   IDENT(vectors)
  IMPORT
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(vectors)
    IDENT(vector)
 LET :nlang.builtins.void
  DEFPATTERN :nlang.builtins.void
   IDENT(v32) :(nlang.vectors.vector nlang.builtins.i32)
   CALL :(nlang.vectors.vector nlang.builtins.i32)
    IDENT(vector) :(functor nlang.vectors.vector nlang.builtins.`copyable)
    IDENT(i32) :nlang.builtins.i32
   DEFNAME(v32) :(nlang.vectors.vector nlang.builtins.i32)
 DEFFUN :t02.vector.foo
  IDENT(foo) :nlang.builtins.__internal_not_typeable__
  GENARGS :nlang.builtins.__internal_not_typeable__
  FUNARGS :nlang.builtins.__internal_not_typeable__
   DEFARG :(nlang.vectors.vector nlang.builtins.i32)
    IDENT(_nretval)
    IDENT(v32) :(nlang.vectors.vector nlang.builtins.i32)
  BLOCK :nlang.builtins.void
   LET :nlang.builtins.void
    DEFPATTERN :nlang.builtins.void
     TYPECONSTRAINT :(nlang.builtins.static_array nlang.builtins.i32)
      IDENT(_Ngensym1) :(nlang.builtins.static_array nlang.builtins.i32)
      DIRECTDEF :(nlang.builtins.static_array nlang.builtins.i32)
     DEFNAME(_Ngensym1) :(nlang.builtins.static_array nlang.builtins.i32)
    BLOCK :nlang.builtins.void
     RETURN :nlang.builtins.void
      CALL :(nlang.vectors.vector nlang.builtins.i32)
       DIRECTDEF :nlang.vectors.vector.mkv
       BLOCK :(nlang.builtins.ref (nlang.builtins.static_array nlang.builtins.i32))
        BIN( = ) :nlang.builtins.void
         IDENT(_Ngensym1) :(nlang.builtins.static_array nlang.builtins.i32)
         INIT :(nlang.builtins.static_array nlang.builtins.i32)
          NUMBER(1) :nlang.builtins.i32
          NUMBER(0) :nlang.builtins.i32
          NUMBER(2) :nlang.builtins.i32
        UN(@) :(nlang.builtins.ref (nlang.builtins.static_array nlang.builtins.i32))
         IDENT(_Ngensym1) :(nlang.builtins.static_array nlang.builtins.i32)
 DEFFUN :t02.vector.main
  IDENT(main) :nlang.builtins.__internal_not_typeable__
  GENARGS :nlang.builtins.__internal_not_typeable__
  FUNARGS :nlang.builtins.__internal_not_typeable__
   IDENT(i32) :nlang.builtins.i32
  BLOCK :nlang.builtins.void
   LET :nlang.builtins.void
    DEFPATTERN :nlang.builtins.void
     IDENT(v) :(nlang.vectors.vector nlang.builtins.i32)
     CALL :(nlang.vectors.vector nlang.builtins.i32)
      BIN(.) :nlang.vectors.vector.mk
       IDENT(v32) :(nlang.vectors.vector nlang.builtins.i32)
       IDENT(mk) :nlang.builtins.__internal_not_typeable__
     DEFNAME(v) :(nlang.vectors.vector nlang.builtins.i32)
    BLOCK :nlang.builtins.void
     CALL :nlang.builtins.void
      DIRECTDEF :nlang.vectors.vector.push
      UN(@#) :(nlang.builtins.mercurial_ref (nlang.vectors.vector nlang.builtins.i32))
       IDENT(v) :(nlang.vectors.vector nlang.builtins.i32)
      NUMBER(0) :nlang.builtins.i32
     CALL :nlang.builtins.void
      DIRECTDEF :nlang.vectors.vector.push
      UN(@#) :(nlang.builtins.mercurial_ref (nlang.vectors.vector nlang.builtins.i32))
       IDENT(v) :(nlang.vectors.vector nlang.builtins.i32)
      NUMBER(1) :nlang.builtins.i32
     CALL :nlang.builtins.void
      IDENT(assert) :nlang.builtins.assert
      BIN( == ) :nlang.builtins.bool
       CALL :nlang.builtins.i32
        DIRECTDEF :nlang.vectors.vector.pop
        UN(@#) :(nlang.builtins.mercurial_ref (nlang.vectors.vector nlang.builtins.i32))
         IDENT(v) :(nlang.vectors.vector nlang.builtins.i32)
       NUMBER(1) :nlang.builtins.i32
     CALL :nlang.builtins.void
      DIRECTDEF :nlang.vectors.vector.push
      UN(@#) :(nlang.builtins.mercurial_ref (nlang.vectors.vector nlang.builtins.i32))
       IDENT(v) :(nlang.vectors.vector nlang.builtins.i32)
      NUMBER(1) :nlang.builtins.i32
     LET :nlang.builtins.void
      DEFPATTERN :nlang.builtins.void
       TYPECONSTRAINT :nlang.containers.index_range
        IDENT(_Ngensym3) :nlang.containers.index_range
        DIRECTDEF :nlang.containers.index_range
       DEFNAME(_Ngensym3) :nlang.containers.index_range
      BLOCK :nlang.builtins.void
       FOR :nlang.builtins.void
        LET :nlang.builtins.void
         DEFPATTERN :nlang.builtins.void
          IDENT(_Ngensym0) :nlang.containers.index_iterator
          CALL :nlang.containers.index_iterator
           DIRECTDEF :nlang.containers.index_range.iter
           BLOCK :(nlang.builtins.ref nlang.containers.index_range)
            BIN( = ) :nlang.builtins.void
             IDENT(_Ngensym3) :nlang.containers.index_range
             CALL :nlang.containers.index_range
              DIRECTDEF :nlang.vectors.vector.all
              UN(@) :(nlang.builtins.ref (nlang.vectors.vector nlang.builtins.i32))
               IDENT(v) :(nlang.vectors.vector nlang.builtins.i32)
            UN(@) :(nlang.builtins.ref nlang.containers.index_range)
             IDENT(_Ngensym3) :nlang.containers.index_range
          DEFNAME(_Ngensym0) :nlang.containers.index_iterator
         BLOCK :nlang.builtins.void
          WHILE :nlang.builtins.void
           CALL :nlang.builtins.bool
            DIRECTDEF :nlang.containers.index_iterator.has_next
            UN(@) :(nlang.builtins.ref nlang.containers.index_iterator)
             IDENT(_Ngensym0) :nlang.containers.index_iterator
           BLOCK :nlang.builtins.void
            LET :nlang.builtins.void
             DEFPATTERN :nlang.builtins.void
              IDENT(i) :nlang.builtins.size
              CALL :nlang.builtins.size
               DIRECTDEF :nlang.containers.index_iterator.next
               UN(@!) :(nlang.builtins.mutable_ref nlang.containers.index_iterator)
                IDENT(_Ngensym0) :nlang.containers.index_iterator
              DEFNAME(i) :nlang.builtins.size
             BLOCK :nlang.builtins.void
              LET :nlang.builtins.void
               DEFPATTERN :nlang.builtins.void
                TYPECONSTRAINT :nlang.builtins.u32
                 IDENT(_Ngensym2) :nlang.builtins.u32
                 DIRECTDEF :nlang.builtins.u32
                DEFNAME(_Ngensym2) :nlang.builtins.u32
               BLOCK :nlang.builtins.void
                CALL :nlang.builtins.void
                 IDENT(assert) :nlang.builtins.assert
                 BIN( == ) :nlang.builtins.bool
                  UN(.) :nlang.builtins.i32
                   CALL :(nlang.builtins.ref nlang.builtins.i32)
                    DIRECTDEF :(nlang.vectors.vector.at (functor nlang.builtins.ref nlang.builtins.`any))
                    UN(@) :(nlang.builtins.ref (nlang.vectors.vector nlang.builtins.i32))
                     IDENT(v) :(nlang.vectors.vector nlang.builtins.i32)
                    IDENT(i) :nlang.builtins.size
                  CALL :nlang.builtins.i32
                   DIRECTDEF :nlang.builtins.u32.reinterpret_signed
                   BLOCK :(nlang.builtins.ref nlang.builtins.u32)
                    BIN( = ) :nlang.builtins.void
                     IDENT(_Ngensym2) :nlang.builtins.u32
                     CALL :nlang.builtins.u32
                      DIRECTDEF :nlang.builtins.size.trim_u32
                      UN(@) :(nlang.builtins.ref nlang.builtins.size)
                       IDENT(i) :nlang.builtins.size
                    UN(@) :(nlang.builtins.ref nlang.builtins.u32)
                     IDENT(_Ngensym2) :nlang.builtins.u32
   LET :nlang.builtins.void
    DEFPATTERN :nlang.builtins.void
     IDENT(w) :(nlang.vectors.vector nlang.builtins.i32)
     CALL :(nlang.vectors.vector nlang.builtins.i32)
      IDENT(foo) :t02.vector.foo
     DEFNAME(w) :(nlang.vectors.vector nlang.builtins.i32)
   CALL :nlang.builtins.void
    IDENT(assert) :nlang.builtins.assert
    BIN( == ) :nlang.builtins.bool
     UN(.) :nlang.builtins.i32
      CALL :(nlang.builtins.ref nlang.builtins.i32)
       DIRECTDEF :(nlang.vectors.vector.at (functor nlang.builtins.ref nlang.builtins.`any))
       UN(@) :(nlang.builtins.ref (nlang.vectors.vector nlang.builtins.i32))
        IDENT(w) :(nlang.vectors.vector nlang.builtins.i32)
       NUMBER(0) :nlang.builtins.size
     NUMBER(1) :nlang.builtins.i32
   CALL :nlang.builtins.void
    IDENT(assert) :nlang.builtins.assert
    BIN( == ) :nlang.builtins.bool
     UN(.) :nlang.builtins.i32
      CALL :(nlang.builtins.ref nlang.builtins.i32)
       DIRECTDEF :(nlang.vectors.vector.at (functor nlang.builtins.ref nlang.builtins.`any))
       UN(@) :(nlang.builtins.ref (nlang.vectors.vector nlang.builtins.i32))
        IDENT(w) :(nlang.vectors.vector nlang.builtins.i32)
       NUMBER(1) :nlang.builtins.size
     NUMBER(0) :nlang.builtins.i32
   CALL :nlang.builtins.void
    IDENT(assert) :nlang.builtins.assert
    BIN( == ) :nlang.builtins.bool
     UN(.) :nlang.builtins.i32
      CALL :(nlang.builtins.ref nlang.builtins.i32)
       DIRECTDEF :(nlang.vectors.vector.at (functor nlang.builtins.ref nlang.builtins.`any))
       UN(@) :(nlang.builtins.ref (nlang.vectors.vector nlang.builtins.i32))
        IDENT(w) :(nlang.vectors.vector nlang.builtins.i32)
       NUMBER(2) :nlang.builtins.size
     NUMBER(2) :nlang.builtins.i32
   RETURN :nlang.builtins.void
    BIN( - ) :nlang.builtins.i32
     UN(.) :nlang.builtins.i32
      CALL :(nlang.builtins.ref nlang.builtins.i32)
       DIRECTDEF :(nlang.vectors.vector.at (functor nlang.builtins.ref nlang.builtins.`any))
       UN(@) :(nlang.builtins.ref (nlang.vectors.vector nlang.builtins.i32))
        IDENT(v) :(nlang.vectors.vector nlang.builtins.i32)
       NUMBER(1) :nlang.builtins.size
     NUMBER(1) :nlang.builtins.i32
