MODULE_BODY :__internal_not_typeable__
 IMPORT :nlang
  IDENT(nlang) :nlang
  IMPORT :nlang.say
   BIN(.) :nlang.say
    IDENT(nlang) :nlang
    IDENT(say) :__internal_not_typeable__
 IMPORT :nlang.vectors
  BIN(.) :nlang.vectors
   IDENT(nlang) :nlang
   IDENT(vectors) :__internal_not_typeable__
  IMPORT :nlang.vectors.vector
   BIN(.) :nlang.vectors.vector
    BIN(.) :nlang.vectors
     IDENT(nlang) :nlang
     IDENT(vectors) :__internal_not_typeable__
    IDENT(vector) :__internal_not_typeable__
 LET :nlang.builtins.void
  DEFPATTERN :nlang.builtins.void
   IDENT(v32) :(nlang.vectors.vector nlang.builtins.i32)
   CALL :(nlang.vectors.vector nlang.builtins.i32)
    IDENT(vector) :nlang.vectors.vector
    IDENT(i32) :nlang.builtins.i32
   DEFNAME(v32) :(nlang.vectors.vector nlang.builtins.i32)
 DEFFUN :t02.vector.main
  IDENT(main) :__internal_not_typeable__
  GENARGS :nlang.builtins.void
  IDENT(i32) :nlang.builtins.i32
  BLOCK :nlang.builtins.i32
   LET :nlang.builtins.void
    DEFPATTERN :nlang.builtins.void
     IDENT(v) :(nlang.vectors.vector nlang.builtins.i32)
     CALL :(nlang.vectors.vector nlang.builtins.i32)
      BIN(.) :nlang.vectors.vector.mk
       IDENT(v32) :(nlang.vectors.vector nlang.builtins.i32)
       IDENT(mk) :__internal_not_typeable__
     DEFNAME(v) :(nlang.vectors.vector nlang.builtins.i32)
    BLOCK :nlang.builtins.void
     CALL :nlang.builtins.void
      DIRECTDEF :nlang.vectors.vector.push
      UN(@#) :(nlang.builtins.i_mercurial_ref (nlang.vectors.vector nlang.builtins.i32))
       IDENT(v) :(nlang.vectors.vector nlang.builtins.i32)
      NUMBER(0) :nlang.builtins.i32
     CALL :nlang.builtins.void
      DIRECTDEF :nlang.vectors.vector.push
      UN(@#) :(nlang.builtins.i_mercurial_ref (nlang.vectors.vector nlang.builtins.i32))
       IDENT(v) :(nlang.vectors.vector nlang.builtins.i32)
      NUMBER(1) :nlang.builtins.i32
     CALL :nlang.builtins.void
      IDENT(assert) :nlang.builtins.assert
      BIN( == ) :nlang.builtins.bool
       CALL :nlang.builtins.i32
        DIRECTDEF :nlang.vectors.vector.pop
        UN(@#) :(nlang.builtins.i_mercurial_ref (nlang.vectors.vector nlang.builtins.i32))
         IDENT(v) :(nlang.vectors.vector nlang.builtins.i32)
       NUMBER(1) :nlang.builtins.i32
     CALL :nlang.builtins.void
      DIRECTDEF :nlang.vectors.vector.push
      UN(@#) :(nlang.builtins.i_mercurial_ref (nlang.vectors.vector nlang.builtins.i32))
       IDENT(v) :(nlang.vectors.vector nlang.builtins.i32)
      NUMBER(1) :nlang.builtins.i32
     LET :nlang.builtins.void
      DEFPATTERN :nlang.builtins.void
       IDENT(__gensym2) :nlang.containers.index_range
       CALL :nlang.containers.index_range
        DIRECTDEF :nlang.vectors.vector.all
        UN(@) :(nlang.builtins.i_ref (nlang.vectors.vector nlang.builtins.i32))
         IDENT(v) :(nlang.vectors.vector nlang.builtins.i32)
       DEFNAME(__gensym2) :nlang.containers.index_range
     FOR :nlang.builtins.void
      LET :nlang.builtins.void
       DEFPATTERN :nlang.builtins.void
        IDENT(__gensym0) :nlang.containers.index_iterator
        CALL :nlang.containers.index_iterator
         DIRECTDEF :nlang.containers.index_range.iter
         UN(@) :(nlang.builtins.i_ref nlang.containers.index_range)
          IDENT(__gensym2) :nlang.containers.index_range
        DEFNAME(__gensym0) :nlang.containers.index_iterator
       BLOCK :nlang.builtins.void
        WHILE :nlang.builtins.void
         CALL :nlang.builtins.bool
          DIRECTDEF :nlang.containers.index_iterator.is_valid
          UN(@) :(nlang.builtins.i_ref nlang.containers.index_iterator)
           IDENT(__gensym0) :nlang.containers.index_iterator
         BLOCK :nlang.builtins.void
          LET :nlang.builtins.void
           DEFPATTERN :nlang.builtins.void
            IDENT(i) :nlang.builtins.size
            CALL :nlang.builtins.size
             DIRECTDEF :nlang.containers.index_iterator.get
             UN(@) :(nlang.builtins.i_ref nlang.containers.index_iterator)
              IDENT(__gensym0) :nlang.containers.index_iterator
            DEFNAME(i) :nlang.builtins.size
           BLOCK :nlang.builtins.void
            LET :nlang.builtins.void
             DEFPATTERN :nlang.builtins.void
              IDENT(__gensym1) :nlang.builtins.u32
              CALL :nlang.builtins.u32
               DIRECTDEF :nlang.builtins.size.trim_u32
               UN(@) :(nlang.builtins.i_ref nlang.builtins.size)
                IDENT(i) :nlang.builtins.size
              DEFNAME(__gensym1) :nlang.builtins.u32
            CALL :nlang.builtins.void
             IDENT(assert) :nlang.builtins.assert
             BIN( == ) :nlang.builtins.bool
              UN(.) :nlang.builtins.i32
               CALL :(nlang.builtins.i_ref nlang.builtins.i32)
                DIRECTDEF :(nlang.vectors.vector.at nlang.builtins.i_ref)
                UN(@) :(nlang.builtins.i_ref (nlang.vectors.vector nlang.builtins.i32))
                 IDENT(v) :(nlang.vectors.vector nlang.builtins.i32)
                IDENT(i) :nlang.builtins.size
              CALL :nlang.builtins.i32
               DIRECTDEF :nlang.builtins.u32.reinterpret_signed
               UN(@) :(nlang.builtins.i_ref nlang.builtins.u32)
                IDENT(__gensym1) :nlang.builtins.u32
          CALL :nlang.builtins.void
           DIRECTDEF :nlang.containers.index_iterator.next
           UN(@!) :(nlang.builtins.i_mutable_ref nlang.containers.index_iterator)
            IDENT(__gensym0) :nlang.containers.index_iterator
   RETURN :nlang.builtins.i32
    BIN( - ) :nlang.builtins.i32
     UN(.) :nlang.builtins.i32
      CALL :(nlang.builtins.i_ref nlang.builtins.i32)
       DIRECTDEF :(nlang.vectors.vector.at nlang.builtins.i_ref)
       UN(@) :(nlang.builtins.i_ref (nlang.vectors.vector nlang.builtins.i32))
        IDENT(v) :(nlang.vectors.vector nlang.builtins.i32)
       NUMBER(1) :nlang.builtins.size
     NUMBER(1) :nlang.builtins.i32
