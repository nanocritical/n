MODULE_BODY :nlang.builtins.__internal_not_typeable__
 IMPORT :nlang.builtins.__internal_not_typeable__
  IDENT(nlang)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__literal_null__)
  IMPORT :<import>
   IDENT(nlang)
   IMPORT :<import>
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
   IMPORT :<import>
    BIN(.)
     IDENT(nlang)
     IDENT(containers)
   IMPORT :<import>
    BIN(.)
     IDENT(nlang)
     IDENT(memory)
   IMPORT :<import>
    BIN(.)
     IDENT(nlang)
     IDENT(chars)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__literal_integer__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__literal_floating__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__internal_not_typeable__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__call_function_slot__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__mutable__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__mercurial__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`any)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`prevent_dyn)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`copyable)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`copyable_but_owned)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`trivial_copy)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`trivial_copy_but_owned)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`return_by_copy)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`default_ctor)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`default_dtor)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`error_dtor)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`trivial_ctor)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`trivial_dtor)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`matchable)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`has_equality)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`trivial_equality)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`has_compare)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`ordered)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`trivial_order)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`ordered_by_compare)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`arithmetic)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`bitwise)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`sum_copy)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`sum_equality)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`sum_order)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(void)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`__ref_compatible)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`any_any_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`any_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`any_mutable_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`any_nullable_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`any_nullable_mutable_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(mutable_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(mercurial_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(nullable_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(nullable_mutable_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(nullable_mercurial_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`any_tuple)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_2)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_3)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_4)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_5)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_6)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_7)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_8)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_9)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_10)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_11)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_12)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_13)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_14)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_15)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_16)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`numeric)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`integer)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`signed_integer)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`unsigned_integer)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`native_integer)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`native_signed_integer)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`native_unsigned_integer)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`native_anysign_integer)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`generalized_boolean)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`bool_compatible)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`native_boolean)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`floating)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`native_floating)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`enum)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`union)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(bool)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(i8)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(i16)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(i32)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(i64)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(u8)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(u16)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(u32)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(u64)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(ssize)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(size)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(float)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(double)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`auto_ctor)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`trivial_array_ctor)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`array_ctor)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(static_array)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(abort)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(assert)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(unreached)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__pre__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__post__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__invariant__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__example__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(likely)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(unlikely)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(unused)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(optional)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(optional_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(min)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(max)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`error)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(error)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(drop)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(fatal)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(valist)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(vararg)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`any_environment)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`environment)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(containers)
    IDENT(`locus)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(containers)
    IDENT(`fwd_locus)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(containers)
    IDENT(`bidir_locus)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(containers)
    IDENT(`iterator)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(containers)
    IDENT(index_range)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(containers)
    IDENT(index_iterator)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(containers)
    IDENT(range)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(memory)
    IDENT(`allocator)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(memory)
    IDENT(slice)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(chars)
    IDENT(char)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(chars)
    IDENT(`static_string_compatible)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(chars)
    IDENT(`const_string)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(chars)
    IDENT(`string)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(chars)
    IDENT(`string_buffer)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(chars)
    IDENT(static_string)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(chars)
    IDENT(`show)
  IMPORT :<import>
   BIN(.)
    IDENT(nlang)
    IDENT(vpr)
  IMPORT :<import>
   BIN(.)
    IDENT(nlang)
    IDENT(pr)
  IMPORT :<import>
   BIN(.)
    IDENT(nlang)
    IDENT(vsay)
  IMPORT :<import>
   BIN(.)
    IDENT(nlang)
    IDENT(say)
  IMPORT :<import>
   BIN(.)
    IDENT(nlang)
    IDENT(just_const)
  IMPORT :<import>
   BIN(.)
    IDENT(nlang)
    IDENT(just_mutable)
 DEFTYPE :t03.constraints.u ::()
  IDENT(u) :nlang.builtins.__internal_not_typeable__
  GENARGS :nlang.builtins.__internal_not_typeable__
  ISALIST :nlang.builtins.__internal_not_typeable__
   ISA :nlang.builtins.`trivial_ctor ::()
    IDENT(`trivial_ctor) :nlang.builtins.`trivial_ctor ::()
  LET :nlang.builtins.void ::()
   DEFALIAS(tag_type) :nlang.builtins.u32 ::()
    IDENT(tag_type) :nlang.builtins.__internal_not_typeable__
    DIRECTDEF :nlang.builtins.u32 ::()
  LET :nlang.builtins.void ::()
   DEFALIAS(final) :t03.constraints.u ::()
    IDENT(final) :nlang.builtins.__internal_not_typeable__
    DIRECTDEF :t03.constraints.u ::()
  LET :nlang.builtins.void ::()
   DEFALIAS(this) :t03.constraints.u ::()
    IDENT(this) :nlang.builtins.__internal_not_typeable__
    DIRECTDEF :t03.constraints.u ::()
  DEFCHOICE :t03.constraints.u ::(init)
   IDENT(A) :nlang.builtins.__internal_not_typeable__
   NUMBER(0) :nlang.builtins.u32 ::(init)
   NUMBER(0) :nlang.builtins.u32 ::(init)
  DEFCHOICE :t03.constraints.u ::()
   IDENT(B) :nlang.builtins.__internal_not_typeable__
   BIN( + ) :nlang.builtins.u32 ::(init)
    NUMBER(0) :nlang.builtins.u32 ::(init)
    NUMBER(1) :nlang.builtins.u32 ::(init)
   NUMBER(0) :nlang.builtins.u32 ::(init)
   DEFFIELD :nlang.builtins.i32 ::()
    IDENT(x) :nlang.builtins.__internal_not_typeable__
    IDENT(i32) :nlang.builtins.i32 ::()
  DEFCHOICE :t03.constraints.u ::()
   IDENT(C) :nlang.builtins.__internal_not_typeable__
   BIN( + ) :nlang.builtins.u32 ::(init)
    BIN( + ) :nlang.builtins.u32 ::(init)
     NUMBER(0) :nlang.builtins.u32 ::(init)
     NUMBER(1) :nlang.builtins.u32 ::(init)
    NUMBER(1) :nlang.builtins.u32 ::(init)
   NUMBER(0) :nlang.builtins.u32 ::(init)
   DEFFIELD :nlang.builtins.u32 ::()
    IDENT(x) :nlang.builtins.__internal_not_typeable__
    IDENT(u32) :nlang.builtins.u32 ::()
 DEFFUN :t03.constraints.aux ::()
  IDENT(aux) :nlang.builtins.__internal_not_typeable__
  GENARGS :nlang.builtins.__internal_not_typeable__
  FUNARGS :nlang.builtins.__internal_not_typeable__
   DEFARG :t03.constraints.u ::(init)
    IDENT(e) :nlang.builtins.__internal_not_typeable__
    IDENT(u) :t03.constraints.u ::()
   DEFARG :nlang.builtins.i32 ::(init)
    IDENT(_nretval) :nlang.builtins.__internal_not_typeable__
    IDENT(i32) :nlang.builtins.i32 ::()
  WITHIN :nlang.builtins.void ::(init and nonnull)
  BLOCK :nlang.builtins.void ::(init and (t03.constraints.aux.e => (init and |B)))
   MATCH :nlang.builtins.void ::()
    BLOCK :t03.constraints.u ::(init)
     IDENT(e) :t03.constraints.u ::(init)
    IDENT(B) :t03.constraints.u ::()
    BLOCK :nlang.builtins.void ::()
     PHIc(e) :nlang.builtins.__internal_not_typeable__ ::(init and |B)
     NOOP :nlang.builtins.void ::()
     NOOP :nlang.builtins.void ::()
     RETURN :nlang.builtins.void ::()
      BIN(.) :nlang.builtins.i32 ::(init)
       BIN(.) :t03.constraints.u ::(init and |B)
        IDENT(e) :t03.constraints.u ::(init and |B)
        IDENT(B) :nlang.builtins.__internal_not_typeable__
       IDENT(x) :nlang.builtins.__internal_not_typeable__
    IDENT(_) :t03.constraints.u ::()
    BLOCK :nlang.builtins.void ::()
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensym2) :nlang.builtins.i32 ::(init)
       IDENT(_Ngensym2) :nlang.builtins.__internal_not_typeable__
       NUMBER(1) :nlang.builtins.i32 ::(init)
     RETURN :nlang.builtins.void ::()
      IDENT(_Ngensym2) :nlang.builtins.i32 ::(init)
   PHI (e) :nlang.builtins.__internal_not_typeable__ ::(init and (t03.constraints.aux.e => (init and |B)))
 DEFFUN :t03.constraints.set1 ::()
  IDENT(set1) :nlang.builtins.__internal_not_typeable__
  GENARGS :nlang.builtins.__internal_not_typeable__
  FUNARGS :nlang.builtins.__internal_not_typeable__
   DEFARG :(nlang.builtins.mutable_ref t03.constraints.u) ::(init and nonnull)
    IDENT(e) :nlang.builtins.__internal_not_typeable__
    UN(@!) :(nlang.builtins.mutable_ref t03.constraints.u) ::(init and nonnull)
     IDENT(u) :t03.constraints.u ::()
   DEFARG :nlang.builtins.void ::(init)
    IDENT(_nretval) :nlang.builtins.__internal_not_typeable__
    IDENT(void) :nlang.builtins.void ::()
  WITHIN :nlang.builtins.void ::(init and nonnull)
  BLOCK :nlang.builtins.void ::(init and nonnull and (t03.constraints.set1.<match>.<let>._Ngensym3 => (init and nonnull and |B)))
   MATCH :nlang.builtins.void ::()
    BLOCK :t03.constraints.u ::(init)
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensym3) :t03.constraints.u ::(init)
       IDENT(_Ngensym3) :nlang.builtins.__internal_not_typeable__
       UN(.) :t03.constraints.u ::(init)
        IDENT(e) :(nlang.builtins.mutable_ref t03.constraints.u) ::(init and nonnull)
     IDENT(_Ngensym3) :t03.constraints.u ::(init)
    IDENT(B) :t03.constraints.u ::()
    BLOCK :nlang.builtins.void ::(init)
     PHIc(e) :nlang.builtins.__internal_not_typeable__ ::(init and nonnull and |B)
     NOOP :nlang.builtins.void ::()
     NOOP :nlang.builtins.void ::()
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensym6) :nlang.builtins.i32 ::(init)
       IDENT(_Ngensym6) :nlang.builtins.__internal_not_typeable__
       NUMBER(1) :nlang.builtins.i32 ::(init)
     BIN( = ) :nlang.builtins.void ::(init)
      BIN(.) :nlang.builtins.i32 ::(init)
       BIN(!) :t03.constraints.u ::(init and |B)
        IDENT(e) :(nlang.builtins.mutable_ref t03.constraints.u) ::(init and nonnull and |B)
        IDENT(B) :nlang.builtins.__internal_not_typeable__
       IDENT(x) :nlang.builtins.__internal_not_typeable__
      IDENT(_Ngensym6) :nlang.builtins.i32 ::(init)
    IDENT(_) :t03.constraints.u ::()
    BLOCK :nlang.builtins.void ::()
     NOOP :nlang.builtins.void ::()
   PHI (e) :nlang.builtins.__internal_not_typeable__ ::(init and nonnull and (t03.constraints.set1.<match>.<let>._Ngensym3 => (init and nonnull and |B)))
 DEFFUN :t03.constraints.main ::()
  IDENT(main) :nlang.builtins.__internal_not_typeable__
  GENARGS :nlang.builtins.__internal_not_typeable__
  FUNARGS :nlang.builtins.__internal_not_typeable__
   DEFARG :nlang.builtins.i32 ::(init)
    IDENT(_nretval) :nlang.builtins.__internal_not_typeable__
    IDENT(i32) :nlang.builtins.i32 ::()
  WITHIN :nlang.builtins.void ::(init and nonnull)
  BLOCK :nlang.builtins.void ::()
   BLOCK :nlang.builtins.void ::()
    NOOP :nlang.builtins.void ::()
    LET :nlang.builtins.void ::()
     DEFNAME(g) :t03.constraints.u ::(init and |A)
      IDENT(g) :nlang.builtins.__internal_not_typeable__
      INIT :t03.constraints.u ::(init and |A)
   MATCH :nlang.builtins.void ::()
    BLOCK :t03.constraints.u ::(init and |A)
     IDENT(g) :t03.constraints.u ::(init and |A)
    IDENT(B) :t03.constraints.u ::()
    BLOCK :nlang.builtins.void ::()
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensym7) :nlang.builtins.i32 ::(init)
       IDENT(_Ngensym7) :nlang.builtins.__internal_not_typeable__
       NUMBER(1) :nlang.builtins.i32 ::(init)
     RETURN :nlang.builtins.void ::()
      IDENT(_Ngensym7) :nlang.builtins.i32 ::(init)
    IDENT(C) :t03.constraints.u ::()
    BLOCK :nlang.builtins.void ::()
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensym8) :nlang.builtins.i32 ::(init)
       IDENT(_Ngensym8) :nlang.builtins.__internal_not_typeable__
       NUMBER(1) :nlang.builtins.i32 ::(init)
     RETURN :nlang.builtins.void ::()
      IDENT(_Ngensym8) :nlang.builtins.i32 ::(init)
    IDENT(_) :t03.constraints.u ::()
    BLOCK :nlang.builtins.void ::()
     NOOP :nlang.builtins.void ::()
   NOOP :nlang.builtins.void ::()
   LET :nlang.builtins.void ::()
    DEFNAME(f) :t03.constraints.u ::(init and |B)
     IDENT(f) :nlang.builtins.__internal_not_typeable__
     INIT :t03.constraints.u ::(init and |B)
   NOOP :nlang.builtins.void ::()
   NOOP :nlang.builtins.void ::()
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym1b) :(nlang.builtins.nullable_ref nlang.strings.string) ::(init and not nonnull)
     IDENT(_Ngensym1b) :nlang.builtins.__internal_not_typeable__
     NUL :(nlang.builtins.nullable_ref nlang.strings.string) ::(init and not nonnull)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym1c) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
     IDENT(_Ngensym1c) :nlang.builtins.__internal_not_typeable__
     UN(@) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
      BIN(.) :nlang.builtins.i32 ::(init)
       BIN(.) :t03.constraints.u ::(init and |B)
        IDENT(f) :t03.constraints.u ::(init and |B)
        IDENT(B) :nlang.builtins.__internal_not_typeable__
       IDENT(x) :nlang.builtins.__internal_not_typeable__
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym21) :(nlang.builtins.ref nlang.chars.`show) ::(init and nonnull)
     IDENT(_Ngensym21) :nlang.builtins.__internal_not_typeable__
     DYN :(nlang.builtins.ref nlang.chars.`show) ::(init and nonnull)
      IDENT(_Ngensym1c) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
   CALL :nlang.builtins.void ::(init)
    IDENT(say) :nlang.say ::()
    CALLNAMEDARG(sep) :(nlang.builtins.nullable_ref nlang.strings.string) ::(init and not nonnull)
     IDENT(_Ngensym1b) :(nlang.builtins.nullable_ref nlang.strings.string) ::(init and not nonnull)
    IDENT(_Ngensym21) :(nlang.builtins.ref nlang.chars.`show) ::(init and nonnull)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensymb) :(nlang.builtins.mutable_ref t03.constraints.u) ::(init and nonnull)
     IDENT(_Ngensymb) :nlang.builtins.__internal_not_typeable__
     UN(@!) :(nlang.builtins.mutable_ref t03.constraints.u) ::(init and nonnull)
      IDENT(f) :t03.constraints.u ::(init and |B)
   CALL :nlang.builtins.void ::(init)
    IDENT(set1) :t03.constraints.set1 ::()
    IDENT(_Ngensymb) :(nlang.builtins.mutable_ref t03.constraints.u) ::(init and nonnull)
   NOOP :nlang.builtins.void ::()
   NOOP :nlang.builtins.void ::()
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym1d) :(nlang.builtins.nullable_ref nlang.strings.string) ::(init and not nonnull)
     IDENT(_Ngensym1d) :nlang.builtins.__internal_not_typeable__
     NUL :(nlang.builtins.nullable_ref nlang.strings.string) ::(init and not nonnull)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym1e) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
     IDENT(_Ngensym1e) :nlang.builtins.__internal_not_typeable__
     UN(@) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
      BIN(.) :nlang.builtins.i32 ::(init)
       BIN(.) :t03.constraints.u ::(init and |B)
        IDENT(f) :t03.constraints.u ::(init and |B)
        IDENT(B) :nlang.builtins.__internal_not_typeable__
       IDENT(x) :nlang.builtins.__internal_not_typeable__
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym22) :(nlang.builtins.ref nlang.chars.`show) ::(init and nonnull)
     IDENT(_Ngensym22) :nlang.builtins.__internal_not_typeable__
     DYN :(nlang.builtins.ref nlang.chars.`show) ::(init and nonnull)
      IDENT(_Ngensym1e) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
   CALL :nlang.builtins.void ::(init)
    IDENT(say) :nlang.say ::()
    CALLNAMEDARG(sep) :(nlang.builtins.nullable_ref nlang.strings.string) ::(init and not nonnull)
     IDENT(_Ngensym1d) :(nlang.builtins.nullable_ref nlang.strings.string) ::(init and not nonnull)
    IDENT(_Ngensym22) :(nlang.builtins.ref nlang.chars.`show) ::(init and nonnull)
   NOOP :nlang.builtins.void ::()
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensyme) :nlang.builtins.i32 ::(init)
     IDENT(_Ngensyme) :nlang.builtins.__internal_not_typeable__
     NUMBER(1) :nlang.builtins.i32 ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(e) :t03.constraints.u ::(init and |B)
     IDENT(e) :nlang.builtins.__internal_not_typeable__
     INIT :t03.constraints.u ::(init and |B)
      IDENT(x) :nlang.builtins.__internal_not_typeable__
      IDENT(_Ngensyme) :nlang.builtins.i32 ::(init)
   MATCH :nlang.builtins.void ::()
    BLOCK :t03.constraints.u ::(init and |B)
     IDENT(e) :t03.constraints.u ::(init and |B)
    IDENT(B) :t03.constraints.u ::()
    BLOCK :nlang.builtins.void ::(init)
     PHIc(e) :nlang.builtins.__internal_not_typeable__ ::(init and |B)
     NOOP :nlang.builtins.void ::()
     NOOP :nlang.builtins.void ::()
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensym11) :nlang.builtins.i32 ::(init)
       IDENT(_Ngensym11) :nlang.builtins.__internal_not_typeable__
       NUMBER(0) :nlang.builtins.i32 ::(init)
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensym12) :nlang.builtins.bool ::(init)
       IDENT(_Ngensym12) :nlang.builtins.__internal_not_typeable__
       BIN( == ) :nlang.builtins.bool ::(init)
        BIN(.) :nlang.builtins.i32 ::(init)
         BIN(.) :t03.constraints.u ::(init and |B)
          IDENT(e) :t03.constraints.u ::(init and |B)
          IDENT(B) :nlang.builtins.__internal_not_typeable__
         IDENT(x) :nlang.builtins.__internal_not_typeable__
        IDENT(_Ngensym11) :nlang.builtins.i32 ::(init)
     NOOP :nlang.builtins.void ::()
     CALL :nlang.builtins.void ::(init)
      IDENT(assert) :nlang.builtins.assert ::()
      IDENT(_Ngensym12) :nlang.builtins.bool ::(init)
   PHI (e) :nlang.builtins.__internal_not_typeable__ ::(init and |B and (t03.constraints.main.<let>.e => (init and |B)))
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym14) :nlang.builtins.i32 ::(init)
     IDENT(_Ngensym14) :nlang.builtins.__internal_not_typeable__
     CALL :nlang.builtins.i32 ::(init)
      IDENT(aux) :t03.constraints.aux ::()
      IDENT(e) :t03.constraints.u ::(init and |B and (t03.constraints.main.<let>.e => (init and |B)))
   RETURN :nlang.builtins.void ::()
    IDENT(_Ngensym14) :nlang.builtins.i32 ::(init)
