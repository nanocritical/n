from nlang import IndexRange ElementIterator ElementRange
from nlang.containers import *

type Vector T = (ForwardContainer T) (RandomContainer T)
  p :[]!T
  len :Size

  method! Ctorliteral_slice s:[].T = lang.Error
    this!reserve s.Len
    for n in s.All
      this.p![n] = s.[n]
  method Len = Size
    return this.len
  method Capacity = Size
    return this.p.len
  method! Ensure len:Size = Void
    if this.p.len < len
      this.p!realloc len
  method! Push x:T = Void
    let oldsize = this.len
    let newsize = this.len + 1
    this!ensure newsize
    this.p![oldsize] = x
  method! Pop = T
    #? this.len > 0
    let tmp = this.p.[this.len - 1]
    this!len -= 1
    this!mayshrink
    return tmp
  method First = T
    #? this.len > 0
    return this.p.[0]
  method Last = T
    #? this.len > 0
    return this.p.[this.len - 1]
  method! Clear = Void
    this!len = 0
    this!mayshrink
  method! Resize newsize:Size = Void
    if newsize > this.len
      this!ensure newsize
      this!len = newsize
    else
      this!len = newsize
      this!mayshrink
  method! Resizewith newsize:Size x:T = Void
    let oldsize = this.len
    this!Resize newsize
    for n in this.p!Allidx
      this.p![n] = x
  method! Reserve len:Size = Void
    if len > this.len
      this.p.realloc len
  method Checkidx x:Size = Bool
    return x <= this.len
  method Get n:Size = T
    return this.p.[n]
  method Set n:Size x:T = Void
    this.p![n] = x
  method Allidx = IndexRange
    return this.p.Allidx
  method Rangeidx from:Size to:Size ?by:?.Size = IndexRange
    return Range from to by
  method All = ElementRange
    return this.p.All
  method Range from:Size to:Size ?by:?.Size = ElementRange
    return this.p.Range from to by

type ElementRange T = (ElementIterator T)
  v :.(Vector T)
  range :IndexRange

  method! Ctor c:.(ForwardContainer T) = Void
    this!range = c.Allidx
  method !Next = Bool
    return this.range!Next
  method Get = Size
    return this.v.[this.range.Index]
