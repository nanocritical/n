from n import *
import n.bench
import n.fs
import n.path
import n.time

intf `Comparison impl:`Enum =
	met Name = String
	met! Run ex:!bench.Example repeat:Uint i:impl = Error
	met Check = Error

(fun impl:`Enum) Compare ex:!bench.Example repeat:Uint c:!(`Comparison impl)
	Eprn c.Name

	for i over (Enumset impl).ALL.Iter
		-- Warm once.
		let _ = c!Run ex 1 i

		ex!Benchmark CLOCK
		let err = c!Run ex repeat i
		let time = ex.Clock.Runtime
		if err != OK
			Eprn i "Error"
			Eprn err
		else
			Eprn i time

	let err = c.Check
	if err != OK
		Eprn "Error: inconsistent results"
	Eprn

struct index =
	isa (`Comparison String_index_impl)
	name	:String
	haystack:String
	needle	:String
	r	:(Buf Int)

index met# Init
	self!r#Resize String_index_impl.COUNT

index met Name = String
	return self.name

index met Check = Error
	let x0 = self.r.[0]
	foreach x over self.r
		if x != x0
			return INVAL
	return OK

index met! Run ex:!bench.Example repeat:Uint impl:String_index_impl = Error
	foreach _ over 0 .. repeat
		self!r![impl.Tag.Uint-1]! = self.haystack.Index_selectimpl impl self.needle
	return OK

fun dict = Error, *fs.Mmap
	let except, f = fs.Open (path.Mk "/tmp/1g")
	let except, m = f!Mmap
	return OK, m

fun Main = Error
	let ex = {}:bench.Example
	let words such
		try
			let except, m = dict
			words = m.String
		catch err
			Fatal err
	let repeat = 1

	let index_yes_worstnaive = {name="index.yes.worstnaive"
		\ haystack="aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaab" needle ="aab"}:index
	index_yes_worstnaive#Init
	Compare !ex 10*repeat !index_yes_worstnaive

	let index_yes_short = {name="index.yes.short"
		\ haystack=words needle="Linux"}:index
	index_yes_short#Init
	let index_no_short = {name="index.no.short"
		\ haystack=words needle="Ginux"}:index
	index_no_short#Init
	let index_no_long = {name="index.no.long"
		\ haystack=words needle="Linuxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx"}:index
	index_no_long#Init

	Compare !ex repeat !index_yes_short
	Compare !ex repeat !index_no_short
	Compare !ex repeat !index_no_long

	return OK
