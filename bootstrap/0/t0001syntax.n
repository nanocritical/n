from nlang import *

fun main = i32
  let y = 'test'
    say 'test'
    y = 'test'.append 'test'
  let y2 = 0:i32
  for x in y
    pass
  let z5 = 1, 2+4*+1, (3,3)
  let z4 = 1 * 2 + 3
  let z6 = 1 * 2 + 3, 1 * 2 + 3, 6 + 4
  let z = - 0 + (1 + 2) \
      * 3 / 2 * (2 + 2) * 2
  let z2 = - 0 + (1 + 2) * 3 / 2 * 2 \
      + 2 * 2
  let z3 = - 1 * 2
  return - 0 + (1 + 2) * 3 / 2 + 2

fun other x:i32 = (bool)
  while false
    return false
  return not true and false or true

fun other2 x:i32 y:i32 = i32, \
    (i32, i32)
  try
    return sizeof 0:u32
  catch e
    return 1
    try -> pass
    catch e -> pass

fun other3 x:i32 y:i32 = ((i32, i32), i32)
  if x > 0 -> z = 0
  elif x == 0 -> say 'test'
  elif x == 1
    z = 1
    if x < 0
      say 'test2'
    else
      say 'test'
  else
    say 'end'

  match x
  | 0 -> say 'test0'
  | 1
    say 'test1'
    say 'test2'
    y = 1+2
  | _
    say 'default'
    say 'sorry'

  return (0, 0), 0

inline fun other4 x:i32 = i32
extern fun other5 x:i32 = i32

type test = show
  x:i32
  y:i64
  z:i32
  delegate (self.x, self.y, self.z) show
  invariant -> z > 0
  invariant
    x + y > 0

test method foo x:i32 = r:i32
  let other = this{{ x=1 y=2 z=3 }}
  let other2 = test{{ x=1 y=1+2 z=(say 'test') }}
  return 0

  pre
    x > 0
  post -> r == 0
  example
    let t = test.mk
    t.foo == 0

test method foo2 = i32
  return self.foo 1
test method foo3 = void

type test2 =
  t:test

type test3 = interfaces \
    compiler.return_by_copy
  t:test

fun foo x:i32 = r:i32
  pre -> x != 0
  post -> r != 0

  let z = 0
    let pz = @z
    let pmz = @!z
    let pMz = @#z
    invariant -> z > 0 -- applies to the mutating block for z
    post -> z > 0
    let y = 0
      for i in range 0 10
        invariant -> r > z
        invariant -> r + z > y
        post -> z > 0
        y = i
        z = y
        r = z + 1

  return r
