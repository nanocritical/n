from n import *

struct holder t:{`Copyable `Trivial_ctor} =
	x	:t

holder fun mk x:t = this --::(nonnull x => nonnull self.x)
	return {x=x}

fun id x:*I32 = *I32
	return x

struct wants_values =
	x	:I32
	y	:String

fun foo w:wants_values = I32
	return w.x

fun Main = I32
	let x = (Max I32) 0 1:I32
	let xx = Max 0 1:I32

	let p0 = *0:I32
	let p1 = *1:I32
	let np1 = nil
	such
		np1 = p1
	let y = (Max I32) p0 p1
	let yy = Max p0 p1

	let h = (holder I32).mk p1
	let h1 = ((holder ?*I32).mk p1):(holder ?*I32)
	let hh = (holder.mk *np1):(holder ?*I32)
	let hhh = (holder.mk 1:I32):(holder I32)

	-- FIXME: need support for ::nonnull on mk to use h1.x and hh.x over the return
	-- expression at the end.
	let _ = h1.x
	let _ = hh.x

	assert 1 == p0 + p1
	assert 1 == p0* + p1
	assert 1 == p0 + p1*
	assert 1 == p0* + p1*
	assert 1 == (id p0) + p1
	assert 1 == (id p0)* + p1

	let pu3 = *3
	assert 8 == 1:U64 ov<< pu3

	block
		let x = *42:I32
		let y = *"test"
		let w = {x=x y=y}
		assert foo w == 42

	block
		let x = ?42:I32
		let y = ?"test"
		let w = {x=x y=y}
		assert foo w == 42

	return x + xx + p0 + p1 + y + yy + h.x + hhh.x - 7 -- + h1.x + hh.x - 2
