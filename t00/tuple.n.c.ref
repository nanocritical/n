#include <lib/nlang/runtime.h>
#define NLANG_DECLARE_TYPES
# include "lib/nlang/module.n.h.out"
#undef NLANG_DECLARE_TYPES

#define NLANG_DECLARE_TYPES
# include "t00/tuple.n.h.out"
#undef NLANG_DECLARE_TYPES


#define NLANG_DEFINE_TYPES
# include "lib/nlang/module.n.h.out"
#undef NLANG_DEFINE_TYPES

#define NLANG_DEFINE_TYPES
# include "t00/tuple.n.h.out"
#undef NLANG_DEFINE_TYPES


#define NLANG_DECLARE_FUNCTIONS
# include "lib/nlang/module.n.h.out"
#undef NLANG_DECLARE_FUNCTIONS

#define NLANG_DECLARE_FUNCTIONS
# include "t00/tuple.n.h.out"
#undef NLANG_DECLARE_FUNCTIONS
static _Ngen_nlang_builtins_tuple_2__nlang_builtins_i32__nlang_builtins_i32_genN_ t00_tuple_foo(void);

static _Ngen_nlang_builtins_tuple_2__nlang_builtins_i32__nlang_builtins_i32_genN_ t00_tuple_bar(void);

#define NLANG_DEFINE_FUNCTIONS
# include "lib/nlang/module.n.h.out"
#undef NLANG_DEFINE_FUNCTIONS

#define NLANG_DEFINE_FUNCTIONS
# include "t00/tuple.n.h.out"
#undef NLANG_DEFINE_FUNCTIONS
static _Ngen_nlang_builtins_tuple_2__nlang_builtins_i32__nlang_builtins_i32_genN_ t00_tuple_foo(void) {
 {
return (_Ngen_nlang_builtins_tuple_2__nlang_builtins_i32__nlang_builtins_i32_genN_){(nlang_builtins_i32)1, (-(nlang_builtins_i32)1)};
}
}

static _Ngen_nlang_builtins_tuple_2__nlang_builtins_i32__nlang_builtins_i32_genN_ t00_tuple_bar(void) {
__attribute__((__unused__)) nlang_builtins_i32 x = { 0 };
__attribute__((__unused__)) nlang_builtins_i32 y = { 0 };
 {
x = (nlang_builtins_i32)1;
y = (-(nlang_builtins_i32)1);
}
return (_Ngen_nlang_builtins_tuple_2__nlang_builtins_i32__nlang_builtins_i32_genN_){x, y};
}

nlang_builtins_i32 _Nmain(void) {
 {
nlang_builtins_i32 x0 = (nlang_builtins_i32)1;
nlang_builtins_i32 y0 = (-(nlang_builtins_i32)1);
;
_Ngen_nlang_builtins_tuple_2__nlang_builtins_i32__nlang_builtins_i32_genN_ _Ngensym0 = { 0 };
(void) (({ _Ngensym0 = t00_tuple_foo();
_Ngensym0;
; }));
nlang_builtins_i32 x = ((_Ngensym0).x0);
nlang_builtins_i32 y = ((_Ngensym0).x1);
;
nlang_builtins_assert(((((x0 * y0) * x) * y) == (nlang_builtins_i32)1));
_Ngen_nlang_builtins_tuple_2__nlang_builtins_i32__nlang_builtins_i32_genN_ _Ngensym1 = { 0 };
(void) (({ _Ngensym1 = t00_tuple_foo();
_Ngensym1;
; }));
nlang_builtins_i32 x1 = ((_Ngensym1).x0);
;
_Ngen_nlang_builtins_tuple_2__nlang_builtins_i32__nlang_builtins_i32_genN_ _Ngensym2 = { 0 };
(void) (({ _Ngensym2 = t00_tuple_foo();
_Ngensym2;
; }));
nlang_builtins_i32 y1 = ((_Ngensym2).x1);
;
_Ngen_nlang_builtins_tuple_2__nlang_builtins_i32__nlang_builtins_i32_genN_ _Ngensym3 = { 0 };
(void) (({ _Ngensym3 = t00_tuple_bar();
_Ngensym3;
; }));
nlang_builtins_i32 x2 = ((_Ngensym3).x0);
nlang_builtins_i32 y2 = ((_Ngensym3).x1);
;
nlang_builtins_assert(((x2 + y2) == (nlang_builtins_i32)0));
return (((x0 + y0) + (x + y)) + (x1 + y1));
}
}
void t00_tuple_Nrunexamples(void) __attribute__((section(".text.nlang.examples")));
void t00_tuple_Nrunexamples(void) {
}
