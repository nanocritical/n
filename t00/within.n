from n import *

globalenv f:@!`f

intf `f =
	met prn s:@String

struct myf =
	isa `f
	dummy	:U32

myf met prn s:@String
	Prn 'saying2:' self.dummy s

intf `e =
	met Prn s:@String

struct mye =
	isa `e

globalenv e:@!`e
within e

mye met Prn s:@String
	Prn 'saying:' s

fun do = I32 within f
	let f1 = Alloc myf
	let header = Alloc (Envheader @!`f)
	header#Env = f1
	Globalenv_install f header

	f.prn 'module'
	e.Prn 'function'

	block
		let f2 = Alloc myf
		f2!dummy = 42
		let header = Alloc (Envheader @!`f)
		header#Env = f2
		Globalenv_install f header
		assert f1 === (Dyncast myf) (Globalenv_parent f)
		f.prn 'module2'
		Globalenv_uninstall f

	f.prn 'module3'

--	let f3 = Alloc myf
--	f3!dummy = 43
--	within f = f3
--		f.prn 'module'
--	within f = f2
--		f.prn 'module'
--	within f = f1
--		f.prn 'module'
--
--	f.prn 'module4'

	return 0

fun Main = I32
	let e1 = Alloc mye
	let header = Alloc (Envheader @!`e)
	header#Env = e1
	Globalenv_install e header
	return do
