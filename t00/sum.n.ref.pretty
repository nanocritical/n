from nlang import *
type en = <root>.nlang.builtins.`trivial_copy <root>.nlang.builtins.`trivial_dtor <root>.nlang.builtins.`enum
  tag_type = nlang.builtins.u32
  final = t00.sum.en
  this = t00.sum.en
  | A = 0
  | B = 3
  | C = 3 + 1
  en method <root>.nlang.builtins.`copyable.copy_ctor other:@final = _nretval:void 

  en method <root>.nlang.builtins.`has_equality.operator_eq other:@final = _nretval:bool 

  en method <root>.nlang.builtins.`has_equality.operator_ne other:@final = _nretval:bool 


type hen = <root>.nlang.builtins.`trivial_copy <root>.nlang.builtins.`trivial_dtor <root>.nlang.builtins.`enum
  tag_type = nlang.builtins.u32
  final = t00.sum.hen
  this = t00.sum.hen
  | A = 0
  | B = 0 + 1
    | BA = 0 + 1
    | BB = 0 + 1 + 1
    | BC = 0 + 1 + 1 + 1
  | C = 0 + 1 + 1
  hen method <root>.nlang.builtins.`copyable.copy_ctor other:@final = _nretval:void 

  hen method <root>.nlang.builtins.`has_equality.operator_eq other:@final = _nretval:bool 

  hen method <root>.nlang.builtins.`has_equality.operator_ne other:@final = _nretval:bool 


type un =
  tag_type = nlang.builtins.u8
  final = t00.sum.un
  this = t00.sum.un
  | A = 0
  | B = 0 + 1
    x:u32
  | C = 2
    x:en

type hun =
  tag_type = nlang.builtins.u32
  final = t00.sum.hun
  this = t00.sum.hun
  | A = 0
  | B = 0 + 1
    x:u32
    | BA = 0 + 1
      y:u32
      z:u32
    | BB = 0 + 1 + 1
      z:i64

export fun main = _nretval:i32 
  block
    noop
    e = en.A
  match block 
  e;;
  | A
    noop
  | _
    _Ngensym0 = 1
    return _Ngensym0
  noop
  f = hen.BA
  match block 
  f;;
  | B
    noop
  | _
    _Ngensym1 = 1
    return _Ngensym1
  match block 
  f;;
  | BA
    noop
  | _
    _Ngensym2 = 1
    return _Ngensym2
  _Ngensym3 = 0
  return _Ngensym3
