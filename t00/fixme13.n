from n import *
from n.unsafe import Nonnull_cast

fun Main = I32
  let p = @1
  return (Nonnull_cast p).

  -- For this to work, we would have to change nonnull_cast to not have the
  -- result of the type as a generic argument. But for that, we would a way to
  -- get the non-nullable version of a nullable reference. The obvious approach
  -- of defining a alias to (Ref t) inside (Nullable_ref t) doesn't work as the
  -- binary accessor logic prevents accessing the content of a reference struct.
  --
  -- 	extern struct Ref t:`Any =
  -- 	  export isa (`Any_ref t)
  -- 	  alias Nullable = Nullable_ref t
  --
  -- We could allow it as a special case, or provide builtins type functions
  -- Nullable and Nonnullable. Or use a generic (Nullable Ref) instead of
  -- Nullable_ref.
