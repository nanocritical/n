from n import *

example hashmap_basic
	var m = {}:(Map Stringbuf Uint)
	assert m.Count == 0
	assert not m.["42"]?

	(m#Store "42")# = 42
	assert m.Count == 1
	assert m.["42"] == 42

	let added, _ = m#Try_store "42"
	assert not added
	assert m.Count == 1
	assert m.["42"] == 42

	-- Overwrite
	(m#Store "42")# = 43
	assert m.Count == 1
	assert m.["42"] == 43
	var n = m

	_ = m#Delete "42"
	assert not m#Delete "42"

	let added2, _ = m#Try_store "42"
	assert added2
	(m#Store "42")# = 43
	assert m.["42"] == 43

	(m#Store "44")# = 44
	assert m.Count == 2
	assert m.["42"] == 43
	assert m.["44"] == 44

	for k, v over m.Iter
		if k == "42"
			assert v == 43
		elif k == "44"
			assert v == 44
		else
			assert false

	var mcopy = m
	assert mcopy.Count == m.Count
	assert mcopy.["42"] == m.["42"]
	assert mcopy.["44"] == m.["44"]
	assert mcopy == m
	assert n != m

struct collides =
	isa `Hashable32
	x	:U64

collides met Hash32 = U32
	return 0xcafe

example hashmap_collision
	let a = {x=31}:collides
	let b = {x=0x1_0000_0000}:collides
	assert a.Hash32 == b.Hash32

	var m = {}:(Map collides Uint)
	(m#Store a)# = 42
	assert m.[a] == 42
	(m#Store b)# = 43
	assert m.[b] == 43
	assert m.[a] == 42

example hashmap_growth
	var m = {}:(Map Stringbuf Uint)

	var before
	foreach i over 0 .. 16
		let buf = {}:Stringbuf such
			buf#Pr i
			(m#Store buf)# = i
			buf#Clear
		assert m.Count == i + 1
		-- We want the size after initialization.
		before = m.table.size
	assert m.table.size == before
	foreach i over 0 .. 16
		let buf = {}:Stringbuf such
			buf#Pr i
			assert m.[buf] == i
			buf#Clear

	foreach i over 16 .. 256
		let buf = {}:Stringbuf such
			buf#Pr i
			(m#Store buf)# = i
			buf#Clear
		assert m.Count == i + 1
	assert m.table.size > before
	foreach i over 16 .. 256
		let buf = {}:Stringbuf such
			buf#Pr i
			assert m.[buf] == i
			buf#Clear

example hashset
	var s = {0 1 2 3 4}:(Set Uint)
	var scopy = s
	assert s == scopy
	let t = {0 1 2}:(Set Uint)
	assert t < s
	assert t <= s
	assert s#Remove_all t
	assert s.Count == 2
	assert not 0 in s
	assert not 1 in s
	assert not 2 in s
	assert 3 in s
	assert 4 in s
	assert s#Add_all t
	assert 0 in s
	assert 1 in s
	assert 2 in s
	assert 3 in s
	assert 4 in s
	assert s.Count == 5
	assert not s#Add_all t
	assert s == scopy
	assert t != s

fun Main = I32
	let m = {("42", 42) ("43", 43)}:(Map Stringbuf Uint)
	Prn m
	let s = {0 1 2 3 4}:(Set Uint)
	Prn s
	return 0
