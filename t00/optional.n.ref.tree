MODULE_BODY :nlang.builtins.__internal_not_typeable__
 IMPORT :nlang.builtins.__internal_not_typeable__
  IDENT(nlang)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__literal_null__)
  IMPORT :<import>
   IDENT(nlang)
   IMPORT :<import>
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
   IMPORT :<import>
    BIN(.)
     IDENT(nlang)
     IDENT(containers)
   IMPORT :<import>
    BIN(.)
     IDENT(nlang)
     IDENT(memory)
   IMPORT :<import>
    BIN(.)
     IDENT(nlang)
     IDENT(chars)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__literal_integer__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__literal_floating__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__internal_not_typeable__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__call_function_slot__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__mutable__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__mercurial__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`any)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`prevent_dyn)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`copyable)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`copyable_but_owned)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`trivial_copy)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`trivial_copy_but_owned)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`return_by_copy)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`default_ctor)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`default_dtor)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`error_dtor)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`trivial_ctor)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`trivial_dtor)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`matchable)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`has_equality)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`trivial_equality)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`has_compare)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`ordered)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`trivial_order)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`ordered_by_compare)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`arithmetic)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`bitwise)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`sum_copy)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`sum_equality)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`sum_order)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(void)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`__ref_compatible)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`any_any_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`any_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`any_mutable_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`any_nullable_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`any_nullable_mutable_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(mutable_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(mercurial_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(nullable_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(nullable_mutable_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(nullable_mercurial_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`any_tuple)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_2)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_3)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_4)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_5)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_6)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_7)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_8)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_9)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_10)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_11)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_12)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_13)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_14)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_15)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_16)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`numeric)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`integer)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`signed_integer)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`unsigned_integer)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`native_integer)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`native_signed_integer)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`native_unsigned_integer)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`native_anysign_integer)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`generalized_boolean)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`bool_compatible)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`native_boolean)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`floating)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`native_floating)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`enum)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`union)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(bool)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(i8)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(i16)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(i32)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(i64)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(u8)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(u16)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(u32)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(u64)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(ssize)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(size)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(float)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(double)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`auto_ctor)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`trivial_array_ctor)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`array_ctor)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(static_array)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(abort)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(assert)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(unreached)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__pre__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__post__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__invariant__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__example__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(likely)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(unlikely)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(unused)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(optional)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(optional_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(min)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(max)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`error)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(error)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(drop)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(fatal)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(valist)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(vararg)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`any_environment)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`environment)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(containers)
    IDENT(`locus)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(containers)
    IDENT(`fwd_locus)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(containers)
    IDENT(`bidir_locus)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(containers)
    IDENT(`iterator)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(containers)
    IDENT(index_range)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(containers)
    IDENT(index_iterator)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(containers)
    IDENT(range)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(memory)
    IDENT(`allocator)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(memory)
    IDENT(slice)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(chars)
    IDENT(char)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(chars)
    IDENT(`static_string_compatible)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(chars)
    IDENT(`const_string)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(chars)
    IDENT(`string)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(chars)
    IDENT(`string_buffer)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(chars)
    IDENT(static_string)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(chars)
    IDENT(`show)
  IMPORT :<import>
   BIN(.)
    IDENT(nlang)
    IDENT(vpr)
  IMPORT :<import>
   BIN(.)
    IDENT(nlang)
    IDENT(pr)
  IMPORT :<import>
   BIN(.)
    IDENT(nlang)
    IDENT(vsay)
  IMPORT :<import>
   BIN(.)
    IDENT(nlang)
    IDENT(say)
  IMPORT :<import>
   BIN(.)
    IDENT(nlang)
    IDENT(just_const)
  IMPORT :<import>
   BIN(.)
    IDENT(nlang)
    IDENT(just_mutable)
 DEFFUN :t00.optional.opts ::()
  IDENT(opts) :nlang.builtins.__internal_not_typeable__
  GENARGS :nlang.builtins.__internal_not_typeable__
  FUNARGS :nlang.builtins.__internal_not_typeable__
   DEFARG :(nlang.builtins.nullable_ref nlang.builtins.i32) ::(init)
    IDENT(a) :nlang.builtins.__internal_not_typeable__
    UN(?@) :(nlang.builtins.nullable_ref nlang.builtins.i32) ::(init)
     IDENT(i32) :nlang.builtins.i32 ::()
   DEFARG :nlang.builtins.i32 ::(init)
    IDENT(_nretval) :nlang.builtins.__internal_not_typeable__
    IDENT(i32) :nlang.builtins.i32 ::()
  WITHIN :nlang.builtins.void ::(init and nonnull)
  BLOCK :nlang.builtins.void ::()
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym0) :nlang.builtins.i32 ::(init)
     IDENT(_Ngensym0) :nlang.builtins.__internal_not_typeable__
     NUMBER(1) :nlang.builtins.i32 ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym1) :nlang.builtins.i32 ::(init)
     IDENT(_Ngensym1) :nlang.builtins.__internal_not_typeable__
     CALL :nlang.builtins.i32 ::(init)
      IDENT(optional) :(nlang.builtins.optional nlang.builtins.i32) ::()
      IDENT(a) :(nlang.builtins.nullable_ref nlang.builtins.i32) ::(init)
      IDENT(_Ngensym0) :nlang.builtins.i32 ::(init)
   RETURN :nlang.builtins.void ::()
    IDENT(_Ngensym1) :nlang.builtins.i32 ::(init)
 DEFFUN :t00.optional.chained ::()
  IDENT(chained) :nlang.builtins.__internal_not_typeable__
  GENARGS :nlang.builtins.__internal_not_typeable__
  FUNARGS :nlang.builtins.__internal_not_typeable__
   DEFARG :(nlang.builtins.mutable_ref (nlang.builtins.vararg (nlang.builtins.ref nlang.builtins.i32))) ::(init and nonnull)
    IDENT(v) :nlang.builtins.__internal_not_typeable__
    UN(@!) :(nlang.builtins.mutable_ref (nlang.builtins.vararg (nlang.builtins.ref nlang.builtins.i32))) ::(init and nonnull)
     CALL :(nlang.builtins.vararg (nlang.builtins.ref nlang.builtins.i32)) ::()
      IDENT(vararg) :(functor nlang.builtins.vararg nlang.builtins.`any_any_ref) ::()
      UN(@) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
       IDENT(i32) :nlang.builtins.i32 ::()
   DEFARG :nlang.builtins.i32 ::(init)
    IDENT(_nretval) :nlang.builtins.__internal_not_typeable__
    IDENT(i32) :nlang.builtins.i32 ::()
  WITHIN :nlang.builtins.void ::(init and nonnull)
  BLOCK :nlang.builtins.void ::()
   BLOCK :nlang.builtins.void ::(init and nonnull and (t00.optional.chained.<while>.<let>._Ngensym4 => (init and nonnull)))
    NOOP :nlang.builtins.void ::()
    LET :nlang.builtins.void ::()
     DEFNAME(s) :nlang.builtins.i32 ::(init)
      IDENT(s) :nlang.builtins.__internal_not_typeable__
      NUMBER(0) :nlang.builtins.i32 ::(init)
    BLOCK :nlang.builtins.void ::(init and nonnull and (t00.optional.chained.<while>.<let>._Ngensym4 => (init and nonnull)))
     BLOCK :nlang.builtins.void ::(init and nonnull and (t00.optional.chained.<while>.<let>._Ngensym4 => (init and nonnull)))
      NOOP :nlang.builtins.void ::()
      NOOP :nlang.builtins.void ::()
      LET :nlang.builtins.void ::()
       DEFNAME(_Ngensym2) :(nlang.builtins.mutable_ref (nlang.builtins.vararg (nlang.builtins.ref nlang.builtins.i32))) ::(init and nonnull)
        IDENT(_Ngensym2) :nlang.builtins.__internal_not_typeable__
        UN(@!) :(nlang.builtins.mutable_ref (nlang.builtins.vararg (nlang.builtins.ref nlang.builtins.i32))) ::(init and nonnull)
         UN(!) :(nlang.builtins.vararg (nlang.builtins.ref nlang.builtins.i32)) ::(init)
          IDENT(v) :(nlang.builtins.mutable_ref (nlang.builtins.vararg (nlang.builtins.ref nlang.builtins.i32))) ::(init and nonnull)
      BLOCK :nlang.builtins.void ::(init and nonnull and (t00.optional.chained.<while>.<let>._Ngensym4 => (init and nonnull)))
       WHILE :nlang.builtins.void ::()
        BLOCK :nlang.builtins.bool ::(init)
         LET :nlang.builtins.void ::()
          DEFNAME(_Ngensym4) :nlang.builtins.bool ::(init)
           IDENT(_Ngensym4) :nlang.builtins.__internal_not_typeable__
           CALL :nlang.builtins.bool ::(init)
            DIRECTDEF :nlang.builtins.vararg.has_next ::()
            IDENT(_Ngensym2) :(nlang.builtins.mutable_ref (nlang.builtins.vararg (nlang.builtins.ref nlang.builtins.i32))) ::(init and nonnull)
         IDENT(_Ngensym4) :nlang.builtins.bool ::(init)
        BLOCK :nlang.builtins.void ::(init)
         PHIc(s) :nlang.builtins.__internal_not_typeable__ ::(init)
         PHIc(_Ngensym2) :nlang.builtins.__internal_not_typeable__ ::(init and nonnull)
         NOOP :nlang.builtins.void ::()
         LET :nlang.builtins.void ::()
          DEFNAME(i) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
           IDENT(i) :nlang.builtins.__internal_not_typeable__
           CALL :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
            DIRECTDEF :nlang.builtins.vararg.next ::()
            IDENT(_Ngensym2) :(nlang.builtins.mutable_ref (nlang.builtins.vararg (nlang.builtins.ref nlang.builtins.i32))) ::(init and nonnull)
         BLOCK :nlang.builtins.void ::(init)
          LET :nlang.builtins.void ::()
           DEFNAME(_Ngensym5) :nlang.builtins.i32 ::(init)
            IDENT(_Ngensym5) :nlang.builtins.__internal_not_typeable__
            UN(.) :nlang.builtins.i32 ::(init)
             IDENT(i) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
          BIN( += ) :nlang.builtins.void ::(init)
           IDENT(s) :nlang.builtins.i32 ::(init)
           IDENT(_Ngensym5) :nlang.builtins.i32 ::(init)
       PHI (s) :nlang.builtins.__internal_not_typeable__ ::(init and (t00.optional.chained.<while>.<let>._Ngensym4 => (init)))
       PHI (_Ngensym2) :nlang.builtins.__internal_not_typeable__ ::(init and nonnull and (t00.optional.chained.<while>.<let>._Ngensym4 => (init and nonnull)))
   RETURN :nlang.builtins.void ::()
    IDENT(s) :nlang.builtins.i32 ::(init and (t00.optional.chained.<while>.<let>._Ngensym4 => (init)))
 DEFFUN :t00.optional.var ::()
  IDENT(var) :nlang.builtins.__internal_not_typeable__
  GENARGS :nlang.builtins.__internal_not_typeable__
  FUNARGS :nlang.builtins.__internal_not_typeable__
   DEFARG :nlang.builtins.i32 ::(init)
    IDENT(a) :nlang.builtins.__internal_not_typeable__
    IDENT(i32) :nlang.builtins.i32 ::()
   DEFARG :(nlang.builtins.nullable_ref nlang.builtins.i32) ::(init)
    IDENT(b) :nlang.builtins.__internal_not_typeable__
    UN(?@) :(nlang.builtins.nullable_ref nlang.builtins.i32) ::(init)
     IDENT(i32) :nlang.builtins.i32 ::()
   DEFARG :(nlang.builtins.vararg (nlang.builtins.ref nlang.builtins.i32)) ::(init)
    IDENT(v) :nlang.builtins.__internal_not_typeable__
    CALL :(nlang.builtins.vararg (nlang.builtins.ref nlang.builtins.i32)) ::()
     IDENT(vararg) :(functor nlang.builtins.vararg nlang.builtins.`any_any_ref) ::()
     UN(@) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
      IDENT(i32) :nlang.builtins.i32 ::()
   DEFARG :nlang.builtins.i32 ::(init)
    IDENT(_nretval) :nlang.builtins.__internal_not_typeable__
    IDENT(i32) :nlang.builtins.i32 ::()
  WITHIN :nlang.builtins.void ::(init and nonnull)
  BLOCK :nlang.builtins.void ::()
   BLOCK :nlang.builtins.void ::()
    NOOP :nlang.builtins.void ::()
    LET :nlang.builtins.void ::()
     DEFNAME(_Ngensym6) :(nlang.builtins.mutable_ref (nlang.builtins.vararg (nlang.builtins.ref nlang.builtins.i32))) ::(init and nonnull)
      IDENT(_Ngensym6) :nlang.builtins.__internal_not_typeable__
      UN(@!) :(nlang.builtins.mutable_ref (nlang.builtins.vararg (nlang.builtins.ref nlang.builtins.i32))) ::(init and nonnull)
       IDENT(v) :(nlang.builtins.vararg (nlang.builtins.ref nlang.builtins.i32)) ::(init)
    LET :nlang.builtins.void ::()
     DEFNAME(s) :nlang.builtins.i32 ::(init)
      IDENT(s) :nlang.builtins.__internal_not_typeable__
      CALL :nlang.builtins.i32 ::(init)
       IDENT(chained) :t00.optional.chained ::()
       IDENT(_Ngensym6) :(nlang.builtins.mutable_ref (nlang.builtins.vararg (nlang.builtins.ref nlang.builtins.i32))) ::(init and nonnull)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym7) :nlang.builtins.i32 ::(init)
     IDENT(_Ngensym7) :nlang.builtins.__internal_not_typeable__
     NUMBER(0) :nlang.builtins.i32 ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym8) :nlang.builtins.i32 ::(init)
     IDENT(_Ngensym8) :nlang.builtins.__internal_not_typeable__
     CALL :nlang.builtins.i32 ::(init)
      IDENT(optional) :(nlang.builtins.optional nlang.builtins.i32) ::()
      IDENT(b) :(nlang.builtins.nullable_ref nlang.builtins.i32) ::(init)
      IDENT(_Ngensym7) :nlang.builtins.i32 ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym9) :nlang.builtins.i32 ::(init)
     IDENT(_Ngensym9) :nlang.builtins.__internal_not_typeable__
     BIN( + ) :nlang.builtins.i32 ::(init)
      IDENT(a) :nlang.builtins.i32 ::(init)
      IDENT(_Ngensym8) :nlang.builtins.i32 ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensyma) :nlang.builtins.i32 ::(init)
     IDENT(_Ngensyma) :nlang.builtins.__internal_not_typeable__
     BIN( + ) :nlang.builtins.i32 ::(init)
      IDENT(_Ngensym9) :nlang.builtins.i32 ::(init)
      IDENT(s) :nlang.builtins.i32 ::(init)
   RETURN :nlang.builtins.void ::()
    IDENT(_Ngensyma) :nlang.builtins.i32 ::(init)
 DEFFUN :t00.optional.onlyvar ::()
  IDENT(onlyvar) :nlang.builtins.__internal_not_typeable__
  GENARGS :nlang.builtins.__internal_not_typeable__
  FUNARGS :nlang.builtins.__internal_not_typeable__
   DEFARG :(nlang.builtins.vararg (nlang.builtins.ref nlang.builtins.i32)) ::(init)
    IDENT(v) :nlang.builtins.__internal_not_typeable__
    CALL :(nlang.builtins.vararg (nlang.builtins.ref nlang.builtins.i32)) ::()
     IDENT(vararg) :(functor nlang.builtins.vararg nlang.builtins.`any_any_ref) ::()
     UN(@) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
      IDENT(i32) :nlang.builtins.i32 ::()
   DEFARG :nlang.builtins.i32 ::(init)
    IDENT(_nretval) :nlang.builtins.__internal_not_typeable__
    IDENT(i32) :nlang.builtins.i32 ::()
  WITHIN :nlang.builtins.void ::(init and nonnull)
  BLOCK :nlang.builtins.void ::()
   BLOCK :nlang.builtins.void ::(init and nonnull and (t00.optional.onlyvar.<while>.<let>._Ngensymc => (init and nonnull)))
    NOOP :nlang.builtins.void ::()
    LET :nlang.builtins.void ::()
     DEFNAME(s) :nlang.builtins.i32 ::(init)
      IDENT(s) :nlang.builtins.__internal_not_typeable__
      NUMBER(0) :nlang.builtins.i32 ::(init)
    BLOCK :nlang.builtins.void ::(init and nonnull and (t00.optional.onlyvar.<while>.<let>._Ngensymc => (init and nonnull)))
     BLOCK :nlang.builtins.void ::(init and nonnull and (t00.optional.onlyvar.<while>.<let>._Ngensymc => (init and nonnull)))
      NOOP :nlang.builtins.void ::()
      LET :nlang.builtins.void ::()
       DEFNAME(_Ngensymb) :(nlang.builtins.mutable_ref (nlang.builtins.vararg (nlang.builtins.ref nlang.builtins.i32))) ::(init and nonnull)
        IDENT(_Ngensymb) :nlang.builtins.__internal_not_typeable__
        UN(@!) :(nlang.builtins.mutable_ref (nlang.builtins.vararg (nlang.builtins.ref nlang.builtins.i32))) ::(init and nonnull)
         IDENT(v) :(nlang.builtins.vararg (nlang.builtins.ref nlang.builtins.i32)) ::(init)
      BLOCK :nlang.builtins.void ::(init and nonnull and (t00.optional.onlyvar.<while>.<let>._Ngensymc => (init and nonnull)))
       WHILE :nlang.builtins.void ::()
        BLOCK :nlang.builtins.bool ::(init)
         LET :nlang.builtins.void ::()
          DEFNAME(_Ngensymc) :nlang.builtins.bool ::(init)
           IDENT(_Ngensymc) :nlang.builtins.__internal_not_typeable__
           CALL :nlang.builtins.bool ::(init)
            DIRECTDEF :nlang.builtins.vararg.has_next ::()
            IDENT(_Ngensymb) :(nlang.builtins.mutable_ref (nlang.builtins.vararg (nlang.builtins.ref nlang.builtins.i32))) ::(init and nonnull)
         IDENT(_Ngensymc) :nlang.builtins.bool ::(init)
        BLOCK :nlang.builtins.void ::(init)
         PHIc(s) :nlang.builtins.__internal_not_typeable__ ::(init)
         PHIc(_Ngensymb) :nlang.builtins.__internal_not_typeable__ ::(init and nonnull)
         NOOP :nlang.builtins.void ::()
         LET :nlang.builtins.void ::()
          DEFNAME(i) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
           IDENT(i) :nlang.builtins.__internal_not_typeable__
           CALL :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
            DIRECTDEF :nlang.builtins.vararg.next ::()
            IDENT(_Ngensymb) :(nlang.builtins.mutable_ref (nlang.builtins.vararg (nlang.builtins.ref nlang.builtins.i32))) ::(init and nonnull)
         BLOCK :nlang.builtins.void ::(init)
          LET :nlang.builtins.void ::()
           DEFNAME(_Ngensymd) :nlang.builtins.i32 ::(init)
            IDENT(_Ngensymd) :nlang.builtins.__internal_not_typeable__
            UN(.) :nlang.builtins.i32 ::(init)
             IDENT(i) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
          BIN( += ) :nlang.builtins.void ::(init)
           IDENT(s) :nlang.builtins.i32 ::(init)
           IDENT(_Ngensymd) :nlang.builtins.i32 ::(init)
       PHI (s) :nlang.builtins.__internal_not_typeable__ ::(init and (t00.optional.onlyvar.<while>.<let>._Ngensymc => (init)))
       PHI (_Ngensymb) :nlang.builtins.__internal_not_typeable__ ::(init and nonnull and (t00.optional.onlyvar.<while>.<let>._Ngensymc => (init and nonnull)))
   RETURN :nlang.builtins.void ::()
    IDENT(s) :nlang.builtins.i32 ::(init and (t00.optional.onlyvar.<while>.<let>._Ngensymc => (init)))
 DEFFUN :t00.optional.main ::()
  IDENT(main) :nlang.builtins.__internal_not_typeable__
  GENARGS :nlang.builtins.__internal_not_typeable__
  FUNARGS :nlang.builtins.__internal_not_typeable__
   DEFARG :nlang.builtins.i32 ::(init)
    IDENT(_nretval) :nlang.builtins.__internal_not_typeable__
    IDENT(i32) :nlang.builtins.i32 ::()
  WITHIN :nlang.builtins.void ::(init and nonnull)
  BLOCK :nlang.builtins.void ::()
   BLOCK :nlang.builtins.void ::()
    IF :nlang.builtins.void ::()
     BLOCK :nlang.builtins.bool ::(init)
      LET :nlang.builtins.void ::()
       DEFNAME(_Ngensyme) :nlang.builtins.i32 ::(init)
        IDENT(_Ngensyme) :nlang.builtins.__internal_not_typeable__
        NUMBER(1) :nlang.builtins.i32 ::(init)
      LET :nlang.builtins.void ::()
       DEFNAME(_Ngensym29) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
        IDENT(_Ngensym29) :nlang.builtins.__internal_not_typeable__
        UN(@) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
         IDENT(_Ngensyme) :nlang.builtins.i32 ::(init)
      LET :nlang.builtins.void ::()
       DEFNAME(_Ngensymf) :nlang.builtins.i32 ::(init)
        IDENT(_Ngensymf) :nlang.builtins.__internal_not_typeable__
        CALL :nlang.builtins.i32 ::(init)
         IDENT(opts) :t00.optional.opts ::()
         CALLNAMEDARG(a) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
          IDENT(_Ngensym29) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
      LET :nlang.builtins.void ::()
       DEFNAME(_Ngensym10) :nlang.builtins.i32 ::(init)
        IDENT(_Ngensym10) :nlang.builtins.__internal_not_typeable__
        NUMBER(1) :nlang.builtins.i32 ::(init)
      LET :nlang.builtins.void ::()
       DEFNAME(_Ngensym11) :nlang.builtins.bool ::(init)
        IDENT(_Ngensym11) :nlang.builtins.__internal_not_typeable__
        BIN( != ) :nlang.builtins.bool ::(init)
         IDENT(_Ngensymf) :nlang.builtins.i32 ::(init)
         IDENT(_Ngensym10) :nlang.builtins.i32 ::(init)
      IDENT(_Ngensym11) :nlang.builtins.bool ::(init)
     BLOCK :nlang.builtins.void ::()
      LET :nlang.builtins.void ::()
       DEFNAME(_Ngensym12) :nlang.builtins.i32 ::(init)
        IDENT(_Ngensym12) :nlang.builtins.__internal_not_typeable__
        NUMBER(1) :nlang.builtins.i32 ::(init)
      RETURN :nlang.builtins.void ::()
       IDENT(_Ngensym12) :nlang.builtins.i32 ::(init)
     BLOCK :nlang.builtins.void ::()
      NOOP :nlang.builtins.void ::()
   IF :nlang.builtins.void ::()
    BLOCK :nlang.builtins.bool ::(init)
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensym13) :nlang.builtins.i32 ::(init)
       IDENT(_Ngensym13) :nlang.builtins.__internal_not_typeable__
       NUMBER(1) :nlang.builtins.i32 ::(init)
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensym2a) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
       IDENT(_Ngensym2a) :nlang.builtins.__internal_not_typeable__
       UN(@) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
        IDENT(_Ngensym13) :nlang.builtins.i32 ::(init)
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensym14) :nlang.builtins.i32 ::(init)
       IDENT(_Ngensym14) :nlang.builtins.__internal_not_typeable__
       CALL :nlang.builtins.i32 ::(init)
        IDENT(opts) :t00.optional.opts ::()
        CALLNAMEDARG(a) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
         IDENT(_Ngensym2a) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensym2b) :(nlang.builtins.nullable_ref nlang.builtins.i32) ::(init and not nonnull)
       IDENT(_Ngensym2b) :nlang.builtins.__internal_not_typeable__
       NUL :(nlang.builtins.nullable_ref nlang.builtins.i32) ::(init and not nonnull)
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensym2c) :nlang.builtins.i32 ::(init)
       IDENT(_Ngensym2c) :nlang.builtins.__internal_not_typeable__
       CALL :nlang.builtins.i32 ::(init)
        IDENT(opts) :t00.optional.opts ::()
        CALLNAMEDARG(a) :(nlang.builtins.nullable_ref nlang.builtins.i32) ::(init and not nonnull)
         IDENT(_Ngensym2b) :(nlang.builtins.nullable_ref nlang.builtins.i32) ::(init and not nonnull)
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensym15) :nlang.builtins.bool ::(init)
       IDENT(_Ngensym15) :nlang.builtins.__internal_not_typeable__
       BIN( != ) :nlang.builtins.bool ::(init)
        IDENT(_Ngensym14) :nlang.builtins.i32 ::(init)
        IDENT(_Ngensym2c) :nlang.builtins.i32 ::(init)
     IDENT(_Ngensym15) :nlang.builtins.bool ::(init)
    BLOCK :nlang.builtins.void ::()
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensym16) :nlang.builtins.i32 ::(init)
       IDENT(_Ngensym16) :nlang.builtins.__internal_not_typeable__
       NUMBER(1) :nlang.builtins.i32 ::(init)
     RETURN :nlang.builtins.void ::()
      IDENT(_Ngensym16) :nlang.builtins.i32 ::(init)
    BLOCK :nlang.builtins.void ::()
     NOOP :nlang.builtins.void ::()
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym17) :nlang.builtins.i32 ::(init)
     IDENT(_Ngensym17) :nlang.builtins.__internal_not_typeable__
     NUMBER(10) :nlang.builtins.i32 ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym18) :nlang.builtins.i32 ::(init)
     IDENT(_Ngensym18) :nlang.builtins.__internal_not_typeable__
     NUMBER(0) :nlang.builtins.i32 ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym19) :nlang.builtins.i32 ::(init)
     IDENT(_Ngensym19) :nlang.builtins.__internal_not_typeable__
     NUMBER(1) :nlang.builtins.i32 ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym1a) :nlang.builtins.i32 ::(init)
     IDENT(_Ngensym1a) :nlang.builtins.__internal_not_typeable__
     NUMBER(2) :nlang.builtins.i32 ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym1b) :nlang.builtins.i32 ::(init)
     IDENT(_Ngensym1b) :nlang.builtins.__internal_not_typeable__
     NUMBER(3) :nlang.builtins.i32 ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym1c) :nlang.builtins.i32 ::(init)
     IDENT(_Ngensym1c) :nlang.builtins.__internal_not_typeable__
     NUMBER(4) :nlang.builtins.i32 ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym2d) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
     IDENT(_Ngensym2d) :nlang.builtins.__internal_not_typeable__
     UN(@) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
      IDENT(_Ngensym19) :nlang.builtins.i32 ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym2e) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
     IDENT(_Ngensym2e) :nlang.builtins.__internal_not_typeable__
     UN(@) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
      IDENT(_Ngensym1a) :nlang.builtins.i32 ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym2f) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
     IDENT(_Ngensym2f) :nlang.builtins.__internal_not_typeable__
     UN(@) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
      IDENT(_Ngensym1b) :nlang.builtins.i32 ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym30) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
     IDENT(_Ngensym30) :nlang.builtins.__internal_not_typeable__
     UN(@) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
      IDENT(_Ngensym1c) :nlang.builtins.i32 ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym1d) :nlang.builtins.i32 ::(init)
     IDENT(_Ngensym1d) :nlang.builtins.__internal_not_typeable__
     CALL :nlang.builtins.i32 ::(init)
      IDENT(var) :t00.optional.var ::()
      IDENT(_Ngensym18) :nlang.builtins.i32 ::(init)
      CALLNAMEDARG(b) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
       IDENT(_Ngensym2d) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
      IDENT(_Ngensym2e) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
      IDENT(_Ngensym2f) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
      IDENT(_Ngensym30) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym1e) :nlang.builtins.bool ::(init)
     IDENT(_Ngensym1e) :nlang.builtins.__internal_not_typeable__
     BIN( == ) :nlang.builtins.bool ::(init)
      IDENT(_Ngensym17) :nlang.builtins.i32 ::(init)
      IDENT(_Ngensym1d) :nlang.builtins.i32 ::(init)
   CALL :nlang.builtins.void ::(init)
    IDENT(assert) :nlang.builtins.assert ::()
    IDENT(_Ngensym1e) :nlang.builtins.bool ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym1f) :nlang.builtins.i32 ::(init)
     IDENT(_Ngensym1f) :nlang.builtins.__internal_not_typeable__
     NUMBER(10) :nlang.builtins.i32 ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym20) :nlang.builtins.i32 ::(init)
     IDENT(_Ngensym20) :nlang.builtins.__internal_not_typeable__
     NUMBER(0) :nlang.builtins.i32 ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym21) :nlang.builtins.i32 ::(init)
     IDENT(_Ngensym21) :nlang.builtins.__internal_not_typeable__
     NUMBER(1) :nlang.builtins.i32 ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym22) :nlang.builtins.i32 ::(init)
     IDENT(_Ngensym22) :nlang.builtins.__internal_not_typeable__
     NUMBER(2) :nlang.builtins.i32 ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym23) :nlang.builtins.i32 ::(init)
     IDENT(_Ngensym23) :nlang.builtins.__internal_not_typeable__
     NUMBER(3) :nlang.builtins.i32 ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym24) :nlang.builtins.i32 ::(init)
     IDENT(_Ngensym24) :nlang.builtins.__internal_not_typeable__
     NUMBER(4) :nlang.builtins.i32 ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym31) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
     IDENT(_Ngensym31) :nlang.builtins.__internal_not_typeable__
     UN(@) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
      IDENT(_Ngensym20) :nlang.builtins.i32 ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym32) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
     IDENT(_Ngensym32) :nlang.builtins.__internal_not_typeable__
     UN(@) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
      IDENT(_Ngensym21) :nlang.builtins.i32 ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym33) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
     IDENT(_Ngensym33) :nlang.builtins.__internal_not_typeable__
     UN(@) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
      IDENT(_Ngensym22) :nlang.builtins.i32 ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym34) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
     IDENT(_Ngensym34) :nlang.builtins.__internal_not_typeable__
     UN(@) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
      IDENT(_Ngensym23) :nlang.builtins.i32 ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym35) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
     IDENT(_Ngensym35) :nlang.builtins.__internal_not_typeable__
     UN(@) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
      IDENT(_Ngensym24) :nlang.builtins.i32 ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym25) :nlang.builtins.i32 ::(init)
     IDENT(_Ngensym25) :nlang.builtins.__internal_not_typeable__
     CALL :nlang.builtins.i32 ::(init)
      IDENT(onlyvar) :t00.optional.onlyvar ::()
      IDENT(_Ngensym31) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
      IDENT(_Ngensym32) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
      IDENT(_Ngensym33) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
      IDENT(_Ngensym34) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
      IDENT(_Ngensym35) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym26) :nlang.builtins.bool ::(init)
     IDENT(_Ngensym26) :nlang.builtins.__internal_not_typeable__
     BIN( == ) :nlang.builtins.bool ::(init)
      IDENT(_Ngensym1f) :nlang.builtins.i32 ::(init)
      IDENT(_Ngensym25) :nlang.builtins.i32 ::(init)
   CALL :nlang.builtins.void ::(init)
    IDENT(assert) :nlang.builtins.assert ::()
    IDENT(_Ngensym26) :nlang.builtins.bool ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym27) :nlang.builtins.i32 ::(init)
     IDENT(_Ngensym27) :nlang.builtins.__internal_not_typeable__
     NUMBER(0) :nlang.builtins.i32 ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym36) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
     IDENT(_Ngensym36) :nlang.builtins.__internal_not_typeable__
     UN(@) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
      IDENT(_Ngensym27) :nlang.builtins.i32 ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym28) :nlang.builtins.i32 ::(init)
     IDENT(_Ngensym28) :nlang.builtins.__internal_not_typeable__
     CALL :nlang.builtins.i32 ::(init)
      IDENT(opts) :t00.optional.opts ::()
      CALLNAMEDARG(a) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
       IDENT(_Ngensym36) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
   RETURN :nlang.builtins.void ::()
    IDENT(_Ngensym28) :nlang.builtins.i32 ::(init)
