from n import *
import n.unsafe
import n.fmt

-- Keeps track of which copy of X contributed what increment/decrement to
-- X.refc. Each copy of X should eventually contribute as much increment and
-- decrement. Useful for tracking down problems.
struct contribs =
	map	:(Map (Ref_as_key ?*X) (Int, Int))

contribs met check
	for r, c over self.map.Iter
		let plus, minus = c
		if plus == - minus
			continue
		_ = r
--		Eprn (unsafe.Voidref.From_ptr r.Ref).Uintptr "\t" plus "\t" minus
		assert plus >= - minus

contribs met print_all
	Eprn "-------------------------------"
	for r, c over self.map.Iter
		let plus, minus = c
		Eprn (unsafe.Voidref.From_ptr r.Ref).Uintptr "\t" plus "\t" minus
	Eprn "==============================="

contribs met# rec who:*X delta:Int
	let p = self#map#Store {Ref=who}
	if delta > 0
		p!X0 += delta
	else
		p!X1 += delta
	assert p.X0 >= -p.X1


-- X is an instrumented non-`Trivial_copy, non-`Trivial_move and
-- non-`Trivial_dtor type to try to validate the inference of copy ctor,
-- move, and dtor.
struct X =
	isa `Has_equality `Show `Hashable32
	refc	:?#U32
	me	:?#this
	con	:?#contribs

X fun Mk = r:this
	r#refc = Alloc U32
	r#refc# = 1
	r#me = #r
	r#con = Alloc contribs
	r#con#rec r +1

X met# Dtor
	assert not self.me? or self === self.me
	if not self.refc?
		return

	self#refc# -= 1
	self#con#rec self -1

	if self.refc == 0
		Free self.refc
		Free self.con

X met# Copy_ctor other:*this
	assert not other.me? or other === other.me
	self#refc = other.refc
	self#con = other.con
	if not self.refc?
		return
	self#refc# += 1
	self#con#rec self +1
	assert not self.me? or self === self.me

X met# Move = ret:this
	assert not self.me? or self === self.me
	ret#refc = self.refc
	ret#con = self.con
	ret#me = #ret
	assert #ret === ret.me
	self#refc = nil
	self#con#rec self -1
	ret#con#rec ret +1

X met Hash32 = U32
	if not self.me?
		return (0:Uintptr).Hash32
	return (unsafe.Voidref.From_ptr self.me).Uintptr.Hash32

X met Operator_eq other:*this = Bool
	return self.me? and other.me? and self.me == other.me

X met Operator_ne other:*this = Bool
	return not self == other

X met Show st:#fmt.`State
	(unsafe.Voidref.From_ptr self.me).Uintptr.Show st


fun T x:*X count:Uint ?_Ncodeloc:?*Codeloc
	if x.refc != count.Trim_u32
		Message_at "" _Ncodeloc
		Eprn "current" x.refc "expected" count
		assert false

fun mk = x:X
	-- I32.MAX so that if it gets closed (and it shouldn't), close(2) will return an error.
	x = X.Mk

fun wipe x:#X
	x.con.check

intf `testable =
	isa `Copyable
	met# reset x:*X

(fun U:`Copyable) id3 obj:*U = res:*U
	res = obj

(fun U:`Copyable) id2 obj:U = res:U
	let tmp = obj
	return (id3 tmp)*

(fun U:`Copyable) id obj:U = U
	return id2 obj


(fun U:`testable) scenario1 x:*X add:Uint
	T x 1
	block
		let y:U such y#reset x
		T x 1+add
		let z = y
		T x 1+2*add
		block
			let zz = id y
			T x 1+3*add
		T x 1+2*add
	T x 1

(fun U:`testable) scenario2 x:*X add:Uint
	T x 1
	block
		let xx = id <- id <- id <- id x
		-- +3 because the temporaries for the 3 rightmost
		-- intermediate values live until the end of this block.
		T x 1+1+3
		let y:U such y#reset x
		T x 1+1+3+add
	T x 1


struct a =
	isa `testable
	x	:X
a met# reset x:*X
	self#x = x

example ta
	var x = mk
	T x 1
	(scenario1 a) x 1
	(scenario2 a) x 1
	T x 1
	wipe #x
	T x 1


struct b =
	isa `testable
	x	:(Uint, X)
b met# reset x:*X
	self#x = (42, x*)

example tb
	var x = mk
	(scenario1 b) x 1
	(scenario2 b) x 1
	wipe #x


struct c =
	isa `testable
	x	:(X, Uint, X)
c met# reset x:*X
	self#x = (x*, 42, x*)

example tc
	var x = mk
	(scenario1 c) x 2
	(scenario2 c) x 2
	wipe #x


struct d =
	isa `testable
	x	:(Buf X)
d met# reset x:*X
	self#x#Clear
	foreach _ over 0 .. 100
		self#x#Push# = x

example td
	var x = mk
	(scenario1 d) x 100
	(scenario2 d) x 100
	wipe #x


struct e =
	isa `testable
	x0	:(Buf X)
	x	:[]X
e met# reset x:*X
	self#x0#Clear
	foreach _ over 0 .. 100
		self#x0#Push# = x
	self#x = self.x0.Slice

example te
	var x = mk
	(scenario1 e) x 100
	(scenario2 e) x 100
	wipe #x


struct f =
	isa `testable
	x	:(Map Uint X)
f met# reset x:*X
	foreach i over 0 .. 100
		(self#x#Store i)# = x

example tf
	var x = mk
	(scenario1 f) x 100
	(scenario2 f) x 100

	block
		let y:f such y#reset x
		T x 101
		let v = y.x.Copy_to_buf
		T x 201
	T x 1

	wipe #x


struct f_large =
	isa `testable
	x	:(Map Uint X)
f_large met# reset x:*X
	foreach i over 0 .. 10_000
		(self#x#Store i)# = x

example tf_large
	return OK
	var x = mk
	(scenario1 f_large) x 10_000
	(scenario2 f_large) x 10_000
	wipe #x


struct askey =
	isa `Hashable32
	key	:X

askey met Hash32 = U32
	return self.key.Hash32

struct g =
	isa `testable
	x	:(Map askey X)
g met# reset x:*X
	(self#x#Store {key=x})# = x

example tg
	var x = mk
	(scenario1 g) x 2
	(scenario2 g) x 2

	block
		let y:g such y#reset x
		T x 3
		let v = y.x.Copy_to_buf
		T x 5
	T x 1

	wipe #x


struct h =
	isa `testable
	x	:(Set askey)
h met# reset x:*X
	let added = self#x#Add {key=x}
	assert added

example th
	var x = mk
	(scenario1 h) x 1
	(scenario2 h) x 1

	block
		let y:h such y#reset x
		T x 2
		let v = y.x.Copy_to_buf
		T x 3
	T x 1

	wipe #x


struct i =
	isa `testable
	x	:(Buf g)
i met# reset x:*X
	foreach _ over 0 .. 100
		let y = self#x#Push
		y#reset x

example ti
	var x = mk
	(scenario1 i) x 200
	(scenario2 i) x 200
	wipe #x


struct k =
	isa `testable
	x	:?X
k met# reset x:*X
	self#x = x*

example tk
	var x = mk
	(scenario1 k) x 1
	(scenario2 k) x 1
	wipe #x


-- FIXME(e): triple-optional is problematic.
--struct l =
--	isa `testable
--	x	:???X
--l met# reset x:*X
--	let x1 = ?x*
--	let x2 = ?x1
--	self#x = x2
--
--example tl
--	var x = mk
--	(scenario1 l) x 1
--	(scenario2 l) x 1
--	wipe #x


struct m =
	isa `testable
	x	:(Uint, ?X)
m met# reset x:*X
	self#x = (42, ?x*)

example tm
	var x = mk
	(scenario1 m) x 1
	(scenario2 m) x 1
	wipe #x


struct n =
	isa `testable
	x	:(Buf (Uint, ?X))
n met# reset x:*X
	self#x#Clear
	foreach i over 0 .. 100
		self#x#Push# = (i, ?x*)

example tn
	var x = mk
	(scenario1 n) x 100
	(scenario2 n) x 100
	wipe #x


struct o =
	isa `testable
	x	:a
o met# reset x:*X
	self#x = {x=x}
	self#x = id {x=x}:a

example to
	var x = mk
	T x 1
	(scenario1 o) x 1
	(scenario2 o) x 1
	T x 1
	wipe #x
	T x 1


union p =
	isa `testable
	| XXX = 0 -> X
	| A -> a
	| B -> b
	| C -> c
	| D -> d
	| E -> e
	| F -> f
	| G -> g
	| H -> h
	| I -> i
	--| J -> j
	| K -> k
	--| L -> l
	| M -> m
	| N -> n

p met# reset x:*X
	self# = x*:this.XXX

example tp
	var x = mk
	T x 1
	(scenario1 p) x 1
	(scenario2 p) x 1
	T x 1
	wipe #x
	T x 1


fun Main = I32
	return 0
