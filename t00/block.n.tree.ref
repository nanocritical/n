MODULE_BODY :__internal_not_typeable__
 IMPORT :nlang
  IDENT(nlang) :nlang
  IMPORT :nlang.print
   BIN(.) :nlang.print
    IDENT(nlang) :nlang
    IDENT(print) :__internal_not_typeable__
  IMPORT :nlang.say
   BIN(.) :nlang.say
    IDENT(nlang) :nlang
    IDENT(say) :__internal_not_typeable__
 DEFFUN :t00.block.foo
  IDENT(foo) :__internal_not_typeable__
  GENARGS :nlang.builtins.void
  IDENT(i32) :nlang.builtins.i32
  BLOCK :nlang.builtins.void
   RETURN :nlang.builtins.i32
    BLOCK :nlang.builtins.i32
     NUMBER(0) :nlang.builtins.i32
 DEFFUN :t00.block.deref
  IDENT(deref) :__internal_not_typeable__
  GENARGS :nlang.builtins.void
  DEFARG :(nlang.builtins.i_ref nlang.builtins.u32)
   IDENT(p) :(nlang.builtins.i_ref nlang.builtins.u32)
   UN(@) :(nlang.builtins.i_ref nlang.builtins.u32)
    IDENT(u32) :nlang.builtins.u32
  IDENT(u32) :nlang.builtins.u32
  BLOCK :nlang.builtins.void
   RETURN :nlang.builtins.u32
    UN(.) :nlang.builtins.u32
     IDENT(p) :(nlang.builtins.i_ref nlang.builtins.u32)
 DEFFUN :t00.block.main
  IDENT(main) :__internal_not_typeable__
  GENARGS :nlang.builtins.void
  IDENT(i32) :nlang.builtins.i32
  BLOCK :nlang.builtins.void
   IF :nlang.builtins.void
    BOOL :nlang.builtins.bool
    BLOCK :nlang.builtins.void
     NOOP :nlang.builtins.void
    BLOCK :nlang.builtins.void
     NOOP :nlang.builtins.void
   BLOCK :nlang.builtins.void
    CALL :nlang.builtins.void
     IDENT(assert) :nlang.builtins.assert
     BOOL :nlang.builtins.bool
   LET :nlang.builtins.void
    DEFPATTERN :nlang.builtins.void
     IDENT(x) :nlang.builtins.u32
     BLOCK :nlang.builtins.void
      BIN( = ) :nlang.builtins.void
       IDENT(x) :nlang.builtins.u32
       NUMBER(1) :nlang.builtins.u32
     DEFNAME(x) :nlang.builtins.u32
    BLOCK :nlang.builtins.void
     BLOCK :nlang.builtins.void
      BLOCK :nlang.builtins.void
       BIN( = ) :nlang.builtins.void
        IDENT(x) :nlang.builtins.u32
        NUMBER(1) :nlang.builtins.u32
   CALL :nlang.builtins.void
    IDENT(assert) :nlang.builtins.assert
    BIN( == ) :nlang.builtins.bool
     IDENT(x) :nlang.literals.integer
     NUMBER(1) :nlang.builtins.u32
   CALL :nlang.builtins.void
    IDENT(assert) :nlang.builtins.assert
    BIN( == ) :nlang.builtins.bool
     CALL :nlang.builtins.i32
      IDENT(foo) :t00.block.foo
     NUMBER(0) :nlang.builtins.i32
   LET :nlang.builtins.void
    DEFPATTERN :nlang.builtins.void
     IDENT(x1) :nlang.builtins.u32
     BIN( + ) :nlang.builtins.u32
      BLOCK :nlang.builtins.u32
       NUMBER(0) :nlang.builtins.u32
      NUMBER(1) :nlang.builtins.u32
     DEFNAME(x1) :nlang.builtins.u32
   CALL :nlang.builtins.void
    IDENT(assert) :nlang.builtins.assert
    BIN( == ) :nlang.builtins.bool
     IDENT(x1) :nlang.literals.integer
     IDENT(x) :nlang.builtins.u32
   LET :nlang.builtins.void
    DEFPATTERN :nlang.builtins.void
     IDENT(x2) :nlang.builtins.u32
     BIN( + ) :nlang.builtins.u32
      BLOCK :nlang.builtins.u32
       NUMBER(1) :nlang.builtins.u32
      BLOCK :nlang.builtins.u32
       NUMBER(2) :nlang.builtins.u32
     DEFNAME(x2) :nlang.builtins.u32
   CALL :nlang.builtins.void
    IDENT(assert) :nlang.builtins.assert
    BIN( == ) :nlang.builtins.bool
     IDENT(x2) :nlang.literals.integer
     NUMBER(3) :nlang.builtins.u32
   LET :nlang.builtins.void
    DEFPATTERN :nlang.builtins.void
     IDENT(y1) :nlang.chars.static_string
     IF :nlang.chars.static_string
      BIN( > ) :nlang.builtins.bool
       IDENT(x) :nlang.builtins.u32
       NUMBER(0) :nlang.builtins.u32
      BLOCK :nlang.builtins.void
       BIN( = ) :nlang.builtins.void
        IDENT(y1) :nlang.chars.static_string
        STRING('test') :nlang.chars.static_string
      BLOCK :nlang.builtins.void
       BIN( = ) :nlang.builtins.void
        IDENT(y1) :nlang.chars.static_string
        STRING('error') :nlang.chars.static_string
     DEFNAME(y1) :nlang.chars.static_string
    DEFPATTERN :nlang.builtins.void
     IDENT(z1) :nlang.builtins.u32
     LET :nlang.builtins.u32
      DEFPATTERN :nlang.builtins.void
       TYPECONSTRAINT :nlang.chars.static_string
        IDENT(_Ngensym1) :nlang.chars.static_string
        DIRECTDEF :nlang.chars.static_string
       DEFNAME(_Ngensym1) :nlang.chars.static_string
      BLOCK :nlang.builtins.u32
       IF :nlang.builtins.u32
        CALL :nlang.builtins.bool
         BIN(.) :nlang.chars.static_string.operator_eq
          DIRECTDEF :nlang.chars.static_string
          IDENT(operator_eq) :__internal_not_typeable__
         UN(@) :(nlang.builtins.i_ref nlang.chars.static_string)
          IDENT(y1) :nlang.chars.static_string
         BLOCK :(nlang.builtins.i_ref nlang.chars.static_string)
          BIN( = ) :nlang.builtins.void
           IDENT(_Ngensym1) :nlang.chars.static_string
           STRING('test') :nlang.chars.static_string
          UN(@) :(nlang.builtins.i_ref nlang.chars.static_string)
           IDENT(_Ngensym1) :nlang.chars.static_string
        BLOCK :nlang.builtins.void
         BIN( = ) :nlang.builtins.void
          IDENT(z1) :nlang.builtins.u32
          NUMBER(0) :nlang.builtins.u32
        BLOCK :nlang.builtins.void
         BIN( = ) :nlang.builtins.void
          IDENT(z1) :nlang.builtins.u32
          NUMBER(1) :nlang.builtins.u32
     DEFNAME(z1) :nlang.builtins.u32
    BLOCK :nlang.builtins.void
     BLOCK :nlang.builtins.void
      IF :nlang.chars.static_string
       BIN( > ) :nlang.builtins.bool
        IDENT(x) :nlang.builtins.u32
        NUMBER(0) :nlang.builtins.u32
       BLOCK :nlang.builtins.void
        BIN( = ) :nlang.builtins.void
         IDENT(y1) :nlang.chars.static_string
         STRING('test') :nlang.chars.static_string
       BLOCK :nlang.builtins.void
        BIN( = ) :nlang.builtins.void
         IDENT(y1) :nlang.chars.static_string
         STRING('error') :nlang.chars.static_string
     BLOCK :nlang.builtins.void
      LET :nlang.builtins.u32
       DEFPATTERN :nlang.builtins.void
        TYPECONSTRAINT :nlang.chars.static_string
         IDENT(_Ngensym1) :nlang.chars.static_string
         DIRECTDEF :nlang.chars.static_string
        DEFNAME(_Ngensym1) :nlang.chars.static_string
       BLOCK :nlang.builtins.u32
        IF :nlang.builtins.u32
         CALL :nlang.builtins.bool
          BIN(.) :nlang.chars.static_string.operator_eq
           DIRECTDEF :nlang.chars.static_string
           IDENT(operator_eq) :__internal_not_typeable__
          UN(@) :(nlang.builtins.i_ref nlang.chars.static_string)
           IDENT(y1) :nlang.chars.static_string
          BLOCK :(nlang.builtins.i_ref nlang.chars.static_string)
           BIN( = ) :nlang.builtins.void
            IDENT(_Ngensym1) :nlang.chars.static_string
            STRING('test') :nlang.chars.static_string
           UN(@) :(nlang.builtins.i_ref nlang.chars.static_string)
            IDENT(_Ngensym1) :nlang.chars.static_string
         BLOCK :nlang.builtins.void
          BIN( = ) :nlang.builtins.void
           IDENT(z1) :nlang.builtins.u32
           NUMBER(0) :nlang.builtins.u32
         BLOCK :nlang.builtins.void
          BIN( = ) :nlang.builtins.void
           IDENT(z1) :nlang.builtins.u32
           NUMBER(1) :nlang.builtins.u32
   CALL :nlang.builtins.void
    IDENT(assert) :nlang.builtins.assert
    BIN( == ) :nlang.builtins.bool
     IDENT(z1) :nlang.builtins.u32
     NUMBER(0) :nlang.builtins.u32
   LET :nlang.builtins.void
    DEFPATTERN :nlang.builtins.void
     IDENT(y2) :nlang.chars.static_string
     IF :nlang.chars.static_string
      BIN( > ) :nlang.builtins.bool
       IDENT(x) :nlang.builtins.u32
       NUMBER(0) :nlang.builtins.u32
      BLOCK :nlang.builtins.void
       BIN( = ) :nlang.builtins.void
        IDENT(y2) :nlang.chars.static_string
        STRING('test') :nlang.chars.static_string
      BLOCK :nlang.builtins.void
       BIN( = ) :nlang.builtins.void
        IDENT(y2) :nlang.chars.static_string
        STRING('error') :nlang.chars.static_string
     DEFNAME(y2) :nlang.chars.static_string
    DEFPATTERN :nlang.builtins.void
     IDENT(z2) :nlang.builtins.i32
     BLOCK :nlang.builtins.void
      LET :nlang.builtins.void
       DEFPATTERN :nlang.builtins.void
        IDENT(tmp) :nlang.builtins.i32
        NUMBER(0) :nlang.builtins.i32
        DEFNAME(tmp) :nlang.builtins.i32
       BLOCK :nlang.builtins.void
        LET :nlang.builtins.void
         DEFPATTERN :nlang.builtins.void
          TYPECONSTRAINT :nlang.containers.index_range
           IDENT(_Ngensym3) :nlang.containers.index_range
           DIRECTDEF :nlang.containers.index_range
          DEFNAME(_Ngensym3) :nlang.containers.index_range
         BLOCK :nlang.builtins.void
          FOR :nlang.builtins.void
           LET :nlang.builtins.void
            DEFPATTERN :nlang.builtins.void
             IDENT(_Ngensym0) :nlang.containers.index_iterator
             CALL :nlang.containers.index_iterator
              DIRECTDEF :nlang.containers.index_range.iter
              BLOCK :(nlang.builtins.i_ref nlang.containers.index_range)
               BIN( = ) :nlang.builtins.void
                IDENT(_Ngensym3) :nlang.containers.index_range
                CALL :nlang.containers.index_range
                 IDENT(range) :nlang.containers.range
                 NUMBER(0) :nlang.builtins.size
                 NUMBER(100) :nlang.builtins.size
               UN(@) :(nlang.builtins.i_ref nlang.containers.index_range)
                IDENT(_Ngensym3) :nlang.containers.index_range
             DEFNAME(_Ngensym0) :nlang.containers.index_iterator
            BLOCK :nlang.builtins.void
             WHILE :nlang.builtins.void
              CALL :nlang.builtins.bool
               DIRECTDEF :nlang.containers.index_iterator.is_valid
               UN(@) :(nlang.builtins.i_ref nlang.containers.index_iterator)
                IDENT(_Ngensym0) :nlang.containers.index_iterator
              BLOCK :nlang.builtins.void
               LET :nlang.builtins.void
                DEFPATTERN :nlang.builtins.void
                 IDENT(i) :nlang.builtins.size
                 CALL :nlang.builtins.size
                  DIRECTDEF :nlang.containers.index_iterator.get
                  UN(@) :(nlang.builtins.i_ref nlang.containers.index_iterator)
                   IDENT(_Ngensym0) :nlang.containers.index_iterator
                 DEFNAME(i) :nlang.builtins.size
                BLOCK :nlang.builtins.void
                 LET :nlang.builtins.void
                  DEFPATTERN :nlang.builtins.void
                   TYPECONSTRAINT :nlang.builtins.u32
                    IDENT(_Ngensym2) :nlang.builtins.u32
                    DIRECTDEF :nlang.builtins.u32
                   DEFNAME(_Ngensym2) :nlang.builtins.u32
                  BLOCK :nlang.builtins.void
                   BIN( += ) :nlang.builtins.void
                    IDENT(tmp) :nlang.builtins.i32
                    CALL :nlang.builtins.i32
                     DIRECTDEF :nlang.builtins.u32.reinterpret_signed
                     BLOCK :(nlang.builtins.i_ref nlang.builtins.u32)
                      BIN( = ) :nlang.builtins.void
                       IDENT(_Ngensym2) :nlang.builtins.u32
                       CALL :nlang.builtins.u32
                        DIRECTDEF :nlang.builtins.size.trim_u32
                        UN(@) :(nlang.builtins.i_ref nlang.builtins.size)
                         IDENT(i) :nlang.builtins.size
                      UN(@) :(nlang.builtins.i_ref nlang.builtins.u32)
                       IDENT(_Ngensym2) :nlang.builtins.u32
               CALL :nlang.builtins.void
                DIRECTDEF :nlang.containers.index_iterator.next
                UN(@!) :(nlang.builtins.i_mutable_ref nlang.containers.index_iterator)
                 IDENT(_Ngensym0) :nlang.containers.index_iterator
      BIN( = ) :nlang.builtins.void
       IDENT(z2) :nlang.builtins.i32
       IDENT(tmp) :nlang.builtins.i32
     DEFNAME(z2) :nlang.builtins.i32
    BLOCK :nlang.builtins.void
     BLOCK :nlang.builtins.void
      IF :nlang.chars.static_string
       BIN( > ) :nlang.builtins.bool
        IDENT(x) :nlang.builtins.u32
        NUMBER(0) :nlang.builtins.u32
       BLOCK :nlang.builtins.void
        BIN( = ) :nlang.builtins.void
         IDENT(y2) :nlang.chars.static_string
         STRING('test') :nlang.chars.static_string
       BLOCK :nlang.builtins.void
        BIN( = ) :nlang.builtins.void
         IDENT(y2) :nlang.chars.static_string
         STRING('error') :nlang.chars.static_string
     BLOCK :nlang.builtins.void
      BLOCK :nlang.builtins.void
       LET :nlang.builtins.void
        DEFPATTERN :nlang.builtins.void
         IDENT(tmp) :nlang.builtins.i32
         NUMBER(0) :nlang.builtins.i32
         DEFNAME(tmp) :nlang.builtins.i32
        BLOCK :nlang.builtins.void
         LET :nlang.builtins.void
          DEFPATTERN :nlang.builtins.void
           TYPECONSTRAINT :nlang.containers.index_range
            IDENT(_Ngensym3) :nlang.containers.index_range
            DIRECTDEF :nlang.containers.index_range
           DEFNAME(_Ngensym3) :nlang.containers.index_range
          BLOCK :nlang.builtins.void
           FOR :nlang.builtins.void
            LET :nlang.builtins.void
             DEFPATTERN :nlang.builtins.void
              IDENT(_Ngensym0) :nlang.containers.index_iterator
              CALL :nlang.containers.index_iterator
               DIRECTDEF :nlang.containers.index_range.iter
               BLOCK :(nlang.builtins.i_ref nlang.containers.index_range)
                BIN( = ) :nlang.builtins.void
                 IDENT(_Ngensym3) :nlang.containers.index_range
                 CALL :nlang.containers.index_range
                  IDENT(range) :nlang.containers.range
                  NUMBER(0) :nlang.builtins.size
                  NUMBER(100) :nlang.builtins.size
                UN(@) :(nlang.builtins.i_ref nlang.containers.index_range)
                 IDENT(_Ngensym3) :nlang.containers.index_range
              DEFNAME(_Ngensym0) :nlang.containers.index_iterator
             BLOCK :nlang.builtins.void
              WHILE :nlang.builtins.void
               CALL :nlang.builtins.bool
                DIRECTDEF :nlang.containers.index_iterator.is_valid
                UN(@) :(nlang.builtins.i_ref nlang.containers.index_iterator)
                 IDENT(_Ngensym0) :nlang.containers.index_iterator
               BLOCK :nlang.builtins.void
                LET :nlang.builtins.void
                 DEFPATTERN :nlang.builtins.void
                  IDENT(i) :nlang.builtins.size
                  CALL :nlang.builtins.size
                   DIRECTDEF :nlang.containers.index_iterator.get
                   UN(@) :(nlang.builtins.i_ref nlang.containers.index_iterator)
                    IDENT(_Ngensym0) :nlang.containers.index_iterator
                  DEFNAME(i) :nlang.builtins.size
                 BLOCK :nlang.builtins.void
                  LET :nlang.builtins.void
                   DEFPATTERN :nlang.builtins.void
                    TYPECONSTRAINT :nlang.builtins.u32
                     IDENT(_Ngensym2) :nlang.builtins.u32
                     DIRECTDEF :nlang.builtins.u32
                    DEFNAME(_Ngensym2) :nlang.builtins.u32
                   BLOCK :nlang.builtins.void
                    BIN( += ) :nlang.builtins.void
                     IDENT(tmp) :nlang.builtins.i32
                     CALL :nlang.builtins.i32
                      DIRECTDEF :nlang.builtins.u32.reinterpret_signed
                      BLOCK :(nlang.builtins.i_ref nlang.builtins.u32)
                       BIN( = ) :nlang.builtins.void
                        IDENT(_Ngensym2) :nlang.builtins.u32
                        CALL :nlang.builtins.u32
                         DIRECTDEF :nlang.builtins.size.trim_u32
                         UN(@) :(nlang.builtins.i_ref nlang.builtins.size)
                          IDENT(i) :nlang.builtins.size
                       UN(@) :(nlang.builtins.i_ref nlang.builtins.u32)
                        IDENT(_Ngensym2) :nlang.builtins.u32
                CALL :nlang.builtins.void
                 DIRECTDEF :nlang.containers.index_iterator.next
                 UN(@!) :(nlang.builtins.i_mutable_ref nlang.containers.index_iterator)
                  IDENT(_Ngensym0) :nlang.containers.index_iterator
       BIN( = ) :nlang.builtins.void
        IDENT(z2) :nlang.builtins.i32
        IDENT(tmp) :nlang.builtins.i32
   LET :nlang.builtins.void
    DEFPATTERN :nlang.builtins.void
     TYPECONSTRAINT :nlang.chars.static_string
      IDENT(_Ngensym4) :nlang.chars.static_string
      DIRECTDEF :nlang.chars.static_string
     DEFNAME(_Ngensym4) :nlang.chars.static_string
    BLOCK :nlang.builtins.void
     CALL :nlang.builtins.void
      IDENT(assert) :nlang.builtins.assert
      CALL :nlang.builtins.bool
       BIN(.) :nlang.chars.static_string.operator_eq
        DIRECTDEF :nlang.chars.static_string
        IDENT(operator_eq) :__internal_not_typeable__
       UN(@) :(nlang.builtins.i_ref nlang.chars.static_string)
        IDENT(y2) :nlang.chars.static_string
       BLOCK :(nlang.builtins.i_ref nlang.chars.static_string)
        BIN( = ) :nlang.builtins.void
         IDENT(_Ngensym4) :nlang.chars.static_string
         STRING('test') :nlang.chars.static_string
        UN(@) :(nlang.builtins.i_ref nlang.chars.static_string)
         IDENT(_Ngensym4) :nlang.chars.static_string
   CALL :nlang.builtins.void
    IDENT(assert) :nlang.builtins.assert
    BIN( == ) :nlang.builtins.bool
     IDENT(z2) :nlang.builtins.i32
     BIN( * ) :nlang.builtins.i32
      NUMBER(50) :nlang.builtins.i32
      NUMBER(99) :nlang.builtins.i32
   LET :nlang.builtins.void
    DEFPATTERN :nlang.builtins.void
     TYPECONSTRAINT :nlang.builtins.u32
      IDENT(_Ngensym5) :nlang.builtins.u32
      DIRECTDEF :nlang.builtins.u32
     DEFNAME(_Ngensym5) :nlang.builtins.u32
    BLOCK :nlang.builtins.void
     CALL :nlang.builtins.void
      IDENT(assert) :nlang.builtins.assert
      BIN( == ) :nlang.builtins.bool
       CALL :nlang.builtins.u32
        IDENT(deref) :t00.block.deref
        BLOCK :(nlang.builtins.i_ref nlang.builtins.u32)
         BLOCK :nlang.builtins.void
          BIN( = ) :nlang.builtins.void
           IDENT(_Ngensym5) :nlang.builtins.u32
           NUMBER(1) :nlang.builtins.u32
         UN(@) :(nlang.builtins.i_ref nlang.builtins.u32)
          IDENT(_Ngensym5) :nlang.builtins.u32
       NUMBER(1) :nlang.builtins.u32
   RETURN :nlang.builtins.i32
    NUMBER(0) :nlang.builtins.i32
