MODULE_BODY :nlang.builtins.__internal_not_typeable__
 IMPORT :nlang.builtins.__internal_not_typeable__
  IDENT(nlang)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__literal_null__)
  IMPORT :<import>
   IDENT(nlang)
   IMPORT :<import>
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
   IMPORT :<import>
    BIN(.)
     IDENT(nlang)
     IDENT(containers)
   IMPORT :<import>
    BIN(.)
     IDENT(nlang)
     IDENT(memory)
   IMPORT :<import>
    BIN(.)
     IDENT(nlang)
     IDENT(chars)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__literal_integer__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__literal_floating__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__internal_not_typeable__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__call_function_slot__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__mutable__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__mercurial__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`any)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`prevent_dyn)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`copyable)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`copyable_but_owned)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`trivial_copy)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`trivial_copy_but_owned)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`return_by_copy)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`default_ctor)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`trivial_ctor)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`trivial_dtor)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`matchable)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`has_equality)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`trivial_equality)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`has_compare)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`ordered)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`trivial_order)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`ordered_by_compare)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`arithmetic)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`bitwise)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`sum_copy)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`sum_equality)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`sum_order)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(void)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`__ref_compatible)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`any_any_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`any_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`any_mutable_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`any_nullable_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`any_nullable_mutable_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(mutable_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(mercurial_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(nullable_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(nullable_mutable_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(nullable_mercurial_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`any_tuple)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_2)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_3)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_4)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_5)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_6)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_7)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_8)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_9)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_10)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_11)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_12)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_13)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_14)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_15)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_16)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`numeric)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`integer)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`signed_integer)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`unsigned_integer)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`native_integer)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`native_signed_integer)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`native_unsigned_integer)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`native_anysign_integer)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`generalized_boolean)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`bool_compatible)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`native_boolean)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`floating)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`native_floating)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(bool)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(i8)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(i16)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(i32)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(i64)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(u8)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(u16)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(u32)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(u64)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(ssize)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(size)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(float)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(double)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`auto_ctor)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`ctor_with)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`trivial_array_ctor)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`array_ctor)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(static_array)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`sum_ctor_with)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(abort)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(assert)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(unreached)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__pre__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__post__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__invariant__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__example__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(likely)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(unlikely)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(unused)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(optional)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(optional_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(min)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(max)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`error)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(error)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(drop)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(fatal)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(valist)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(vararg)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`any_environment)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`environment)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(containers)
    IDENT(`locus)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(containers)
    IDENT(`fwd_locus)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(containers)
    IDENT(`bidir_locus)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(containers)
    IDENT(`iterator)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(containers)
    IDENT(index_range)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(containers)
    IDENT(index_iterator)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(containers)
    IDENT(range)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(memory)
    IDENT(`allocator)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(memory)
    IDENT(slice)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(chars)
    IDENT(char)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(chars)
    IDENT(`static_string_compatible)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(chars)
    IDENT(`const_string)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(chars)
    IDENT(`string)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(chars)
    IDENT(`string_buffer)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(chars)
    IDENT(static_string)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(chars)
    IDENT(`show)
  IMPORT :<import>
   BIN(.)
    IDENT(nlang)
    IDENT(vpr)
  IMPORT :<import>
   BIN(.)
    IDENT(nlang)
    IDENT(pr)
  IMPORT :<import>
   BIN(.)
    IDENT(nlang)
    IDENT(vsay)
  IMPORT :<import>
   BIN(.)
    IDENT(nlang)
    IDENT(say)
  IMPORT :<import>
   BIN(.)
    IDENT(nlang)
    IDENT(just_const)
  IMPORT :<import>
   BIN(.)
    IDENT(nlang)
    IDENT(just_mutable)
 DEFFUN :t00.block.foo
  IDENT(foo) :nlang.builtins.__internal_not_typeable__
  GENARGS :nlang.builtins.__internal_not_typeable__
  FUNARGS :nlang.builtins.__internal_not_typeable__
   IDENT(i32) :nlang.builtins.i32
  WITHIN :nlang.builtins.void
  BLOCK :nlang.builtins.void
   RETURN :nlang.builtins.void
    BLOCK :nlang.builtins.i32
     NUMBER(0) :nlang.builtins.i32
 DEFFUN :t00.block.deref
  IDENT(deref) :nlang.builtins.__internal_not_typeable__
  GENARGS :nlang.builtins.__internal_not_typeable__
  FUNARGS :nlang.builtins.__internal_not_typeable__
   DEFARG :(nlang.builtins.ref nlang.builtins.u32)
    IDENT(p) :nlang.builtins.__internal_not_typeable__
    UN(@) :(nlang.builtins.ref nlang.builtins.u32)
     IDENT(u32) :nlang.builtins.u32
   IDENT(u32) :nlang.builtins.u32
  WITHIN :nlang.builtins.void
  BLOCK :nlang.builtins.void
   RETURN :nlang.builtins.void
    UN(.) :nlang.builtins.u32
     IDENT(p) :(nlang.builtins.ref nlang.builtins.u32)
 DEFFUN :t00.block.main
  IDENT(main) :nlang.builtins.__internal_not_typeable__
  GENARGS :nlang.builtins.__internal_not_typeable__
  FUNARGS :nlang.builtins.__internal_not_typeable__
   IDENT(i32) :nlang.builtins.i32
  WITHIN :nlang.builtins.void
  BLOCK :nlang.builtins.void
   IF :nlang.builtins.void
    BOOL :nlang.builtins.bool
    BLOCK :nlang.builtins.void
     NOOP :nlang.builtins.void
    BLOCK :nlang.builtins.void
     NOOP :nlang.builtins.void
   BLOCK :nlang.builtins.void
    CALL :nlang.builtins.void
     IDENT(assert) :nlang.builtins.assert
     BOOL :nlang.builtins.bool
   LET :nlang.builtins.void
    DEFPATTERN :nlang.builtins.void
     IDENT(x) :nlang.builtins.u32
     BLOCK :nlang.builtins.u32
      NUMBER(1) :nlang.builtins.u32
     DEFNAME(x) :nlang.builtins.u32
   CALL :nlang.builtins.void
    IDENT(assert) :nlang.builtins.assert
    BIN( == ) :nlang.builtins.bool
     IDENT(x) :nlang.builtins.u32
     NUMBER(1) :nlang.builtins.u32
   CALL :nlang.builtins.void
    IDENT(assert) :nlang.builtins.assert
    BIN( == ) :nlang.builtins.bool
     CALL :nlang.builtins.i32
      IDENT(foo) :t00.block.foo
     NUMBER(0) :nlang.builtins.i32
   LET :nlang.builtins.void
    DEFPATTERN :nlang.builtins.void
     IDENT(x1) :nlang.builtins.u32
     BIN( + ) :nlang.builtins.u32
      BLOCK :nlang.builtins.u32
       NUMBER(0) :nlang.builtins.u32
      NUMBER(1) :nlang.builtins.u32
     DEFNAME(x1) :nlang.builtins.u32
   CALL :nlang.builtins.void
    IDENT(assert) :nlang.builtins.assert
    BIN( == ) :nlang.builtins.bool
     IDENT(x1) :nlang.builtins.u32
     IDENT(x) :nlang.builtins.u32
   LET :nlang.builtins.void
    DEFPATTERN :nlang.builtins.void
     IDENT(x2) :nlang.builtins.u32
     BIN( + ) :nlang.builtins.u32
      BLOCK :nlang.builtins.u32
       NUMBER(1) :nlang.builtins.u32
      BLOCK :nlang.builtins.u32
       NUMBER(2) :nlang.builtins.u32
     DEFNAME(x2) :nlang.builtins.u32
   CALL :nlang.builtins.void
    IDENT(assert) :nlang.builtins.assert
    BIN( == ) :nlang.builtins.bool
     IDENT(x2) :nlang.builtins.u32
     NUMBER(3) :nlang.builtins.u32
   LET :nlang.builtins.void
    DEFPATTERN :nlang.builtins.void
     TYPECONSTRAINT :nlang.chars.static_string
      IDENT(_Ngensym1) :nlang.chars.static_string
      DIRECTDEF :nlang.chars.static_string
     DEFNAME(_Ngensym1) :nlang.chars.static_string
    DEFPATTERN :nlang.builtins.void
     IDENT(y1) :nlang.chars.static_string
     IF :nlang.chars.static_string
      BIN( > ) :nlang.builtins.bool
       IDENT(x) :nlang.builtins.u32
       NUMBER(0) :nlang.builtins.u32
      BLOCK :nlang.chars.static_string
       STRING('test') :nlang.chars.static_string
      BLOCK :nlang.chars.static_string
       STRING('error') :nlang.chars.static_string
     DEFNAME(y1) :nlang.chars.static_string
    DEFPATTERN :nlang.builtins.void
     IDENT(z1) :nlang.builtins.u32
     IF :nlang.builtins.u32
      CALL :nlang.builtins.bool
       DIRECTDEF :nlang.chars.static_string.operator_eq
       UN(@) :(nlang.builtins.ref nlang.chars.static_string)
        IDENT(y1) :nlang.chars.static_string
       BLOCK :(nlang.builtins.ref nlang.chars.static_string)
        BIN( = ) :nlang.builtins.void
         IDENT(_Ngensym1) :nlang.chars.static_string
         STRING('test') :nlang.chars.static_string
        UN(@) :(nlang.builtins.ref nlang.chars.static_string)
         IDENT(_Ngensym1) :nlang.chars.static_string
      BLOCK :nlang.builtins.u32
       NUMBER(0) :nlang.builtins.u32
      BLOCK :nlang.builtins.u32
       NUMBER(1) :nlang.builtins.u32
     DEFNAME(z1) :nlang.builtins.u32
   CALL :nlang.builtins.void
    IDENT(assert) :nlang.builtins.assert
    BIN( == ) :nlang.builtins.bool
     IDENT(z1) :nlang.builtins.u32
     NUMBER(0) :nlang.builtins.u32
   LET :nlang.builtins.void
    DEFPATTERN :nlang.builtins.void
     IDENT(y2) :nlang.chars.static_string
     IF :nlang.chars.static_string
      BIN( > ) :nlang.builtins.bool
       IDENT(x) :nlang.builtins.u32
       NUMBER(0) :nlang.builtins.u32
      BLOCK :nlang.chars.static_string
       STRING('test') :nlang.chars.static_string
      BLOCK :nlang.chars.static_string
       STRING('error') :nlang.chars.static_string
     DEFNAME(y2) :nlang.chars.static_string
    DEFPATTERN :nlang.builtins.void
     IDENT(z2) :nlang.builtins.i32
     BLOCK :nlang.builtins.i32
      LET :nlang.builtins.void
       DEFPATTERN :nlang.builtins.void
        IDENT(tmp) :nlang.builtins.i32
        NUMBER(0) :nlang.builtins.i32
        DEFNAME(tmp) :nlang.builtins.i32
       BLOCK :nlang.builtins.void
        LET :nlang.builtins.void
         DEFPATTERN :nlang.builtins.void
          TYPECONSTRAINT :nlang.containers.index_range
           IDENT(_Ngensym3) :nlang.containers.index_range
           DIRECTDEF :nlang.containers.index_range
          DEFNAME(_Ngensym3) :nlang.containers.index_range
         DEFPATTERN :nlang.builtins.void
          TYPECONSTRAINT :nlang.containers.index_iterator
           IDENT(_Ngensym4) :nlang.containers.index_iterator
           DIRECTDEF :nlang.containers.index_iterator
          DEFNAME(_Ngensym4) :nlang.containers.index_iterator
         DEFPATTERN :nlang.builtins.void
          TYPECONSTRAINT :nlang.containers.index_iterator
           IDENT(_Ngensym5) :nlang.containers.index_iterator
           DIRECTDEF :nlang.containers.index_iterator
          DEFNAME(_Ngensym5) :nlang.containers.index_iterator
         BLOCK :nlang.builtins.void
          FOR :nlang.builtins.void
           LET :nlang.builtins.void
            DEFPATTERN :nlang.builtins.void
             IDENT(_Ngensym0) :(nlang.builtins.mutable_ref nlang.containers.index_iterator)
             BLOCK :(nlang.builtins.mutable_ref nlang.containers.index_iterator)
              BLOCK :nlang.builtins.void
               BIN( = ) :nlang.builtins.void
                IDENT(_Ngensym4) :nlang.containers.index_iterator
                CALL :nlang.containers.index_iterator
                 DIRECTDEF :nlang.containers.index_range.iter
                 BLOCK :(nlang.builtins.ref nlang.containers.index_range)
                  BIN( = ) :nlang.builtins.void
                   IDENT(_Ngensym3) :nlang.containers.index_range
                   CALL :nlang.containers.index_range
                    IDENT(range) :nlang.containers.range
                    NUMBER(0) :nlang.builtins.size
                    NUMBER(100) :nlang.builtins.size
                  UN(@) :(nlang.builtins.ref nlang.containers.index_range)
                   IDENT(_Ngensym3) :nlang.containers.index_range
               BIN( = ) :nlang.builtins.void
                IDENT(_Ngensym5) :nlang.containers.index_iterator
                IDENT(_Ngensym4) :nlang.containers.index_iterator
              UN(@!) :(nlang.builtins.mutable_ref nlang.containers.index_iterator)
               IDENT(_Ngensym5) :nlang.containers.index_iterator
             DEFNAME(_Ngensym0) :(nlang.builtins.mutable_ref nlang.containers.index_iterator)
            BLOCK :nlang.builtins.void
             WHILE :nlang.builtins.void
              CALL :nlang.builtins.bool
               DIRECTDEF :nlang.containers.index_iterator.has_next
               IDENT(_Ngensym0) :(nlang.builtins.mutable_ref nlang.containers.index_iterator)
              BLOCK :nlang.builtins.void
               LET :nlang.builtins.void
                DEFPATTERN :nlang.builtins.void
                 IDENT(i) :nlang.builtins.size
                 CALL :nlang.builtins.size
                  DIRECTDEF :nlang.containers.index_iterator.next
                  IDENT(_Ngensym0) :(nlang.builtins.mutable_ref nlang.containers.index_iterator)
                 DEFNAME(i) :nlang.builtins.size
                BLOCK :nlang.builtins.void
                 LET :nlang.builtins.void
                  DEFPATTERN :nlang.builtins.void
                   TYPECONSTRAINT :nlang.builtins.u32
                    IDENT(_Ngensym2) :nlang.builtins.u32
                    DIRECTDEF :nlang.builtins.u32
                   DEFNAME(_Ngensym2) :nlang.builtins.u32
                  BLOCK :nlang.builtins.void
                   BIN( += ) :nlang.builtins.void
                    IDENT(tmp) :nlang.builtins.i32
                    CALL :nlang.builtins.i32
                     DIRECTDEF :nlang.builtins.u32.reinterpret_signed
                     BLOCK :(nlang.builtins.ref nlang.builtins.u32)
                      BIN( = ) :nlang.builtins.void
                       IDENT(_Ngensym2) :nlang.builtins.u32
                       CALL :nlang.builtins.u32
                        DIRECTDEF :nlang.builtins.size.trim_u32
                        UN(@) :(nlang.builtins.ref nlang.builtins.size)
                         IDENT(i) :nlang.builtins.size
                      UN(@) :(nlang.builtins.ref nlang.builtins.u32)
                       IDENT(_Ngensym2) :nlang.builtins.u32
      IDENT(tmp) :nlang.builtins.i32
     DEFNAME(z2) :nlang.builtins.i32
   LET :nlang.builtins.void
    DEFPATTERN :nlang.builtins.void
     TYPECONSTRAINT :nlang.chars.static_string
      IDENT(_Ngensym6) :nlang.chars.static_string
      DIRECTDEF :nlang.chars.static_string
     DEFNAME(_Ngensym6) :nlang.chars.static_string
    BLOCK :nlang.builtins.void
     CALL :nlang.builtins.void
      IDENT(assert) :nlang.builtins.assert
      CALL :nlang.builtins.bool
       DIRECTDEF :nlang.chars.static_string.operator_eq
       UN(@) :(nlang.builtins.ref nlang.chars.static_string)
        IDENT(y2) :nlang.chars.static_string
       BLOCK :(nlang.builtins.ref nlang.chars.static_string)
        BIN( = ) :nlang.builtins.void
         IDENT(_Ngensym6) :nlang.chars.static_string
         STRING('test') :nlang.chars.static_string
        UN(@) :(nlang.builtins.ref nlang.chars.static_string)
         IDENT(_Ngensym6) :nlang.chars.static_string
   CALL :nlang.builtins.void
    IDENT(assert) :nlang.builtins.assert
    BIN( == ) :nlang.builtins.bool
     IDENT(z2) :nlang.builtins.i32
     BIN( * ) :nlang.builtins.i32
      NUMBER(50) :nlang.builtins.i32
      NUMBER(99) :nlang.builtins.i32
   LET :nlang.builtins.void
    DEFPATTERN :nlang.builtins.void
     TYPECONSTRAINT :nlang.builtins.u32
      IDENT(_Ngensym7) :nlang.builtins.u32
      DIRECTDEF :nlang.builtins.u32
     DEFNAME(_Ngensym7) :nlang.builtins.u32
    BLOCK :nlang.builtins.void
     CALL :nlang.builtins.void
      IDENT(assert) :nlang.builtins.assert
      BIN( == ) :nlang.builtins.bool
       CALL :nlang.builtins.u32
        IDENT(deref) :t00.block.deref
        BLOCK :(nlang.builtins.ref nlang.builtins.u32)
         BLOCK :nlang.builtins.void
          BIN( = ) :nlang.builtins.void
           IDENT(_Ngensym7) :nlang.builtins.u32
           NUMBER(1) :nlang.builtins.u32
         UN(@) :(nlang.builtins.ref nlang.builtins.u32)
          IDENT(_Ngensym7) :nlang.builtins.u32
       NUMBER(1) :nlang.builtins.u32
   RETURN :nlang.builtins.void
    NUMBER(0) :nlang.builtins.i32
