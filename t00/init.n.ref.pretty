from nlang import *
type tt = `trivial_copy <root>.nlang.builtins.`trivial_ctor
  final = t00.init.tt
  this = t00.init.tt
  x:i32
  y:i32
  tt method <root>.nlang.builtins.`trivial_ctor.ctor = _nretval:void 

  fun <root>.nlang.builtins.`trivial_ctor.mk = r:final 

  fun <root>.nlang.builtins.`trivial_ctor.new = _nretval:@#final 

  tt method <root>.nlang.builtins.`copyable.copy_ctor other:@final = _nretval:void 


type t = `trivial_copy <root>.nlang.builtins.`trivial_ctor
  final = t00.init.t
  this = t00.init.t
  x:i32
  y:tt
  t method <root>.nlang.builtins.`trivial_ctor.ctor = _nretval:void 

  fun <root>.nlang.builtins.`trivial_ctor.mk = r:final 

  fun <root>.nlang.builtins.`trivial_ctor.new = _nretval:@#final 

  t method <root>.nlang.builtins.`copyable.copy_ctor other:@final = _nretval:void 


fun foo x:i32 y:i32 = _nretval:i32 
  return x

export fun main = _nretval:i32 
  block
    noop
    _Ngensym0 = 1
    _Ngensym1 = 1
    _Ngensym2 = 0
    _Ngensym3 = { x=_Ngensym1 y=_Ngensym2 }
    a = { x=_Ngensym0 y=_Ngensym3 }
  noop
  _Ngensym4 = 0
  _Ngensym5 = 1
  _Ngensym6 = foo _Ngensym4 _Ngensym5
  _Ngensym7 = 1
  b = foo _Ngensym6 _Ngensym7
  noop
  noop
  _Ngensyma = b + a.y.x
  _Ngensymb = 1
  _Ngensymc = _Ngensyma - _Ngensymb
  return _Ngensymc
