from nlang import *
type t = `trivial_copy <root>.nlang.builtins.`trivial_ctor
  final = t00.method.t
  this = t00.method.t
  x:i32
  t method get = _nretval:i32 
  noop
  return self.x

  t method set x:i32 = _nretval:void 
  noop
  self!x = x

  t method <root>.nlang.builtins.`trivial_ctor.ctor = _nretval:void 

  fun <root>.nlang.builtins.`trivial_ctor.mk = r:final 

  fun <root>.nlang.builtins.`trivial_ctor.new = _nretval:@#final 

  t method <root>.nlang.builtins.`copyable.copy_ctor other:@final = _nretval:void 


export fun main = _nretval:i32 
  block
    noop
    _Ngensym2 = 0
    tt = { x=_Ngensym2 }
    _Ngensym5 = { }
    block
      _Ngensym3 = 1
      _Ngensymb = @!tt
      noop
      _Ngensym5 = t00.method.t.set _Ngensymb _Ngensym3
    _Ngensym5
  _Ngensymc = @tt
  _Ngensym6 = t00.method.t.get _Ngensymc
  _Ngensym7 = 1
  _Ngensym8 = _Ngensym6 - _Ngensym7
  return _Ngensym8
