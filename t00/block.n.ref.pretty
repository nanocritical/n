from nlang import *
fun foo = i32 
  return block 
  0;;

fun deref p:@u32 = u32 
  return .p

export fun main = i32 
  if true
    noop
  else
    noop
  block
    assert true
  and x = block 
  1;;
  assert (x == 1)
  assert (foo == 0)
  and x1 = block 
  0;; + 1
  assert (x1 == x)
  and x2 = block 
  1;; + block 
  2;;
  assert (x2 == 3)
  and _Ngensym1:nlang.chars.static_string
  and y1 = if x > 0
  'test'
else
  'error'
  and z1 = if nlang.chars.static_string.operator_eq @y1 block 
  _Ngensym1 = 'test'
  @_Ngensym1;;
  0
else
  1
  assert (z1 == 0)
  and y2 = if x > 0
  'test'
else
  'error'
  and z2 = block 
  and tmp = 0  such
    and _Ngensym3:nlang.containers.index_range
    and _Ngensym4:nlang.containers.index_iterator
    and _Ngensym5:nlang.containers.index_iterator    such
      for i in block 
  block
    _Ngensym4 = nlang.containers.index_range.iter block 
  _Ngensym3 = range 0 100
  @_Ngensym3;;
    _Ngensym5 = _Ngensym4
  @!_Ngensym5;;
        and _Ngensym2:nlang.builtins.u32        such
          tmp += nlang.builtins.u32.reinterpret_signed block 
  _Ngensym2 = nlang.builtins.size.trim_u32 @i
  @_Ngensym2;;
  tmp;;
  and _Ngensym6:nlang.chars.static_string  such
    assert (nlang.chars.static_string.operator_eq @y2 block 
  _Ngensym6 = 'test'
  @_Ngensym6;;)
  assert (z2 == 50 * 99)
  and _Ngensym7:nlang.builtins.u32  such
    assert (deref block 
  block
    _Ngensym7 = 1
  @_Ngensym7;; == 1)
  return 0
