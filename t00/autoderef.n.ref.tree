MODULE_BODY :nlang.builtins.__internal_not_typeable__
 IMPORT :nlang.builtins.__internal_not_typeable__
  IDENT(nlang)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__literal_null__)
  IMPORT :<import>
   IDENT(nlang)
   IMPORT :<import>
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
   IMPORT :<import>
    BIN(.)
     IDENT(nlang)
     IDENT(containers)
   IMPORT :<import>
    BIN(.)
     IDENT(nlang)
     IDENT(memory)
   IMPORT :<import>
    BIN(.)
     IDENT(nlang)
     IDENT(chars)
   IMPORT :<import>
    BIN(.)
     IDENT(nlang)
     IDENT(vectors)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__literal_integer__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__literal_floating__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__internal_not_typeable__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__call_function_slot__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__mutable__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__mercurial__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`any)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`prevent_dyn)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`copyable)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`copyable_but_owned)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`trivial_copy)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`trivial_copy_but_owned)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`return_by_copy)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`default_ctor)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`default_dtor)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`error_dtor)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`trivial_ctor)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`trivial_dtor)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`matchable)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`has_equality)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`trivial_equality)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`has_compare)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`ordered)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`trivial_order)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`ordered_by_compare)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`arithmetic)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`bitwise)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`sum_copy)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`sum_equality)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`sum_order)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(void)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`__ref_compatible)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`any_any_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`any_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`any_mutable_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`any_nullable_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`any_nullable_mutable_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(mutable_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(mercurial_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(nullable_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(nullable_mutable_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(nullable_mercurial_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`any_tuple)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_2)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_3)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_4)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_5)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_6)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_7)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_8)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_9)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_10)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_11)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_12)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_13)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_14)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_15)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_16)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`numeric)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`integer)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`signed_integer)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`unsigned_integer)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`native_integer)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`native_signed_integer)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`native_unsigned_integer)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`native_anysign_integer)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`generalized_boolean)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`bool_compatible)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`native_boolean)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`floating)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`native_floating)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`enum)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`union)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(bool)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(i8)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(i16)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(i32)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(i64)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(u8)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(u16)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(u32)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(u64)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(ssize)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(size)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(float)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(double)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`auto_ctor)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`trivial_array_ctor)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`array_ctor)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(static_array)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(abort)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(assert)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(unreached)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__pre__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__post__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__invariant__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__example__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(likely)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(unlikely)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(unused)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(optional)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(optional_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(min)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(max)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`error)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(error)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(drop)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(fatal)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(valist)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(vararg)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`any_environment)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`environment)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(containers)
    IDENT(`locus)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(containers)
    IDENT(`fwd_locus)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(containers)
    IDENT(`bidir_locus)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(containers)
    IDENT(`iterator)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(containers)
    IDENT(index_range)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(containers)
    IDENT(index_iterator)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(containers)
    IDENT(range)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(memory)
    IDENT(`allocator)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(memory)
    IDENT(slice)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(chars)
    IDENT(char)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(chars)
    IDENT(`static_string_compatible)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(chars)
    IDENT(`const_string)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(chars)
    IDENT(`string)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(chars)
    IDENT(`string_buffer)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(chars)
    IDENT(static_string)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(chars)
    IDENT(`show)
  IMPORT :<import>
   BIN(.)
    IDENT(nlang)
    IDENT(vpr)
  IMPORT :<import>
   BIN(.)
    IDENT(nlang)
    IDENT(pr)
  IMPORT :<import>
   BIN(.)
    IDENT(nlang)
    IDENT(vsay)
  IMPORT :<import>
   BIN(.)
    IDENT(nlang)
    IDENT(say)
  IMPORT :<import>
   BIN(.)
    IDENT(nlang)
    IDENT(just_const)
  IMPORT :<import>
   BIN(.)
    IDENT(nlang)
    IDENT(just_mutable)
 IMPORT :nlang.builtins.__internal_not_typeable__
  BIN(.)
   IDENT(nlang)
   IDENT(vectors)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(vectors)
    IDENT(vector)
 DEFTYPE :t00.autoderef.A ::()
  IDENT(A) :nlang.builtins.__internal_not_typeable__
  GENARGS :nlang.builtins.__internal_not_typeable__
  ISALIST :nlang.builtins.__internal_not_typeable__
   ISA :nlang.builtins.`trivial_ctor ::()
    IDENT(`trivial_ctor) :nlang.builtins.`trivial_ctor ::()
   ISA :nlang.builtins.`trivial_ctor ::()
    BIN(.) :nlang.builtins.`trivial_ctor ::()
     BIN(.) :nlang.builtins ::()
      BIN(.) :nlang ::()
       DIRECTDEF :<root> ::()
       IDENT(nlang) :nlang.builtins.__internal_not_typeable__
      IDENT(builtins) :nlang.builtins.__internal_not_typeable__
     IDENT(`trivial_ctor) :nlang.builtins.__internal_not_typeable__
  LET :nlang.builtins.void ::()
   DEFALIAS(final) :t00.autoderef.A ::()
    IDENT(final) :nlang.builtins.__internal_not_typeable__
    DIRECTDEF :t00.autoderef.A ::()
  LET :nlang.builtins.void ::()
   DEFALIAS(this) :t00.autoderef.A ::()
    IDENT(this) :nlang.builtins.__internal_not_typeable__
    DIRECTDEF :t00.autoderef.A ::()
  DEFFIELD :nlang.builtins.i32 ::()
   IDENT(dummy) :nlang.builtins.__internal_not_typeable__
   IDENT(i32) :nlang.builtins.i32 ::()
  DEFMETHOD :(functor t00.autoderef.A.foo nlang.builtins.`any) ::()
   IDENT(foo) :nlang.builtins.__internal_not_typeable__
   GENARGS :nlang.builtins.__internal_not_typeable__
    DEFGENARG :nlang.builtins.`any ::()
     IDENT(t) :nlang.builtins.__internal_not_typeable__
     IDENT(`any) :nlang.builtins.`any ::()
   FUNARGS :nlang.builtins.__internal_not_typeable__
    DEFARG :(nlang.builtins.ref t00.autoderef.A) ::(init and nonnull)
     IDENT(self) :nlang.builtins.__internal_not_typeable__
     UN(@) :(nlang.builtins.ref t00.autoderef.A) ::(init and nonnull)
      IDENT(final) :t00.autoderef.A ::()
    DEFARG :(nlang.builtins.ref nlang.builtins.`any) ::(init and nonnull)
     IDENT(p) :nlang.builtins.__internal_not_typeable__
     UN(@) :(nlang.builtins.ref nlang.builtins.`any) ::(init and nonnull)
      IDENT(t) :nlang.builtins.`any ::()
    DEFARG :nlang.builtins.`any ::(init)
     IDENT(_nretval) :nlang.builtins.__internal_not_typeable__
     IDENT(t) :nlang.builtins.`any ::()
   WITHIN :nlang.builtins.void ::(init and nonnull)
   BLOCK :nlang.builtins.void ::()
    LET :nlang.builtins.void ::()
     DEFNAME(_Ngensym0) :nlang.builtins.`any ::(init)
      IDENT(_Ngensym0) :nlang.builtins.__internal_not_typeable__
      UN(.) :nlang.builtins.`any ::(init)
       IDENT(p) :(nlang.builtins.ref nlang.builtins.`any) ::(init and nonnull)
    RETURN :nlang.builtins.void ::()
     IDENT(_Ngensym0) :nlang.builtins.`any ::(init)
  DEFMETHOD :t00.autoderef.A.ctor ::()
   BIN(.) :nlang.builtins.__internal_not_typeable__
    BIN(.) :nlang.builtins.__internal_not_typeable__
     BIN(.) :nlang.builtins.__internal_not_typeable__
      BIN(.) :nlang.builtins.__internal_not_typeable__
       DIRECTDEF :nlang.builtins.__internal_not_typeable__
       IDENT(nlang) :nlang.builtins.__internal_not_typeable__
      IDENT(builtins) :nlang.builtins.__internal_not_typeable__
     IDENT(`trivial_ctor) :nlang.builtins.__internal_not_typeable__
    IDENT(ctor) :nlang.builtins.__internal_not_typeable__
   GENARGS :nlang.builtins.__internal_not_typeable__
   FUNARGS :nlang.builtins.__internal_not_typeable__
    DEFARG :(nlang.builtins.mercurial_ref t00.autoderef.A) ::(init and nonnull)
     IDENT(self) :nlang.builtins.__internal_not_typeable__
     UN(@#) :(nlang.builtins.mercurial_ref t00.autoderef.A) ::(init and nonnull)
      IDENT(final) :t00.autoderef.A ::()
    DEFARG :nlang.builtins.void ::(init)
     IDENT(_nretval) :nlang.builtins.__internal_not_typeable__
     IDENT(void) :nlang.builtins.void ::()
   WITHIN :nlang.builtins.void ::(init and nonnull)
  DEFFUN :t00.autoderef.A.mk ::()
   BIN(.) :nlang.builtins.__internal_not_typeable__
    BIN(.) :nlang.builtins.__internal_not_typeable__
     BIN(.) :nlang.builtins.__internal_not_typeable__
      BIN(.) :nlang.builtins.__internal_not_typeable__
       DIRECTDEF :nlang.builtins.__internal_not_typeable__
       IDENT(nlang) :nlang.builtins.__internal_not_typeable__
      IDENT(builtins) :nlang.builtins.__internal_not_typeable__
     IDENT(`trivial_ctor) :nlang.builtins.__internal_not_typeable__
    IDENT(mk) :nlang.builtins.__internal_not_typeable__
   GENARGS :nlang.builtins.__internal_not_typeable__
   FUNARGS :nlang.builtins.__internal_not_typeable__
    DEFARG :t00.autoderef.A ::(init)
     IDENT(r) :nlang.builtins.__internal_not_typeable__
     IDENT(final) :t00.autoderef.A ::()
   WITHIN :nlang.builtins.void ::(init and nonnull)
  DEFFUN :t00.autoderef.A.new ::()
   BIN(.) :nlang.builtins.__internal_not_typeable__
    BIN(.) :nlang.builtins.__internal_not_typeable__
     BIN(.) :nlang.builtins.__internal_not_typeable__
      BIN(.) :nlang.builtins.__internal_not_typeable__
       DIRECTDEF :nlang.builtins.__internal_not_typeable__
       IDENT(nlang) :nlang.builtins.__internal_not_typeable__
      IDENT(builtins) :nlang.builtins.__internal_not_typeable__
     IDENT(`trivial_ctor) :nlang.builtins.__internal_not_typeable__
    IDENT(new) :nlang.builtins.__internal_not_typeable__
   GENARGS :nlang.builtins.__internal_not_typeable__
   FUNARGS :nlang.builtins.__internal_not_typeable__
    DEFARG :(nlang.builtins.mercurial_ref t00.autoderef.A) ::(init and nonnull)
     IDENT(_nretval) :nlang.builtins.__internal_not_typeable__
     UN(@#) :(nlang.builtins.mercurial_ref t00.autoderef.A) ::(init and nonnull)
      IDENT(final) :t00.autoderef.A ::()
   WITHIN :nlang.builtins.void ::(init and nonnull)
 DEFTYPE :t00.autoderef.B ::()
  IDENT(B) :nlang.builtins.__internal_not_typeable__
  GENARGS :nlang.builtins.__internal_not_typeable__
  ISALIST :nlang.builtins.__internal_not_typeable__
   ISA :nlang.builtins.`trivial_ctor ::()
    IDENT(`trivial_ctor) :nlang.builtins.`trivial_ctor ::()
   ISA :nlang.builtins.`trivial_ctor ::()
    BIN(.) :nlang.builtins.`trivial_ctor ::()
     BIN(.) :nlang.builtins ::()
      BIN(.) :nlang ::()
       DIRECTDEF :<root> ::()
       IDENT(nlang) :nlang.builtins.__internal_not_typeable__
      IDENT(builtins) :nlang.builtins.__internal_not_typeable__
     IDENT(`trivial_ctor) :nlang.builtins.__internal_not_typeable__
  LET :nlang.builtins.void ::()
   DEFALIAS(final) :t00.autoderef.B ::()
    IDENT(final) :nlang.builtins.__internal_not_typeable__
    DIRECTDEF :t00.autoderef.B ::()
  LET :nlang.builtins.void ::()
   DEFALIAS(this) :t00.autoderef.B ::()
    IDENT(this) :nlang.builtins.__internal_not_typeable__
    DIRECTDEF :t00.autoderef.B ::()
  DEFFIELD :nlang.builtins.i32 ::()
   IDENT(dummy) :nlang.builtins.__internal_not_typeable__
   IDENT(i32) :nlang.builtins.i32 ::()
  DEFMETHOD :(functor t00.autoderef.B.foo nlang.builtins.`any (functor nlang.builtins.`any_ref nlang.builtins.`any)) ::()
   IDENT(foo) :nlang.builtins.__internal_not_typeable__
   GENARGS :nlang.builtins.__internal_not_typeable__
    DEFGENARG :nlang.builtins.`any ::()
     IDENT(t) :nlang.builtins.__internal_not_typeable__
     IDENT(`any) :nlang.builtins.`any ::()
    DEFGENARG :(functor nlang.builtins.`any_ref nlang.builtins.`any) ::(nonnull)
     IDENT(r) :nlang.builtins.__internal_not_typeable__
     IDENT(`any_ref) :(functor nlang.builtins.`any_ref nlang.builtins.`any) ::(nonnull)
   FUNARGS :nlang.builtins.__internal_not_typeable__
    DEFARG :(nlang.builtins.ref t00.autoderef.B) ::(init and nonnull)
     IDENT(self) :nlang.builtins.__internal_not_typeable__
     UN(@) :(nlang.builtins.ref t00.autoderef.B) ::(init and nonnull)
      IDENT(final) :t00.autoderef.B ::()
    DEFARG :(nlang.builtins.`any_ref nlang.builtins.`any) ::(init and nonnull)
     IDENT(p) :nlang.builtins.__internal_not_typeable__
     CALL :(nlang.builtins.`any_ref nlang.builtins.`any) ::(nonnull)
      IDENT(r) :(functor nlang.builtins.`any_ref nlang.builtins.`any) ::(nonnull)
      IDENT(t) :nlang.builtins.`any ::()
    DEFARG :nlang.builtins.`any ::(init)
     IDENT(_nretval) :nlang.builtins.__internal_not_typeable__
     IDENT(t) :nlang.builtins.`any ::()
   WITHIN :nlang.builtins.void ::(init and nonnull)
   BLOCK :nlang.builtins.void ::()
    LET :nlang.builtins.void ::()
     DEFNAME(_Ngensym1) :nlang.builtins.`any ::(init)
      IDENT(_Ngensym1) :nlang.builtins.__internal_not_typeable__
      UN(.) :nlang.builtins.`any ::(init)
       IDENT(p) :(nlang.builtins.`any_ref nlang.builtins.`any) ::(init and nonnull)
    RETURN :nlang.builtins.void ::()
     IDENT(_Ngensym1) :nlang.builtins.`any ::(init)
  DEFMETHOD :t00.autoderef.B.ctor ::()
   BIN(.) :nlang.builtins.__internal_not_typeable__
    BIN(.) :nlang.builtins.__internal_not_typeable__
     BIN(.) :nlang.builtins.__internal_not_typeable__
      BIN(.) :nlang.builtins.__internal_not_typeable__
       DIRECTDEF :nlang.builtins.__internal_not_typeable__
       IDENT(nlang) :nlang.builtins.__internal_not_typeable__
      IDENT(builtins) :nlang.builtins.__internal_not_typeable__
     IDENT(`trivial_ctor) :nlang.builtins.__internal_not_typeable__
    IDENT(ctor) :nlang.builtins.__internal_not_typeable__
   GENARGS :nlang.builtins.__internal_not_typeable__
   FUNARGS :nlang.builtins.__internal_not_typeable__
    DEFARG :(nlang.builtins.mercurial_ref t00.autoderef.B) ::(init and nonnull)
     IDENT(self) :nlang.builtins.__internal_not_typeable__
     UN(@#) :(nlang.builtins.mercurial_ref t00.autoderef.B) ::(init and nonnull)
      IDENT(final) :t00.autoderef.B ::()
    DEFARG :nlang.builtins.void ::(init)
     IDENT(_nretval) :nlang.builtins.__internal_not_typeable__
     IDENT(void) :nlang.builtins.void ::()
   WITHIN :nlang.builtins.void ::(init and nonnull)
  DEFFUN :t00.autoderef.B.mk ::()
   BIN(.) :nlang.builtins.__internal_not_typeable__
    BIN(.) :nlang.builtins.__internal_not_typeable__
     BIN(.) :nlang.builtins.__internal_not_typeable__
      BIN(.) :nlang.builtins.__internal_not_typeable__
       DIRECTDEF :nlang.builtins.__internal_not_typeable__
       IDENT(nlang) :nlang.builtins.__internal_not_typeable__
      IDENT(builtins) :nlang.builtins.__internal_not_typeable__
     IDENT(`trivial_ctor) :nlang.builtins.__internal_not_typeable__
    IDENT(mk) :nlang.builtins.__internal_not_typeable__
   GENARGS :nlang.builtins.__internal_not_typeable__
   FUNARGS :nlang.builtins.__internal_not_typeable__
    DEFARG :t00.autoderef.B ::(init)
     IDENT(r) :nlang.builtins.__internal_not_typeable__
     IDENT(final) :t00.autoderef.B ::()
   WITHIN :nlang.builtins.void ::(init and nonnull)
  DEFFUN :t00.autoderef.B.new ::()
   BIN(.) :nlang.builtins.__internal_not_typeable__
    BIN(.) :nlang.builtins.__internal_not_typeable__
     BIN(.) :nlang.builtins.__internal_not_typeable__
      BIN(.) :nlang.builtins.__internal_not_typeable__
       DIRECTDEF :nlang.builtins.__internal_not_typeable__
       IDENT(nlang) :nlang.builtins.__internal_not_typeable__
      IDENT(builtins) :nlang.builtins.__internal_not_typeable__
     IDENT(`trivial_ctor) :nlang.builtins.__internal_not_typeable__
    IDENT(new) :nlang.builtins.__internal_not_typeable__
   GENARGS :nlang.builtins.__internal_not_typeable__
   FUNARGS :nlang.builtins.__internal_not_typeable__
    DEFARG :(nlang.builtins.mercurial_ref t00.autoderef.B) ::(init and nonnull)
     IDENT(_nretval) :nlang.builtins.__internal_not_typeable__
     UN(@#) :(nlang.builtins.mercurial_ref t00.autoderef.B) ::(init and nonnull)
      IDENT(final) :t00.autoderef.B ::()
   WITHIN :nlang.builtins.void ::(init and nonnull)
 DEFFUN :t00.autoderef.main ::()
  IDENT(main) :nlang.builtins.__internal_not_typeable__
  GENARGS :nlang.builtins.__internal_not_typeable__
  FUNARGS :nlang.builtins.__internal_not_typeable__
   DEFARG :nlang.builtins.i32 ::(init)
    IDENT(_nretval) :nlang.builtins.__internal_not_typeable__
    IDENT(i32) :nlang.builtins.i32 ::()
  WITHIN :nlang.builtins.void ::(init and nonnull)
  BLOCK :nlang.builtins.void ::()
   BLOCK :nlang.builtins.void ::(init)
    LET :nlang.builtins.void ::()
     DEFNAME(_Ngensym2c) :nlang.builtins.void ::()
      IDENT(_Ngensym2c) :nlang.builtins.__internal_not_typeable__
      INIT :nlang.builtins.void ::()
    BLOCK :nlang.builtins.void ::(init)
     BLOCK :nlang.builtins.void ::()
      NOOP :nlang.builtins.void ::()
      LET :nlang.builtins.void ::()
       DEFNAME(a) :t00.autoderef.A ::(init)
        IDENT(a) :nlang.builtins.__internal_not_typeable__
        INIT :t00.autoderef.A ::(init)
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensym2) :nlang.builtins.i32 ::(init)
       IDENT(_Ngensym2) :nlang.builtins.__internal_not_typeable__
       NUMBER(1) :nlang.builtins.i32 ::(init)
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensym3) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
       IDENT(_Ngensym3) :nlang.builtins.__internal_not_typeable__
       UN(@) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
        IDENT(_Ngensym2) :nlang.builtins.i32 ::(init)
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensym4) :nlang.builtins.i32 ::(init)
       IDENT(_Ngensym4) :nlang.builtins.__internal_not_typeable__
       NUMBER(1) :nlang.builtins.i32 ::(init)
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensym5) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
       IDENT(_Ngensym5) :nlang.builtins.__internal_not_typeable__
       UN(@) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
        IDENT(_Ngensym4) :nlang.builtins.i32 ::(init)
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensym6) :(nlang.builtins.ref (nlang.builtins.ref nlang.builtins.i32)) ::(init and nonnull)
       IDENT(_Ngensym6) :nlang.builtins.__internal_not_typeable__
       UN(@) :(nlang.builtins.ref (nlang.builtins.ref nlang.builtins.i32)) ::(init and nonnull)
        IDENT(_Ngensym5) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensym58) :(nlang.builtins.ref t00.autoderef.A) ::(init and nonnull)
       IDENT(_Ngensym58) :nlang.builtins.__internal_not_typeable__
       UN(@) :(nlang.builtins.ref t00.autoderef.A) ::(init and nonnull)
        IDENT(a) :t00.autoderef.A ::(init)
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensym7) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
       IDENT(_Ngensym7) :nlang.builtins.__internal_not_typeable__
       CALL :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
        DIRECTDEF :(t00.autoderef.A.foo (nlang.builtins.ref nlang.builtins.i32)) ::()
        IDENT(_Ngensym58) :(nlang.builtins.ref t00.autoderef.A) ::(init and nonnull)
        IDENT(_Ngensym6) :(nlang.builtins.ref (nlang.builtins.ref nlang.builtins.i32)) ::(init and nonnull)
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensym8) :nlang.builtins.bool ::(init)
       IDENT(_Ngensym8) :nlang.builtins.__internal_not_typeable__
       BIN( !== ) :nlang.builtins.bool ::(init)
        IDENT(_Ngensym3) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
        IDENT(_Ngensym7) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
     CALL :nlang.builtins.void ::(init)
      IDENT(assert) :nlang.builtins.assert ::()
      IDENT(_Ngensym8) :nlang.builtins.bool ::(init)
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensym9) :nlang.builtins.i32 ::(init)
       IDENT(_Ngensym9) :nlang.builtins.__internal_not_typeable__
       NUMBER(1) :nlang.builtins.i32 ::(init)
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensyma) :nlang.builtins.i32 ::(init)
       IDENT(_Ngensyma) :nlang.builtins.__internal_not_typeable__
       NUMBER(1) :nlang.builtins.i32 ::(init)
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensymb) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
       IDENT(_Ngensymb) :nlang.builtins.__internal_not_typeable__
       UN(@) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
        IDENT(_Ngensyma) :nlang.builtins.i32 ::(init)
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensym5a) :(nlang.builtins.ref t00.autoderef.A) ::(init and nonnull)
       IDENT(_Ngensym5a) :nlang.builtins.__internal_not_typeable__
       UN(@) :(nlang.builtins.ref t00.autoderef.A) ::(init and nonnull)
        IDENT(a) :t00.autoderef.A ::(init)
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensymc) :nlang.builtins.i32 ::(init)
       IDENT(_Ngensymc) :nlang.builtins.__internal_not_typeable__
       CALL :nlang.builtins.i32 ::(init)
        DIRECTDEF :(t00.autoderef.A.foo nlang.builtins.i32) ::()
        IDENT(_Ngensym5a) :(nlang.builtins.ref t00.autoderef.A) ::(init and nonnull)
        IDENT(_Ngensymb) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensymd) :nlang.builtins.bool ::(init)
       IDENT(_Ngensymd) :nlang.builtins.__internal_not_typeable__
       BIN( == ) :nlang.builtins.bool ::(init)
        IDENT(_Ngensym9) :nlang.builtins.i32 ::(init)
        IDENT(_Ngensymc) :nlang.builtins.i32 ::(init)
     CALL :nlang.builtins.void ::(init)
      IDENT(assert) :nlang.builtins.assert ::()
      IDENT(_Ngensymd) :nlang.builtins.bool ::(init)
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensyme) :nlang.builtins.i32 ::(init)
       IDENT(_Ngensyme) :nlang.builtins.__internal_not_typeable__
       NUMBER(1) :nlang.builtins.i32 ::(init)
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensymf) :nlang.builtins.i32 ::(init)
       IDENT(_Ngensymf) :nlang.builtins.__internal_not_typeable__
       NUMBER(1) :nlang.builtins.i32 ::(init)
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensym5c) :(nlang.builtins.ref t00.autoderef.A) ::(init and nonnull)
       IDENT(_Ngensym5c) :nlang.builtins.__internal_not_typeable__
       UN(@) :(nlang.builtins.ref t00.autoderef.A) ::(init and nonnull)
        IDENT(a) :t00.autoderef.A ::(init)
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensym5d) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
       IDENT(_Ngensym5d) :nlang.builtins.__internal_not_typeable__
       UN(@) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
        IDENT(_Ngensymf) :nlang.builtins.i32 ::(init)
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensym10) :nlang.builtins.i32 ::(init)
       IDENT(_Ngensym10) :nlang.builtins.__internal_not_typeable__
       CALL :nlang.builtins.i32 ::(init)
        DIRECTDEF :(t00.autoderef.A.foo nlang.builtins.i32) ::()
        IDENT(_Ngensym5c) :(nlang.builtins.ref t00.autoderef.A) ::(init and nonnull)
        IDENT(_Ngensym5d) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensym11) :nlang.builtins.bool ::(init)
       IDENT(_Ngensym11) :nlang.builtins.__internal_not_typeable__
       BIN( == ) :nlang.builtins.bool ::(init)
        IDENT(_Ngensyme) :nlang.builtins.i32 ::(init)
        IDENT(_Ngensym10) :nlang.builtins.i32 ::(init)
     CALL :nlang.builtins.void ::(init)
      IDENT(assert) :nlang.builtins.assert ::()
      IDENT(_Ngensym11) :nlang.builtins.bool ::(init)
     NOOP :nlang.builtins.void ::()
     LET :nlang.builtins.void ::()
      DEFNAME(b) :t00.autoderef.B ::(init)
       IDENT(b) :nlang.builtins.__internal_not_typeable__
       INIT :t00.autoderef.B ::(init)
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensym12) :nlang.builtins.i32 ::(init)
       IDENT(_Ngensym12) :nlang.builtins.__internal_not_typeable__
       NUMBER(1) :nlang.builtins.i32 ::(init)
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensym13) :nlang.builtins.i32 ::(init)
       IDENT(_Ngensym13) :nlang.builtins.__internal_not_typeable__
       NUMBER(1) :nlang.builtins.i32 ::(init)
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensym14) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
       IDENT(_Ngensym14) :nlang.builtins.__internal_not_typeable__
       UN(@) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
        IDENT(_Ngensym13) :nlang.builtins.i32 ::(init)
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensym60) :(nlang.builtins.ref t00.autoderef.B) ::(init and nonnull)
       IDENT(_Ngensym60) :nlang.builtins.__internal_not_typeable__
       UN(@) :(nlang.builtins.ref t00.autoderef.B) ::(init and nonnull)
        IDENT(b) :t00.autoderef.B ::(init)
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensym15) :nlang.builtins.i32 ::(init)
       IDENT(_Ngensym15) :nlang.builtins.__internal_not_typeable__
       CALL :nlang.builtins.i32 ::(init)
        DIRECTDEF :(t00.autoderef.B.foo nlang.builtins.i32 (functor nlang.builtins.ref nlang.builtins.`any)) ::()
        IDENT(_Ngensym60) :(nlang.builtins.ref t00.autoderef.B) ::(init and nonnull)
        IDENT(_Ngensym14) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensym16) :nlang.builtins.bool ::(init)
       IDENT(_Ngensym16) :nlang.builtins.__internal_not_typeable__
       BIN( == ) :nlang.builtins.bool ::(init)
        IDENT(_Ngensym12) :nlang.builtins.i32 ::(init)
        IDENT(_Ngensym15) :nlang.builtins.i32 ::(init)
     CALL :nlang.builtins.void ::(init)
      IDENT(assert) :nlang.builtins.assert ::()
      IDENT(_Ngensym16) :nlang.builtins.bool ::(init)
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensym17) :nlang.builtins.i32 ::(init)
       IDENT(_Ngensym17) :nlang.builtins.__internal_not_typeable__
       NUMBER(1) :nlang.builtins.i32 ::(init)
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensym18) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
       IDENT(_Ngensym18) :nlang.builtins.__internal_not_typeable__
       UN(@) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
        IDENT(_Ngensym17) :nlang.builtins.i32 ::(init)
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensym19) :nlang.builtins.i32 ::(init)
       IDENT(_Ngensym19) :nlang.builtins.__internal_not_typeable__
       NUMBER(1) :nlang.builtins.i32 ::(init)
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensym1a) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
       IDENT(_Ngensym1a) :nlang.builtins.__internal_not_typeable__
       UN(@) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
        IDENT(_Ngensym19) :nlang.builtins.i32 ::(init)
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensym1b) :(nlang.builtins.ref (nlang.builtins.ref nlang.builtins.i32)) ::(init and nonnull)
       IDENT(_Ngensym1b) :nlang.builtins.__internal_not_typeable__
       UN(@) :(nlang.builtins.ref (nlang.builtins.ref nlang.builtins.i32)) ::(init and nonnull)
        IDENT(_Ngensym1a) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensym62) :(nlang.builtins.ref t00.autoderef.B) ::(init and nonnull)
       IDENT(_Ngensym62) :nlang.builtins.__internal_not_typeable__
       UN(@) :(nlang.builtins.ref t00.autoderef.B) ::(init and nonnull)
        IDENT(b) :t00.autoderef.B ::(init)
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensym1c) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
       IDENT(_Ngensym1c) :nlang.builtins.__internal_not_typeable__
       CALL :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
        DIRECTDEF :(t00.autoderef.B.foo (nlang.builtins.ref nlang.builtins.i32) (functor nlang.builtins.ref nlang.builtins.`any)) ::()
        IDENT(_Ngensym62) :(nlang.builtins.ref t00.autoderef.B) ::(init and nonnull)
        IDENT(_Ngensym1b) :(nlang.builtins.ref (nlang.builtins.ref nlang.builtins.i32)) ::(init and nonnull)
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensym1d) :nlang.builtins.bool ::(init)
       IDENT(_Ngensym1d) :nlang.builtins.__internal_not_typeable__
       BIN( !== ) :nlang.builtins.bool ::(init)
        IDENT(_Ngensym18) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
        IDENT(_Ngensym1c) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
     CALL :nlang.builtins.void ::(init)
      IDENT(assert) :nlang.builtins.assert ::()
      IDENT(_Ngensym1d) :nlang.builtins.bool ::(init)
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensym1e) :nlang.builtins.i32 ::(init)
       IDENT(_Ngensym1e) :nlang.builtins.__internal_not_typeable__
       NUMBER(1) :nlang.builtins.i32 ::(init)
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensym1f) :nlang.builtins.i32 ::(init)
       IDENT(_Ngensym1f) :nlang.builtins.__internal_not_typeable__
       NUMBER(1) :nlang.builtins.i32 ::(init)
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensym20) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
       IDENT(_Ngensym20) :nlang.builtins.__internal_not_typeable__
       UN(@) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
        IDENT(_Ngensym1f) :nlang.builtins.i32 ::(init)
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensym65) :(nlang.builtins.ref t00.autoderef.B) ::(init and nonnull)
       IDENT(_Ngensym65) :nlang.builtins.__internal_not_typeable__
       UN(@) :(nlang.builtins.ref t00.autoderef.B) ::(init and nonnull)
        IDENT(b) :t00.autoderef.B ::(init)
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensym21) :nlang.builtins.i32 ::(init)
       IDENT(_Ngensym21) :nlang.builtins.__internal_not_typeable__
       CALL :nlang.builtins.i32 ::(init)
        CALL :(t00.autoderef.B.foo nlang.builtins.i32 (functor nlang.builtins.ref nlang.builtins.`any)) ::()
         BIN(.) :(functor t00.autoderef.B.foo nlang.builtins.`any (functor nlang.builtins.`any_ref nlang.builtins.`any)) ::()
          IDENT(B) :t00.autoderef.B ::()
          IDENT(foo) :nlang.builtins.__internal_not_typeable__
         IDENT(i32) :nlang.builtins.i32 ::()
         IDENT(ref) :(functor nlang.builtins.ref nlang.builtins.`any) ::(nonnull)
        IDENT(_Ngensym65) :(nlang.builtins.ref t00.autoderef.B) ::(init and nonnull)
        IDENT(_Ngensym20) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensym22) :nlang.builtins.bool ::(init)
       IDENT(_Ngensym22) :nlang.builtins.__internal_not_typeable__
       BIN( != ) :nlang.builtins.bool ::(init)
        IDENT(_Ngensym1e) :nlang.builtins.i32 ::(init)
        IDENT(_Ngensym21) :nlang.builtins.i32 ::(init)
     CALL :nlang.builtins.void ::(init)
      IDENT(assert) :nlang.builtins.assert ::()
      IDENT(_Ngensym22) :nlang.builtins.bool ::(init)
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensym23) :nlang.builtins.i32 ::(init)
       IDENT(_Ngensym23) :nlang.builtins.__internal_not_typeable__
       NUMBER(1) :nlang.builtins.i32 ::(init)
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensym24) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
       IDENT(_Ngensym24) :nlang.builtins.__internal_not_typeable__
       UN(@) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
        IDENT(_Ngensym23) :nlang.builtins.i32 ::(init)
     NOOP :nlang.builtins.void ::()
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensym26) :nlang.builtins.i32 ::(init)
       IDENT(_Ngensym26) :nlang.builtins.__internal_not_typeable__
       NUMBER(1) :nlang.builtins.i32 ::(init)
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensym27) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
       IDENT(_Ngensym27) :nlang.builtins.__internal_not_typeable__
       UN(@) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
        IDENT(_Ngensym26) :nlang.builtins.i32 ::(init)
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensym28) :(nlang.builtins.ref (nlang.builtins.ref nlang.builtins.i32)) ::(init and nonnull)
       IDENT(_Ngensym28) :nlang.builtins.__internal_not_typeable__
       UN(@) :(nlang.builtins.ref (nlang.builtins.ref nlang.builtins.i32)) ::(init and nonnull)
        IDENT(_Ngensym27) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensym67) :(nlang.builtins.ref t00.autoderef.B) ::(init and nonnull)
       IDENT(_Ngensym67) :nlang.builtins.__internal_not_typeable__
       UN(@) :(nlang.builtins.ref t00.autoderef.B) ::(init and nonnull)
        IDENT(b) :t00.autoderef.B ::(init)
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensym29) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
       IDENT(_Ngensym29) :nlang.builtins.__internal_not_typeable__
       CALL :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
        CALL :(t00.autoderef.B.foo (nlang.builtins.ref nlang.builtins.i32) (functor nlang.builtins.ref nlang.builtins.`any)) ::()
         BIN(.) :(functor t00.autoderef.B.foo nlang.builtins.`any (functor nlang.builtins.`any_ref nlang.builtins.`any)) ::()
          IDENT(B) :t00.autoderef.B ::()
          IDENT(foo) :nlang.builtins.__internal_not_typeable__
         UN(@) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
          IDENT(i32) :nlang.builtins.i32 ::()
         IDENT(ref) :(functor nlang.builtins.ref nlang.builtins.`any) ::(nonnull)
        IDENT(_Ngensym67) :(nlang.builtins.ref t00.autoderef.B) ::(init and nonnull)
        IDENT(_Ngensym28) :(nlang.builtins.ref (nlang.builtins.ref nlang.builtins.i32)) ::(init and nonnull)
     LET :nlang.builtins.void ::()
      DEFNAME(_Ngensym2a) :nlang.builtins.bool ::(init)
       IDENT(_Ngensym2a) :nlang.builtins.__internal_not_typeable__
       BIN( !== ) :nlang.builtins.bool ::(init)
        IDENT(_Ngensym24) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
        IDENT(_Ngensym29) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
     NOOP :nlang.builtins.void ::()
     BIN( = ) :nlang.builtins.void ::(init)
      IDENT(_Ngensym2c) :nlang.builtins.void ::(init)
      CALL :nlang.builtins.void ::(init)
       IDENT(assert) :nlang.builtins.assert ::()
       IDENT(_Ngensym2a) :nlang.builtins.bool ::(init)
    IDENT(_Ngensym2c) :nlang.builtins.void ::(init)
   NOOP :nlang.builtins.void ::()
   LET :nlang.builtins.void ::()
    DEFNAME(a) :nlang.chars.static_string ::(init)
     IDENT(a) :nlang.builtins.__internal_not_typeable__
     STRING('test') :nlang.chars.static_string ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(b) :nlang.chars.static_string ::(init)
     IDENT(b) :nlang.builtins.__internal_not_typeable__
     STRING('test') :nlang.chars.static_string ::(init)
   NOOP :nlang.builtins.void ::()
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym78) :(nlang.builtins.ref nlang.chars.static_string) ::(init and nonnull)
     IDENT(_Ngensym78) :nlang.builtins.__internal_not_typeable__
     UN(@) :(nlang.builtins.ref nlang.chars.static_string) ::(init and nonnull)
      IDENT(a) :nlang.chars.static_string ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym79) :(nlang.builtins.ref nlang.chars.static_string) ::(init and nonnull)
     IDENT(_Ngensym79) :nlang.builtins.__internal_not_typeable__
     UN(@) :(nlang.builtins.ref nlang.chars.static_string) ::(init and nonnull)
      IDENT(b) :nlang.chars.static_string ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(x) :nlang.builtins.bool ::(init)
     IDENT(x) :nlang.builtins.__internal_not_typeable__
     CALL :nlang.builtins.bool ::(init)
      DIRECTDEF :nlang.chars.static_string.operator_eq ::()
      IDENT(_Ngensym78) :(nlang.builtins.ref nlang.chars.static_string) ::(init and nonnull)
      IDENT(_Ngensym79) :(nlang.builtins.ref nlang.chars.static_string) ::(init and nonnull)
   CALL :nlang.builtins.void ::(init)
    IDENT(assert) :nlang.builtins.assert ::()
    IDENT(x) :nlang.builtins.bool ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym2d) :(nlang.builtins.ref nlang.chars.static_string) ::(init and nonnull)
     IDENT(_Ngensym2d) :nlang.builtins.__internal_not_typeable__
     UN(@) :(nlang.builtins.ref nlang.chars.static_string) ::(init and nonnull)
      IDENT(a) :nlang.chars.static_string ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym68) :nlang.chars.static_string ::(init)
     IDENT(_Ngensym68) :nlang.builtins.__internal_not_typeable__
     UN(.) :nlang.chars.static_string ::(init)
      IDENT(_Ngensym2d) :(nlang.builtins.ref nlang.chars.static_string) ::(init and nonnull)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym7a) :(nlang.builtins.ref nlang.chars.static_string) ::(init and nonnull)
     IDENT(_Ngensym7a) :nlang.builtins.__internal_not_typeable__
     UN(@) :(nlang.builtins.ref nlang.chars.static_string) ::(init and nonnull)
      IDENT(_Ngensym68) :nlang.chars.static_string ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym7b) :(nlang.builtins.ref nlang.chars.static_string) ::(init and nonnull)
     IDENT(_Ngensym7b) :nlang.builtins.__internal_not_typeable__
     UN(@) :(nlang.builtins.ref nlang.chars.static_string) ::(init and nonnull)
      IDENT(b) :nlang.chars.static_string ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym2e) :nlang.builtins.bool ::(init)
     IDENT(_Ngensym2e) :nlang.builtins.__internal_not_typeable__
     CALL :nlang.builtins.bool ::(init)
      DIRECTDEF :nlang.chars.static_string.operator_eq ::()
      IDENT(_Ngensym7a) :(nlang.builtins.ref nlang.chars.static_string) ::(init and nonnull)
      IDENT(_Ngensym7b) :(nlang.builtins.ref nlang.chars.static_string) ::(init and nonnull)
   CALL :nlang.builtins.void ::(init)
    IDENT(assert) :nlang.builtins.assert ::()
    IDENT(_Ngensym2e) :nlang.builtins.bool ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym2f) :(nlang.builtins.ref nlang.chars.static_string) ::(init and nonnull)
     IDENT(_Ngensym2f) :nlang.builtins.__internal_not_typeable__
     UN(@) :(nlang.builtins.ref nlang.chars.static_string) ::(init and nonnull)
      IDENT(b) :nlang.chars.static_string ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym69) :nlang.chars.static_string ::(init)
     IDENT(_Ngensym69) :nlang.builtins.__internal_not_typeable__
     UN(.) :nlang.chars.static_string ::(init)
      IDENT(_Ngensym2f) :(nlang.builtins.ref nlang.chars.static_string) ::(init and nonnull)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym7c) :(nlang.builtins.ref nlang.chars.static_string) ::(init and nonnull)
     IDENT(_Ngensym7c) :nlang.builtins.__internal_not_typeable__
     UN(@) :(nlang.builtins.ref nlang.chars.static_string) ::(init and nonnull)
      IDENT(a) :nlang.chars.static_string ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym7d) :(nlang.builtins.ref nlang.chars.static_string) ::(init and nonnull)
     IDENT(_Ngensym7d) :nlang.builtins.__internal_not_typeable__
     UN(@) :(nlang.builtins.ref nlang.chars.static_string) ::(init and nonnull)
      IDENT(_Ngensym69) :nlang.chars.static_string ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym30) :nlang.builtins.bool ::(init)
     IDENT(_Ngensym30) :nlang.builtins.__internal_not_typeable__
     CALL :nlang.builtins.bool ::(init)
      DIRECTDEF :nlang.chars.static_string.operator_eq ::()
      IDENT(_Ngensym7c) :(nlang.builtins.ref nlang.chars.static_string) ::(init and nonnull)
      IDENT(_Ngensym7d) :(nlang.builtins.ref nlang.chars.static_string) ::(init and nonnull)
   CALL :nlang.builtins.void ::(init)
    IDENT(assert) :nlang.builtins.assert ::()
    IDENT(_Ngensym30) :nlang.builtins.bool ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym31) :(nlang.builtins.ref nlang.chars.static_string) ::(init and nonnull)
     IDENT(_Ngensym31) :nlang.builtins.__internal_not_typeable__
     UN(@) :(nlang.builtins.ref nlang.chars.static_string) ::(init and nonnull)
      IDENT(a) :nlang.chars.static_string ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym32) :(nlang.builtins.ref nlang.chars.static_string) ::(init and nonnull)
     IDENT(_Ngensym32) :nlang.builtins.__internal_not_typeable__
     UN(@) :(nlang.builtins.ref nlang.chars.static_string) ::(init and nonnull)
      IDENT(b) :nlang.chars.static_string ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym6a) :nlang.chars.static_string ::(init)
     IDENT(_Ngensym6a) :nlang.builtins.__internal_not_typeable__
     UN(.) :nlang.chars.static_string ::(init)
      IDENT(_Ngensym31) :(nlang.builtins.ref nlang.chars.static_string) ::(init and nonnull)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym6b) :nlang.chars.static_string ::(init)
     IDENT(_Ngensym6b) :nlang.builtins.__internal_not_typeable__
     UN(.) :nlang.chars.static_string ::(init)
      IDENT(_Ngensym32) :(nlang.builtins.ref nlang.chars.static_string) ::(init and nonnull)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym7e) :(nlang.builtins.ref nlang.chars.static_string) ::(init and nonnull)
     IDENT(_Ngensym7e) :nlang.builtins.__internal_not_typeable__
     UN(@) :(nlang.builtins.ref nlang.chars.static_string) ::(init and nonnull)
      IDENT(_Ngensym6a) :nlang.chars.static_string ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym7f) :(nlang.builtins.ref nlang.chars.static_string) ::(init and nonnull)
     IDENT(_Ngensym7f) :nlang.builtins.__internal_not_typeable__
     UN(@) :(nlang.builtins.ref nlang.chars.static_string) ::(init and nonnull)
      IDENT(_Ngensym6b) :nlang.chars.static_string ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym33) :nlang.builtins.bool ::(init)
     IDENT(_Ngensym33) :nlang.builtins.__internal_not_typeable__
     CALL :nlang.builtins.bool ::(init)
      DIRECTDEF :nlang.chars.static_string.operator_eq ::()
      IDENT(_Ngensym7e) :(nlang.builtins.ref nlang.chars.static_string) ::(init and nonnull)
      IDENT(_Ngensym7f) :(nlang.builtins.ref nlang.chars.static_string) ::(init and nonnull)
   CALL :nlang.builtins.void ::(init)
    IDENT(assert) :nlang.builtins.assert ::()
    IDENT(_Ngensym33) :nlang.builtins.bool ::(init)
   NOOP :nlang.builtins.void ::()
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym34) :nlang.builtins.i32 ::(init)
     IDENT(_Ngensym34) :nlang.builtins.__internal_not_typeable__
     NUMBER(1) :nlang.builtins.i32 ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(n) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
     IDENT(n) :nlang.builtins.__internal_not_typeable__
     UN(@) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
      IDENT(_Ngensym34) :nlang.builtins.i32 ::(init)
   NOOP :nlang.builtins.void ::()
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym35) :nlang.builtins.i32 ::(init)
     IDENT(_Ngensym35) :nlang.builtins.__internal_not_typeable__
     NUMBER(2) :nlang.builtins.i32 ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(m) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
     IDENT(m) :nlang.builtins.__internal_not_typeable__
     UN(@) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
      IDENT(_Ngensym35) :nlang.builtins.i32 ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym6c) :nlang.builtins.i32 ::(init)
     IDENT(_Ngensym6c) :nlang.builtins.__internal_not_typeable__
     UN(.) :nlang.builtins.i32 ::(init)
      IDENT(n) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym6d) :nlang.builtins.i32 ::(init)
     IDENT(_Ngensym6d) :nlang.builtins.__internal_not_typeable__
     UN(.) :nlang.builtins.i32 ::(init)
      IDENT(m) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym36) :nlang.builtins.i32 ::(init)
     IDENT(_Ngensym36) :nlang.builtins.__internal_not_typeable__
     BIN( + ) :nlang.builtins.i32 ::(init)
      IDENT(_Ngensym6c) :nlang.builtins.i32 ::(init)
      IDENT(_Ngensym6d) :nlang.builtins.i32 ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym37) :nlang.builtins.i32 ::(init)
     IDENT(_Ngensym37) :nlang.builtins.__internal_not_typeable__
     NUMBER(3) :nlang.builtins.i32 ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym38) :nlang.builtins.bool ::(init)
     IDENT(_Ngensym38) :nlang.builtins.__internal_not_typeable__
     BIN( == ) :nlang.builtins.bool ::(init)
      IDENT(_Ngensym36) :nlang.builtins.i32 ::(init)
      IDENT(_Ngensym37) :nlang.builtins.i32 ::(init)
   CALL :nlang.builtins.void ::(init)
    IDENT(assert) :nlang.builtins.assert ::()
    IDENT(_Ngensym38) :nlang.builtins.bool ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym39) :nlang.builtins.i32 ::(init)
     IDENT(_Ngensym39) :nlang.builtins.__internal_not_typeable__
     NUMBER(1) :nlang.builtins.i32 ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym3a) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
     IDENT(_Ngensym3a) :nlang.builtins.__internal_not_typeable__
     UN(@) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
      IDENT(_Ngensym39) :nlang.builtins.i32 ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym3b) :nlang.builtins.i32 ::(init)
     IDENT(_Ngensym3b) :nlang.builtins.__internal_not_typeable__
     NUMBER(2) :nlang.builtins.i32 ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym3c) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
     IDENT(_Ngensym3c) :nlang.builtins.__internal_not_typeable__
     UN(@) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
      IDENT(_Ngensym3b) :nlang.builtins.i32 ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym6e) :nlang.builtins.i32 ::(init)
     IDENT(_Ngensym6e) :nlang.builtins.__internal_not_typeable__
     UN(.) :nlang.builtins.i32 ::(init)
      IDENT(_Ngensym3a) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym6f) :nlang.builtins.i32 ::(init)
     IDENT(_Ngensym6f) :nlang.builtins.__internal_not_typeable__
     UN(.) :nlang.builtins.i32 ::(init)
      IDENT(_Ngensym3c) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym3d) :nlang.builtins.i32 ::(init)
     IDENT(_Ngensym3d) :nlang.builtins.__internal_not_typeable__
     BIN( + ) :nlang.builtins.i32 ::(init)
      IDENT(_Ngensym6e) :nlang.builtins.i32 ::(init)
      IDENT(_Ngensym6f) :nlang.builtins.i32 ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym3e) :nlang.builtins.i32 ::(init)
     IDENT(_Ngensym3e) :nlang.builtins.__internal_not_typeable__
     NUMBER(3) :nlang.builtins.i32 ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym3f) :nlang.builtins.bool ::(init)
     IDENT(_Ngensym3f) :nlang.builtins.__internal_not_typeable__
     BIN( == ) :nlang.builtins.bool ::(init)
      IDENT(_Ngensym3d) :nlang.builtins.i32 ::(init)
      IDENT(_Ngensym3e) :nlang.builtins.i32 ::(init)
   CALL :nlang.builtins.void ::(init)
    IDENT(assert) :nlang.builtins.assert ::()
    IDENT(_Ngensym3f) :nlang.builtins.bool ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym40) :nlang.builtins.i32 ::(init)
     IDENT(_Ngensym40) :nlang.builtins.__internal_not_typeable__
     NUMBER(1) :nlang.builtins.i32 ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym41) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
     IDENT(_Ngensym41) :nlang.builtins.__internal_not_typeable__
     UN(@) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
      IDENT(_Ngensym40) :nlang.builtins.i32 ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym42) :nlang.builtins.i32 ::(init)
     IDENT(_Ngensym42) :nlang.builtins.__internal_not_typeable__
     NUMBER(2) :nlang.builtins.i32 ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym43) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
     IDENT(_Ngensym43) :nlang.builtins.__internal_not_typeable__
     UN(@) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
      IDENT(_Ngensym42) :nlang.builtins.i32 ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym70) :nlang.builtins.i32 ::(init)
     IDENT(_Ngensym70) :nlang.builtins.__internal_not_typeable__
     UN(.) :nlang.builtins.i32 ::(init)
      IDENT(_Ngensym41) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym71) :nlang.builtins.i32 ::(init)
     IDENT(_Ngensym71) :nlang.builtins.__internal_not_typeable__
     UN(.) :nlang.builtins.i32 ::(init)
      IDENT(_Ngensym43) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym44) :nlang.builtins.i32 ::(init)
     IDENT(_Ngensym44) :nlang.builtins.__internal_not_typeable__
     BIN( + ) :nlang.builtins.i32 ::(init)
      IDENT(_Ngensym70) :nlang.builtins.i32 ::(init)
      IDENT(_Ngensym71) :nlang.builtins.i32 ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym45) :nlang.builtins.i32 ::(init)
     IDENT(_Ngensym45) :nlang.builtins.__internal_not_typeable__
     NUMBER(3) :nlang.builtins.i32 ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym46) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
     IDENT(_Ngensym46) :nlang.builtins.__internal_not_typeable__
     UN(@) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
      IDENT(_Ngensym45) :nlang.builtins.i32 ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym72) :nlang.builtins.i32 ::(init)
     IDENT(_Ngensym72) :nlang.builtins.__internal_not_typeable__
     UN(.) :nlang.builtins.i32 ::(init)
      IDENT(_Ngensym46) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym47) :nlang.builtins.bool ::(init)
     IDENT(_Ngensym47) :nlang.builtins.__internal_not_typeable__
     BIN( == ) :nlang.builtins.bool ::(init)
      IDENT(_Ngensym44) :nlang.builtins.i32 ::(init)
      IDENT(_Ngensym72) :nlang.builtins.i32 ::(init)
   CALL :nlang.builtins.void ::(init)
    IDENT(assert) :nlang.builtins.assert ::()
    IDENT(_Ngensym47) :nlang.builtins.bool ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym48) :nlang.builtins.i32 ::(init)
     IDENT(_Ngensym48) :nlang.builtins.__internal_not_typeable__
     NUMBER(1) :nlang.builtins.i32 ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym49) :nlang.builtins.i32 ::(init)
     IDENT(_Ngensym49) :nlang.builtins.__internal_not_typeable__
     NUMBER(2) :nlang.builtins.i32 ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym4a) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
     IDENT(_Ngensym4a) :nlang.builtins.__internal_not_typeable__
     UN(@) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
      IDENT(_Ngensym49) :nlang.builtins.i32 ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym73) :nlang.builtins.i32 ::(init)
     IDENT(_Ngensym73) :nlang.builtins.__internal_not_typeable__
     UN(.) :nlang.builtins.i32 ::(init)
      IDENT(_Ngensym4a) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym4b) :nlang.builtins.i32 ::(init)
     IDENT(_Ngensym4b) :nlang.builtins.__internal_not_typeable__
     BIN( + ) :nlang.builtins.i32 ::(init)
      IDENT(_Ngensym48) :nlang.builtins.i32 ::(init)
      IDENT(_Ngensym73) :nlang.builtins.i32 ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym4c) :nlang.builtins.i32 ::(init)
     IDENT(_Ngensym4c) :nlang.builtins.__internal_not_typeable__
     NUMBER(3) :nlang.builtins.i32 ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym4d) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
     IDENT(_Ngensym4d) :nlang.builtins.__internal_not_typeable__
     UN(@) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
      IDENT(_Ngensym4c) :nlang.builtins.i32 ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym74) :nlang.builtins.i32 ::(init)
     IDENT(_Ngensym74) :nlang.builtins.__internal_not_typeable__
     UN(.) :nlang.builtins.i32 ::(init)
      IDENT(_Ngensym4d) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym4e) :nlang.builtins.bool ::(init)
     IDENT(_Ngensym4e) :nlang.builtins.__internal_not_typeable__
     BIN( == ) :nlang.builtins.bool ::(init)
      IDENT(_Ngensym4b) :nlang.builtins.i32 ::(init)
      IDENT(_Ngensym74) :nlang.builtins.i32 ::(init)
   CALL :nlang.builtins.void ::(init)
    IDENT(assert) :nlang.builtins.assert ::()
    IDENT(_Ngensym4e) :nlang.builtins.bool ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym4f) :nlang.builtins.i32 ::(init)
     IDENT(_Ngensym4f) :nlang.builtins.__internal_not_typeable__
     NUMBER(1) :nlang.builtins.i32 ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym50) :nlang.builtins.i32 ::(init)
     IDENT(_Ngensym50) :nlang.builtins.__internal_not_typeable__
     NUMBER(2) :nlang.builtins.i32 ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym51) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
     IDENT(_Ngensym51) :nlang.builtins.__internal_not_typeable__
     UN(@) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
      IDENT(_Ngensym50) :nlang.builtins.i32 ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym75) :nlang.builtins.i32 ::(init)
     IDENT(_Ngensym75) :nlang.builtins.__internal_not_typeable__
     UN(.) :nlang.builtins.i32 ::(init)
      IDENT(_Ngensym51) :(nlang.builtins.ref nlang.builtins.i32) ::(init and nonnull)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym52) :nlang.builtins.i32 ::(init)
     IDENT(_Ngensym52) :nlang.builtins.__internal_not_typeable__
     BIN( + ) :nlang.builtins.i32 ::(init)
      IDENT(_Ngensym4f) :nlang.builtins.i32 ::(init)
      IDENT(_Ngensym75) :nlang.builtins.i32 ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym53) :nlang.builtins.i32 ::(init)
     IDENT(_Ngensym53) :nlang.builtins.__internal_not_typeable__
     NUMBER(3) :nlang.builtins.i32 ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym54) :nlang.builtins.bool ::(init)
     IDENT(_Ngensym54) :nlang.builtins.__internal_not_typeable__
     BIN( == ) :nlang.builtins.bool ::(init)
      IDENT(_Ngensym52) :nlang.builtins.i32 ::(init)
      IDENT(_Ngensym53) :nlang.builtins.i32 ::(init)
   CALL :nlang.builtins.void ::(init)
    IDENT(assert) :nlang.builtins.assert ::()
    IDENT(_Ngensym54) :nlang.builtins.bool ::(init)
   LET :nlang.builtins.void ::()
    DEFNAME(_Ngensym55) :nlang.builtins.i32 ::(init)
     IDENT(_Ngensym55) :nlang.builtins.__internal_not_typeable__
     NUMBER(0) :nlang.builtins.i32 ::(init)
   RETURN :nlang.builtins.void ::()
    IDENT(_Ngensym55) :nlang.builtins.i32 ::(init)
