from nlang import *
type sum = SumCopy SumEquality WorkaroundRBC <root>.nlang.builtins.CtorWith
  let this = sum
  | A = 0 -> u32
  | B = 0 + 1 -> i32

sum method <root>.nlang.builtins.HasEquality.operator_ne self:@this = bool

sum method <root>.nlang.builtins.HasEquality.operator_eq self:@this = bool

sum method <root>.nlang.builtins.Copyable.operator_copy self:@#this = void

type ta = TrivialCopy WorkaroundRBC
  let this = ta
  x:u32

ta method <root>.nlang.builtins.Copyable.operator_copy self:@#this = void

type tb = TrivialCopy WorkaroundRBC
  let this = tb
  y:i32

tb method <root>.nlang.builtins.Copyable.operator_copy self:@#this = void

type sum_nocopy = WorkaroundRBC <root>.nlang.builtins.CtorWith
  let this = sum_nocopy
  | A = 0 -> ta
  | B = 0 + 1 -> tb

export fun main = i32
  let n = sum.A.mk 0
  let __gensym0 = sum.A.mk 0
  if t00.sum.sum.operator_eq @n @__gensym0
    return 0
  else
    return 1
