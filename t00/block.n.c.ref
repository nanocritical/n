#include <lib/nlang/runtime.h>
#define NLANG_DECLARE_TYPES
# include "lib/nlang/module.n.h.out"
#undef NLANG_DECLARE_TYPES

#define NLANG_DECLARE_TYPES
# include "t00/block.n.h.out"
#undef NLANG_DECLARE_TYPES


#define NLANG_DEFINE_TYPES
# include "lib/nlang/module.n.h.out"
#undef NLANG_DEFINE_TYPES

#define NLANG_DEFINE_TYPES
# include "t00/block.n.h.out"
#undef NLANG_DEFINE_TYPES


#define NLANG_DECLARE_FUNCTIONS
# include "lib/nlang/module.n.h.out"
#undef NLANG_DECLARE_FUNCTIONS

#define NLANG_DECLARE_FUNCTIONS
# include "t00/block.n.h.out"
#undef NLANG_DECLARE_FUNCTIONS
static nlang_builtins_i32 t00_block_foo(void);

static nlang_builtins_u32 t00_block_deref(_Ngen_nlang_builtins_ref__nlang_builtins_u32_genN_ p);

#define NLANG_DEFINE_FUNCTIONS
# include "lib/nlang/module.n.h.out"
#undef NLANG_DEFINE_FUNCTIONS

#define NLANG_DEFINE_FUNCTIONS
# include "t00/block.n.h.out"
#undef NLANG_DEFINE_FUNCTIONS
static nlang_builtins_i32 t00_block_foo(void) {
 {
return ({ (nlang_builtins_i32)0;
; });
}
}

static nlang_builtins_u32 t00_block_deref(_Ngen_nlang_builtins_ref__nlang_builtins_u32_genN_ p) {
 {
return ((*p));
}
}

nlang_builtins_i32 _Nmain(void) {
 {
if ((nlang_builtins_bool)1) {
;;
}
else  {
;;
};
 {
nlang_builtins_assert((nlang_builtins_bool)1);
};
nlang_builtins_u32 x = { 0 };
 {
 {
x = (nlang_builtins_u32)1;
};
};
;
nlang_builtins_assert((x == (nlang_builtins_u32)1));
nlang_builtins_assert((t00_block_foo() == (nlang_builtins_i32)0));
nlang_builtins_u32 x1 = (({ (nlang_builtins_u32)0;
; }) + (nlang_builtins_u32)1);
;
nlang_builtins_assert((x1 == x));
nlang_builtins_u32 x2 = (({ (nlang_builtins_u32)1;
; }) + ({ (nlang_builtins_u32)2;
; }));
;
nlang_builtins_assert((x2 == (nlang_builtins_u32)3));
nlang_chars_static_string y1 = { 0 };
nlang_builtins_u32 z1 = { 0 };
 {
if ((x > (nlang_builtins_u32)0)) {
y1 = nlang_chars_static_string_mk((const nlang_builtins_u8 *)"test", sizeof("test")-1);
}
else  {
y1 = nlang_chars_static_string_mk((const nlang_builtins_u8 *)"error", sizeof("error")-1);
};
};
 {
nlang_chars_static_string _Ngensym1 = { 0 };
if (nlang_chars_static_string_operator_eq(((&y1)), ({ _Ngensym1 = nlang_chars_static_string_mk((const nlang_builtins_u8 *)"test", sizeof("test")-1);
((&_Ngensym1));
; }))) {
z1 = (nlang_builtins_u32)0;
}
else  {
z1 = (nlang_builtins_u32)1;
};
;
};
;
nlang_builtins_assert((z1 == (nlang_builtins_u32)0));
nlang_chars_static_string y2 = { 0 };
nlang_builtins_i32 z2 = { 0 };
 {
if ((x > (nlang_builtins_u32)0)) {
y2 = nlang_chars_static_string_mk((const nlang_builtins_u8 *)"test", sizeof("test")-1);
}
else  {
y2 = nlang_chars_static_string_mk((const nlang_builtins_u8 *)"error", sizeof("error")-1);
};
};
 {
 {
nlang_builtins_i32 tmp = (nlang_builtins_i32)0;
nlang_containers_index_range _Ngensym3 = { 0 };
nlang_containers_index_iterator _Ngensym0 = { 0 };
nlang_containers_index_range_iter(({ _Ngensym3 = nlang_containers_range((nlang_builtins_size)0, (nlang_builtins_size)100);
((&_Ngensym3));
; }), &(_Ngensym0));
while (nlang_containers_index_iterator_is_valid(((&_Ngensym0)))) {
nlang_builtins_size i = nlang_containers_index_iterator_get(((&_Ngensym0)));
nlang_builtins_u32 _Ngensym2 = { 0 };
tmp += nlang_builtins_u32_reinterpret_signed(({ _Ngensym2 = nlang_builtins_size_trim_u32(((&i)));
((&_Ngensym2));
; }));
;
;
nlang_containers_index_iterator_next(((&_Ngensym0)));
};
;
;
;
z2 = tmp;
};
};
;
nlang_chars_static_string _Ngensym4 = { 0 };
nlang_builtins_assert(nlang_chars_static_string_operator_eq(((&y2)), ({ _Ngensym4 = nlang_chars_static_string_mk((const nlang_builtins_u8 *)"test", sizeof("test")-1);
((&_Ngensym4));
; })));
;
nlang_builtins_assert((z2 == ((nlang_builtins_i32)50 * (nlang_builtins_i32)99)));
nlang_builtins_u32 _Ngensym5 = { 0 };
nlang_builtins_assert((t00_block_deref(({  {
_Ngensym5 = (nlang_builtins_u32)1;
};
((&_Ngensym5));
; })) == (nlang_builtins_u32)1));
;
return (nlang_builtins_i32)0;
}
}
void t00_block_Nrunexamples(void) __attribute__((section(".text.nlang.examples")));
void t00_block_Nrunexamples(void) {
}
