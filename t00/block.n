from n import *

fun Foo = I32
	return block -> 0

fun deref p:@U32 = U32
	return p.

fun named_deref ?p:?@U32 = U32
	return p else 0

fun Main = I32
	if true
		noop
	else
		noop
	block
		Assert true
	let x = block
		1
	Assert <- x == 1:U32

	Assert <- Foo == 0

	let x1 = block -> 0;; + 1
	Assert <- x1 == x
	let x2 = block -> 1;; + block -> 2
	Assert <- x2 == 3:U32

	let y1 = if x > 0 -> 'test';; else -> 'Error'
	and z1 = if y1 == 'test' -> 0;; else -> 1:U32
	Assert <- z1 == 0

	let y2 = if x > 0 -> 'test';; else -> 'Error'
	and z2 = block
		let tmp = 0:I32
		such
			for i in (0 .. 100).Iter -> tmp += i.Trim_u32.Signed
		tmp
	Assert <- y2 == 'test'
	Assert <- z2 == 50*99

	Assert <- (deref block -> 1:U32;;) == 1
	Assert <- (named_deref p=block -> 1:U32;;) == 1

	Say
		\ false
		\ false
		\ Foo
		\ if false
			false
		else
			true
		\ false
		\ Foo
		\ block
			if true
				false
			else
				true
		\ false

	return 0
