from n import *

fun Foo = I32
	let _ = block -> (id I32) 0
	return block -> 0

fun deref p:*U32 = U32
	return p*

fun named_deref ?p:?*U32 = U32
	return p else 0

(fun t:`Any) id x:t = t
	return x

fun nothing
	noop

fun Main = I32
	if true
		noop
	else
		noop
	block
		assert true
	let x = block
		1
	assert x == 1:U32

	assert Foo == 0

	let x1 = block -> 0;; + 1
	assert x1 == x
	let x2 = block -> 1;; + block -> 2
	assert x2 == 3:U32

	let y1 = if x > 0 -> 'test';; else -> 'Error'
	and z1 = if y1 == 'test' -> 0;; else -> 1:U32
	assert z1 == 0

	let aa = if x > 0 -> ('test')
	else -> 'Error'
	Prn aa

	block
		let x = 0:I32 such Prn x
	block
		let x = 0:I32 such Prn x; Prn x+1

	let y2 = if x > 0 -> 'test';; else -> 'Error'
	and z2 = block
		let tmp = 0:I32
		such
			for i in (0 .. 100).Iter -> tmp += i.Trim_u32.Signed
		tmp
	assert y2 == 'test'
	assert z2 == 50*99

	assert (deref block -> 1:U32;;) == 1
	assert (named_deref p=block -> 1:U32;;) == 1

	assert (deref block -> nothing; 1:U32;;) == 1
	assert (named_deref p=block -> nothing; 1:U32;;) == 1

	assert (deref block nothing; 1:U32;;) == 1
	assert (named_deref p=block nothing; 1:U32;;) == 1

	Prn
		\ false
		\ block
		if true
			false
		else
			true
		\ false

		-- Either of these forms are legal:
		\ if true ->
		\ true;; else false;;
		-- or:
		\ if true ->
			\ true;; else false;;

		\ false

	assert true
		\ or false

	-- Asserts are special, they introduce an implicit block, but we're
	-- allowed to make it an implicit single-line block (by starting on
	-- the same line, or escaping right away, which is the same thing).
	-- Implicit single-line blocks come with a pseudo indent increment,
	-- hence the need to indent the if...
	assert
		\ Prn
		\ false
		\ block
			if true
				false
			else
				true
		\ false
		\ if true -> true;; else false;;
		\ false;
		\ true

	return 0
