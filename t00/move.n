from n import *

fun foo buf:(Buf Uint) = (Buf Uint)
	assert buf.Count == 2 and buf.[0] == 0 and buf.[1] == 1
	return buf#Move

struct t =
	buf	:(Buf Uint)

fun Main = I32 within Heap
	var buf = {}:(Buf Uint)
	(buf#Push)# = 0
	(buf#Push)# = 1

	block
		let ctx = Heap!Save_measurements
		let cpy = buf
		assert cpy.Count == 2 and cpy.[0] == 0 and cpy.[1] == 1
		assert Heap.Measure.Allocated > 0
		assert Heap.Measure.Freed == 0

	block
		let ctx = Heap!Save_measurements
		let mv = buf#Move
		assert buf.Count == 0
		assert mv.Count == 2 and mv.[0] == 0 and mv.[1] == 1
		assert Heap.Measure.Allocated == 0
		assert Heap.Measure.Freed == 0

	(buf#Push)# = 0
	(buf#Push)# = 1
	block
		let ctx = Heap!Save_measurements
		let mv = foo buf#Move
		assert buf.Count == 0
		assert mv.Count == 2 and mv.[0] == 0 and mv.[1] == 1
		assert Heap.Measure.Allocated == 0
		assert Heap.Measure.Freed == 0

	(buf#Push)# = 0
	(buf#Push)# = 1
	block
		let ctx = Heap!Save_measurements
		let r = {buf=buf#Move}:t
		assert buf.Count == 0
		assert r.buf.Count == 2 and r.buf.[0] == 0 and r.buf.[1] == 1
		assert Heap.Measure.Allocated == 0
		assert Heap.Measure.Freed == 0

	return 0
