from n import *

fun opts ?a:?*I32 = I32
	return a else 1

fun chained v:!(Vararg *I32) = I32
	let s = 0
	such
		for i in v!
			s += i*
	return s

fun fvar a:I32 ?b:?*I32 ...v:(Vararg *I32) = I32
	let s = chained !v
	return a + (b else 0) + s

fun onlyvar ...v:(Vararg *I32) = I32
	let s = 0
	such
		for i in v
			s += i*
	return s

fun diff x:I32 ...v:(Vararg *I32) = I32
	let d = 0
	such
		for i in v
			d -= i*
	return x + d

(fun t:`Any) unarygen ?p:?*t = I32
	return 0

fun relay ...v:(Vararg *I32)
	for x in v
		Pr x
	Prn

fun relay2 ...v:(Vararg *I32)
	relay ...v

fun relay3 ...v:(Vararg *I32)
	relay2 ...v

fun Main = I32
	if opts a=1 != 1
		return 1
	if opts a=1 != opts
		return 1

	assert 10 == fvar 0 b=1 2 3 4
	assert 10 == fvar 0 b=1 ...{2 3 4}

	assert 10 == onlyvar 0 1 2 3 4
	let s = {0 1 2 3 4}
	assert 10 == onlyvar ...s
	assert 10 == onlyvar ...{0 1 2 3 4}

	let big = {}:[!]I32 such
		Realloc #big 10_000
		big = big.[.. big.Cap]
	assert 0 == onlyvar ...big

	assert -1 == diff 0 - 1
	assert 1 == diff 0 -1
	assert 1 == diff 0 (-1)

	relay 1 2 3
	relay ...{4 5 6}
	relay2 1 2 3
	relay2 ...{4 5 6}
	relay3 1 2 3
	relay3 ...{4 5 6}

	let x = unarygen I32

	return x + (opts a=0)
