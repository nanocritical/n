from nlang import *
fun inferred = _nretval:error
  try
    let _Ngensym16:nlang.builtins.error    such
      throw block 
  _Ngensym16 = { code=1 }
  _Ngensym16;;
  catch _Ngensym1 err

    return err

fun foo = i32
  try
    let _Ngensym17:nlang.builtins.error    such
      throw ONEblock 
  _Ngensym17 = { code=1 }
  _Ngensym17;;
    let _Ngensym18:nlang.builtins.error    such
      throw ZEROblock 
  _Ngensym18 = { code=0 }
  _Ngensym18;;
  catch ZERO _

    return 0  catch ONE _

    return 1

fun bar = i32
  try
    let _Ngensyma = { code=1 }
    return 0
  catch _Ngensym5 err

    try
      let _Ngensymb = { code=err.code + 1 }
      let _Ngensymc = { code=0 }
      return 0
    catch ONE err

      return err.code - 1    catch ZERO _

      return 0

fun noerror = i32
  try
    let _Ngensymd = { code=0 }
    return 0
  catch _Ngensym7 _

    return 1

export fun main = i32
  let _Ngensym19:nlang.builtins.error  such
    assert (nlang.builtins.error.operator_ne block 
  _Ngensym19 = inferred
  @_Ngensym19;; @error.OK)
  assert (foo == 1)
  assert (bar == 1)
  assert (noerror == 0)
  try
    let _Ngensym1a:nlang.builtins.error    such
      throw block 
  _Ngensym1a = { code=(bar) }
  _Ngensym1a;;
    return 1
  catch _Ngensym9 err

    return err.code - 1
