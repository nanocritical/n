from nlang import *
type t = `trivial_copy <root>.nlang.builtins.`trivial_ctor
  final = t00.returnthroughref.t
  this = t00.returnthroughref.t
  x:i32
  xx:i32
  t method <root>.nlang.builtins.`trivial_ctor.ctor = _nretval:void 

  fun <root>.nlang.builtins.`trivial_ctor.mk = r:final 

  fun <root>.nlang.builtins.`trivial_ctor.new = _nretval:@#final 

  t method <root>.nlang.builtins.`copyable.copy_ctor other:@final = _nretval:void 


fun foo = _nretval:t 
  _Ngensym0 = 3
  noop
  return { x=_Ngensym0 }

fun bar = _nretval:t 
  noop
  return foo

fun bar2 = r:t 
  block
    _Ngensym9 = bar
    r = _Ngensym9
  return r

export fun main = _nretval:i32 
  block
    noop
    y = bar
  if block 
  noop
  _Ngensyma = bar2
  noop
  _Ngensym4 = y.x != _Ngensyma.x
  _Ngensym4;;
    _Ngensym5 = 1
    return _Ngensym5
  else
    noop
  noop
  return y.xx
