#include <lib/nlang/runtime.h>
#include "lib/nlang/module.n.h.out"
struct t00_copy_copy;
typedef struct t00_copy_copy t00_copy_copy;
struct t00_copy_copy {
nlang_builtins_i32 x;
}
;
typedef const t00_copy_copy* _ngen_nlang_builtins_i_ref__t00_copy_copy;
typedef _ngen_nlang_builtins_i_ref__t00_copy_copy _ngen_nlang_builtins_i_nullable_ref__t00_copy_copy;
typedef t00_copy_copy* _ngen_nlang_builtins_i_mutable_ref__t00_copy_copy;
typedef _ngen_nlang_builtins_i_mutable_ref__t00_copy_copy _ngen_nlang_builtins_i_mercurial_ref__t00_copy_copy;
typedef _ngen_nlang_builtins_i_mutable_ref__t00_copy_copy _ngen_nlang_builtins_i_nullable_mutable_ref__t00_copy_copy;
typedef _ngen_nlang_builtins_i_mercurial_ref__t00_copy_copy _ngen_nlang_builtins_i_nullable_mercurial_ref__t00_copy_copy;

nlang_builtins_void t00_copy_copy_operator_copy(_ngen_nlang_builtins_i_mercurial_ref__t00_copy_copy self, _ngen_nlang_builtins_i_ref__t00_copy_copy other){
#define THIS(x) t00_copy_copy##x
 {
self->x = other->x;
}
#undef THIS
}

void t00_copy_foo(t00_copy_copy *_nrtr__nretval);

nlang_builtins_i32 main(void){
 {
t00_copy_copy y; memset(&y, 0, sizeof(y));
{
memset(&(y), 0, sizeof(t00_copy_copy));
y.x = -(nlang_builtins_i32)1;
 }
;
;
t00_copy_copy z; memset(&z, 0, sizeof(z));
 {
t00_copy_copy_operator_copy((&z), (&y));
};
t00_copy_copy zz; memset(&zz, 0, sizeof(zz));
 {
t00_copy_copy_operator_copy((&zz), (&z));
};
return z.x + (nlang_builtins_i32)1;
}
}
