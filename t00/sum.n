from n import *

enum en =
	| A
	| B = 3:U32
	| C

--( Support disabled
enum hen =
	| A
	| B
		| BA
		| BB
		| BC
	| C
)--

--( Support disabled
union un =
	| A
	| B
		x	:U32
	| C = 3:U8
		x	:en

union hun =
	| A
	| B
		x	:U32
		| BA
			y	:U32
			z	:U32
		| BB
			z	:I64
)--

struct a =
	isa `Trivial_copy
	x	:I32

union ext =
	| A -> a
	| B
	| C -> a, a
	| D -> U32

--fun only_a x:en::|A
--  noop

fun wants_a x:#a
	x#x = 42

let gx = {}:ext.A
-- FIXME missing support for initializing non-trivial global union values

fun Main = I32
	let e = en.A
--  only_a e
	match e
	| A -> noop
	| _ -> return 1

	--(let f = hen.BA
	match f
	| B -> noop
	| _ -> return 1
	match f
	| BA -> noop
	| _ -> return 1)--

	--(let u = {}:un.A
	assert u ==| A
	assert u !=| B

	let v = {}:un.B
	assert v.B.x == 0)--

	let x = {}:ext.A
	assert x.A.x == 0
	assert gx.A.x == 0
	wants_a #x#A

	let y = {}:ext.D such
		y!D = 1
	assert y.D == 1

	let z = 2:ext.D
	assert z.D == 2

	let zz = z.D:ext.D
	assert zz.D == 2

	var zzz:ext
	zzz = 42:ext.D
	assert zzz ==| D
	assert zzz.D == 42

	return 0
