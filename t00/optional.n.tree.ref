MODULE_BODY :nlang.builtins.__internal_not_typeable__
 IMPORT :nlang.builtins.__internal_not_typeable__
  IDENT(nlang)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__literal_null__)
  IMPORT :<import>
   IDENT(nlang)
   IMPORT :<import>
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
   IMPORT :<import>
    BIN(.)
     IDENT(nlang)
     IDENT(containers)
   IMPORT :<import>
    BIN(.)
     IDENT(nlang)
     IDENT(memory)
   IMPORT :<import>
    BIN(.)
     IDENT(nlang)
     IDENT(chars)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__literal_integer__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__literal_floating__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__internal_not_typeable__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__call_function_slot__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__mutable__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__mercurial__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`any)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`copyable)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`copyable_but_owned)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`trivial_copy)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`trivial_copy_but_owned)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`return_by_copy)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`default_ctor)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`trivial_ctor)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`trivial_dtor)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`matchable)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`has_equality)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`trivial_equality)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`has_compare)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`ordered)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`trivial_order)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`ordered_by_compare)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`arithmetic)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`bitwise)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`sum_copy)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`sum_equality)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`sum_order)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(void)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`__ref_compatible)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`any_any_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`any_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`any_mutable_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`any_nullable_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`any_nullable_mutable_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(mutable_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(mercurial_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(nullable_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(nullable_mutable_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(nullable_mercurial_ref)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`any_tuple)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_2)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_3)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_4)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_5)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_6)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_7)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_8)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_9)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_10)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_11)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_12)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_13)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_14)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_15)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(tuple_16)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`numeric)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`integer)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`signed_integer)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`unsigned_integer)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`native_integer)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`native_signed_integer)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`native_unsigned_integer)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`native_anysign_integer)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`generalized_boolean)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`bool_compatible)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`native_boolean)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`floating)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`native_floating)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(bool)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(i8)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(i16)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(i32)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(i64)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(u8)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(u16)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(u32)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(u64)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(ssize)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(size)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(float)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(double)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`auto_ctor)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`ctor_with)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`trivial_array_ctor)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`array_ctor)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(static_array)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`sum_ctor_with)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(abort)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(assert)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(unreached)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__pre__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__post__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__invariant__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(__example__)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(likely)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(unlikely)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(unused)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(optional)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(min)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(max)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(`error)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(error)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(drop)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(fatal)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(valist)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(builtins)
    IDENT(vararg)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(containers)
    IDENT(`locus)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(containers)
    IDENT(`fwd_locus)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(containers)
    IDENT(`bidir_locus)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(containers)
    IDENT(`iterator)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(containers)
    IDENT(index_range)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(containers)
    IDENT(index_iterator)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(containers)
    IDENT(range)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(memory)
    IDENT(`allocator)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(memory)
    IDENT(slice)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(chars)
    IDENT(char)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(chars)
    IDENT(`static_string_compatible)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(chars)
    IDENT(`const_string)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(chars)
    IDENT(`string)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(chars)
    IDENT(`string_buffer)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(chars)
    IDENT(static_string)
  IMPORT :<import>
   BIN(.)
    BIN(.)
     IDENT(nlang)
     IDENT(chars)
    IDENT(`show)
  IMPORT :<import>
   BIN(.)
    IDENT(nlang)
    IDENT(print)
  IMPORT :<import>
   BIN(.)
    IDENT(nlang)
    IDENT(say)
  IMPORT :<import>
   BIN(.)
    IDENT(nlang)
    IDENT(just_const)
  IMPORT :<import>
   BIN(.)
    IDENT(nlang)
    IDENT(just_mutable)
 DEFFUN :t00.optional.opts
  IDENT(opts) :nlang.builtins.__internal_not_typeable__
  GENARGS :nlang.builtins.__internal_not_typeable__
  FUNARGS :nlang.builtins.__internal_not_typeable__
   DEFARG :(nlang.builtins.nullable_ref nlang.builtins.i32)
    IDENT(a) :nlang.builtins.__internal_not_typeable__
    UN(?@) :(nlang.builtins.nullable_ref nlang.builtins.i32)
     IDENT(i32) :nlang.builtins.i32
   IDENT(i32) :nlang.builtins.i32
  BLOCK :nlang.builtins.void
   RETURN :nlang.builtins.void
    CALL :nlang.builtins.i32
     IDENT(optional) :(nlang.builtins.optional nlang.builtins.i32)
     IDENT(a) :(nlang.builtins.nullable_ref nlang.builtins.i32)
     NUMBER(1) :nlang.builtins.i32
 DEFFUN :t00.optional.chained
  IDENT(chained) :nlang.builtins.__internal_not_typeable__
  GENARGS :nlang.builtins.__internal_not_typeable__
  FUNARGS :nlang.builtins.__internal_not_typeable__
   DEFARG :(nlang.builtins.mutable_ref (nlang.builtins.vararg (nlang.builtins.ref nlang.builtins.i32)))
    IDENT(v) :nlang.builtins.__internal_not_typeable__
    UN(@!) :(nlang.builtins.mutable_ref (nlang.builtins.vararg (nlang.builtins.ref nlang.builtins.i32)))
     CALL :(nlang.builtins.vararg (nlang.builtins.ref nlang.builtins.i32))
      IDENT(vararg) :(functor nlang.builtins.vararg nlang.builtins.`any_any_ref)
      UN(@) :(nlang.builtins.ref nlang.builtins.i32)
       IDENT(i32) :nlang.builtins.i32
   IDENT(i32) :nlang.builtins.i32
  BLOCK :nlang.builtins.void
   LET :nlang.builtins.void
    DEFPATTERN :nlang.builtins.void
     IDENT(s) :nlang.builtins.i32
     NUMBER(0) :nlang.builtins.i32
     DEFNAME(s) :nlang.builtins.i32
    BLOCK :nlang.builtins.void
     FOR :nlang.builtins.void
      LET :nlang.builtins.void
       DEFPATTERN :nlang.builtins.void
        IDENT(_Ngensym0) :(nlang.builtins.vararg (nlang.builtins.ref nlang.builtins.i32))
        UN(!) :(nlang.builtins.vararg (nlang.builtins.ref nlang.builtins.i32))
         IDENT(v) :(nlang.builtins.mutable_ref (nlang.builtins.vararg (nlang.builtins.ref nlang.builtins.i32)))
        DEFNAME(_Ngensym0) :(nlang.builtins.vararg (nlang.builtins.ref nlang.builtins.i32))
       BLOCK :nlang.builtins.void
        WHILE :nlang.builtins.void
         CALL :nlang.builtins.bool
          DIRECTDEF :nlang.builtins.vararg.has_next
          UN(@) :(nlang.builtins.ref (nlang.builtins.vararg (nlang.builtins.ref nlang.builtins.i32)))
           IDENT(_Ngensym0) :(nlang.builtins.vararg (nlang.builtins.ref nlang.builtins.i32))
         BLOCK :nlang.builtins.void
          LET :nlang.builtins.void
           DEFPATTERN :nlang.builtins.void
            IDENT(i) :(nlang.builtins.ref nlang.builtins.i32)
            CALL :(nlang.builtins.ref nlang.builtins.i32)
             DIRECTDEF :nlang.builtins.vararg.next
             UN(@!) :(nlang.builtins.mutable_ref (nlang.builtins.vararg (nlang.builtins.ref nlang.builtins.i32)))
              IDENT(_Ngensym0) :(nlang.builtins.vararg (nlang.builtins.ref nlang.builtins.i32))
            DEFNAME(i) :(nlang.builtins.ref nlang.builtins.i32)
           BLOCK :nlang.builtins.void
            BIN( += ) :nlang.builtins.void
             IDENT(s) :nlang.builtins.i32
             UN(.) :nlang.builtins.i32
              IDENT(i) :(nlang.builtins.ref nlang.builtins.i32)
   RETURN :nlang.builtins.void
    IDENT(s) :nlang.builtins.i32
 DEFFUN :t00.optional.var
  IDENT(var) :nlang.builtins.__internal_not_typeable__
  GENARGS :nlang.builtins.__internal_not_typeable__
  FUNARGS :nlang.builtins.__internal_not_typeable__
   DEFARG :nlang.builtins.i32
    IDENT(a) :nlang.builtins.__internal_not_typeable__
    IDENT(i32) :nlang.builtins.i32
   DEFARG :(nlang.builtins.nullable_ref nlang.builtins.i32)
    IDENT(b) :nlang.builtins.__internal_not_typeable__
    UN(?@) :(nlang.builtins.nullable_ref nlang.builtins.i32)
     IDENT(i32) :nlang.builtins.i32
   DEFARG :(nlang.builtins.vararg (nlang.builtins.ref nlang.builtins.i32))
    IDENT(v) :nlang.builtins.__internal_not_typeable__
    CALL :(nlang.builtins.vararg (nlang.builtins.ref nlang.builtins.i32))
     IDENT(vararg) :(functor nlang.builtins.vararg nlang.builtins.`any_any_ref)
     UN(@) :(nlang.builtins.ref nlang.builtins.i32)
      IDENT(i32) :nlang.builtins.i32
   IDENT(i32) :nlang.builtins.i32
  BLOCK :nlang.builtins.void
   LET :nlang.builtins.void
    DEFPATTERN :nlang.builtins.void
     IDENT(s) :nlang.builtins.i32
     CALL :nlang.builtins.i32
      IDENT(chained) :t00.optional.chained
      UN(@!) :(nlang.builtins.mutable_ref (nlang.builtins.vararg (nlang.builtins.ref nlang.builtins.i32)))
       IDENT(v) :(nlang.builtins.vararg (nlang.builtins.ref nlang.builtins.i32))
     DEFNAME(s) :nlang.builtins.i32
   RETURN :nlang.builtins.void
    BIN( + ) :nlang.builtins.i32
     BIN( + ) :nlang.builtins.i32
      IDENT(a) :nlang.builtins.i32
      CALL :nlang.builtins.i32
       IDENT(optional) :(nlang.builtins.optional nlang.builtins.i32)
       IDENT(b) :(nlang.builtins.nullable_ref nlang.builtins.i32)
       NUMBER(0) :nlang.builtins.i32
     IDENT(s) :nlang.builtins.i32
 DEFFUN :t00.optional.onlyvar
  IDENT(onlyvar) :nlang.builtins.__internal_not_typeable__
  GENARGS :nlang.builtins.__internal_not_typeable__
  FUNARGS :nlang.builtins.__internal_not_typeable__
   DEFARG :(nlang.builtins.vararg (nlang.builtins.ref nlang.builtins.i32))
    IDENT(v) :nlang.builtins.__internal_not_typeable__
    CALL :(nlang.builtins.vararg (nlang.builtins.ref nlang.builtins.i32))
     IDENT(vararg) :(functor nlang.builtins.vararg nlang.builtins.`any_any_ref)
     UN(@) :(nlang.builtins.ref nlang.builtins.i32)
      IDENT(i32) :nlang.builtins.i32
   IDENT(i32) :nlang.builtins.i32
  BLOCK :nlang.builtins.void
   LET :nlang.builtins.void
    DEFPATTERN :nlang.builtins.void
     IDENT(s) :nlang.builtins.i32
     NUMBER(0) :nlang.builtins.i32
     DEFNAME(s) :nlang.builtins.i32
    BLOCK :nlang.builtins.void
     FOR :nlang.builtins.void
      LET :nlang.builtins.void
       DEFPATTERN :nlang.builtins.void
        IDENT(_Ngensym1) :(nlang.builtins.vararg (nlang.builtins.ref nlang.builtins.i32))
        IDENT(v) :(nlang.builtins.vararg (nlang.builtins.ref nlang.builtins.i32))
        DEFNAME(_Ngensym1) :(nlang.builtins.vararg (nlang.builtins.ref nlang.builtins.i32))
       BLOCK :nlang.builtins.void
        WHILE :nlang.builtins.void
         CALL :nlang.builtins.bool
          DIRECTDEF :nlang.builtins.vararg.has_next
          UN(@) :(nlang.builtins.ref (nlang.builtins.vararg (nlang.builtins.ref nlang.builtins.i32)))
           IDENT(_Ngensym1) :(nlang.builtins.vararg (nlang.builtins.ref nlang.builtins.i32))
         BLOCK :nlang.builtins.void
          LET :nlang.builtins.void
           DEFPATTERN :nlang.builtins.void
            IDENT(i) :(nlang.builtins.ref nlang.builtins.i32)
            CALL :(nlang.builtins.ref nlang.builtins.i32)
             DIRECTDEF :nlang.builtins.vararg.next
             UN(@!) :(nlang.builtins.mutable_ref (nlang.builtins.vararg (nlang.builtins.ref nlang.builtins.i32)))
              IDENT(_Ngensym1) :(nlang.builtins.vararg (nlang.builtins.ref nlang.builtins.i32))
            DEFNAME(i) :(nlang.builtins.ref nlang.builtins.i32)
           BLOCK :nlang.builtins.void
            BIN( += ) :nlang.builtins.void
             IDENT(s) :nlang.builtins.i32
             UN(.) :nlang.builtins.i32
              IDENT(i) :(nlang.builtins.ref nlang.builtins.i32)
   RETURN :nlang.builtins.void
    IDENT(s) :nlang.builtins.i32
 DEFFUN :t00.optional.main
  IDENT(main) :nlang.builtins.__internal_not_typeable__
  GENARGS :nlang.builtins.__internal_not_typeable__
  FUNARGS :nlang.builtins.__internal_not_typeable__
   IDENT(i32) :nlang.builtins.i32
  BLOCK :nlang.builtins.void
   LET :nlang.builtins.void
    DEFPATTERN :nlang.builtins.void
     TYPECONSTRAINT :nlang.builtins.i32
      IDENT(_Ngensym2) :nlang.builtins.i32
      DIRECTDEF :nlang.builtins.i32
     DEFNAME(_Ngensym2) :nlang.builtins.i32
    BLOCK :nlang.builtins.void
     IF :nlang.builtins.void
      BIN( != ) :nlang.builtins.bool
       CALL :nlang.builtins.i32
        IDENT(opts) :t00.optional.opts
        BLOCK :(nlang.builtins.ref nlang.builtins.i32)
         BIN( = ) :nlang.builtins.void
          IDENT(_Ngensym2) :nlang.builtins.i32
          NUMBER(1) :nlang.builtins.i32
         UN(@) :(nlang.builtins.ref nlang.builtins.i32)
          IDENT(_Ngensym2) :nlang.builtins.i32
       NUMBER(1) :nlang.builtins.i32
      BLOCK :nlang.builtins.void
       RETURN :nlang.builtins.void
        NUMBER(1) :nlang.builtins.i32
   LET :nlang.builtins.void
    DEFPATTERN :nlang.builtins.void
     TYPECONSTRAINT :nlang.builtins.i32
      IDENT(_Ngensym3) :nlang.builtins.i32
      DIRECTDEF :nlang.builtins.i32
     DEFNAME(_Ngensym3) :nlang.builtins.i32
    BLOCK :nlang.builtins.void
     IF :nlang.builtins.void
      BIN( != ) :nlang.builtins.bool
       CALL :nlang.builtins.i32
        IDENT(opts) :t00.optional.opts
        BLOCK :(nlang.builtins.ref nlang.builtins.i32)
         BIN( = ) :nlang.builtins.void
          IDENT(_Ngensym3) :nlang.builtins.i32
          NUMBER(1) :nlang.builtins.i32
         UN(@) :(nlang.builtins.ref nlang.builtins.i32)
          IDENT(_Ngensym3) :nlang.builtins.i32
       CALL :nlang.builtins.i32
        IDENT(opts) :t00.optional.opts
        NUL :(nlang.builtins.nullable_ref nlang.builtins.i32)
      BLOCK :nlang.builtins.void
       RETURN :nlang.builtins.void
        NUMBER(1) :nlang.builtins.i32
   LET :nlang.builtins.void
    DEFPATTERN :nlang.builtins.void
     TYPECONSTRAINT :nlang.builtins.i32
      IDENT(_Ngensym4) :nlang.builtins.i32
      DIRECTDEF :nlang.builtins.i32
     DEFNAME(_Ngensym4) :nlang.builtins.i32
    DEFPATTERN :nlang.builtins.void
     TYPECONSTRAINT :nlang.builtins.i32
      IDENT(_Ngensym5) :nlang.builtins.i32
      DIRECTDEF :nlang.builtins.i32
     DEFNAME(_Ngensym5) :nlang.builtins.i32
    DEFPATTERN :nlang.builtins.void
     TYPECONSTRAINT :nlang.builtins.i32
      IDENT(_Ngensym6) :nlang.builtins.i32
      DIRECTDEF :nlang.builtins.i32
     DEFNAME(_Ngensym6) :nlang.builtins.i32
    DEFPATTERN :nlang.builtins.void
     TYPECONSTRAINT :nlang.builtins.i32
      IDENT(_Ngensym7) :nlang.builtins.i32
      DIRECTDEF :nlang.builtins.i32
     DEFNAME(_Ngensym7) :nlang.builtins.i32
    BLOCK :nlang.builtins.void
     CALL :nlang.builtins.void
      IDENT(assert) :nlang.builtins.assert
      BIN( == ) :nlang.builtins.bool
       NUMBER(10) :nlang.builtins.i32
       CALL :nlang.builtins.i32
        IDENT(var) :t00.optional.var
        NUMBER(0) :nlang.builtins.i32
        BLOCK :(nlang.builtins.ref nlang.builtins.i32)
         BIN( = ) :nlang.builtins.void
          IDENT(_Ngensym4) :nlang.builtins.i32
          NUMBER(1) :nlang.builtins.i32
         UN(@) :(nlang.builtins.ref nlang.builtins.i32)
          IDENT(_Ngensym4) :nlang.builtins.i32
        BLOCK :(nlang.builtins.ref nlang.builtins.i32)
         BIN( = ) :nlang.builtins.void
          IDENT(_Ngensym5) :nlang.builtins.i32
          NUMBER(2) :nlang.builtins.i32
         UN(@) :(nlang.builtins.ref nlang.builtins.i32)
          IDENT(_Ngensym5) :nlang.builtins.i32
        BLOCK :(nlang.builtins.ref nlang.builtins.i32)
         BIN( = ) :nlang.builtins.void
          IDENT(_Ngensym6) :nlang.builtins.i32
          NUMBER(3) :nlang.builtins.i32
         UN(@) :(nlang.builtins.ref nlang.builtins.i32)
          IDENT(_Ngensym6) :nlang.builtins.i32
        BLOCK :(nlang.builtins.ref nlang.builtins.i32)
         BIN( = ) :nlang.builtins.void
          IDENT(_Ngensym7) :nlang.builtins.i32
          NUMBER(4) :nlang.builtins.i32
         UN(@) :(nlang.builtins.ref nlang.builtins.i32)
          IDENT(_Ngensym7) :nlang.builtins.i32
   LET :nlang.builtins.void
    DEFPATTERN :nlang.builtins.void
     TYPECONSTRAINT :nlang.builtins.i32
      IDENT(_Ngensym8) :nlang.builtins.i32
      DIRECTDEF :nlang.builtins.i32
     DEFNAME(_Ngensym8) :nlang.builtins.i32
    DEFPATTERN :nlang.builtins.void
     TYPECONSTRAINT :nlang.builtins.i32
      IDENT(_Ngensym9) :nlang.builtins.i32
      DIRECTDEF :nlang.builtins.i32
     DEFNAME(_Ngensym9) :nlang.builtins.i32
    DEFPATTERN :nlang.builtins.void
     TYPECONSTRAINT :nlang.builtins.i32
      IDENT(_Ngensyma) :nlang.builtins.i32
      DIRECTDEF :nlang.builtins.i32
     DEFNAME(_Ngensyma) :nlang.builtins.i32
    DEFPATTERN :nlang.builtins.void
     TYPECONSTRAINT :nlang.builtins.i32
      IDENT(_Ngensymb) :nlang.builtins.i32
      DIRECTDEF :nlang.builtins.i32
     DEFNAME(_Ngensymb) :nlang.builtins.i32
    DEFPATTERN :nlang.builtins.void
     TYPECONSTRAINT :nlang.builtins.i32
      IDENT(_Ngensymc) :nlang.builtins.i32
      DIRECTDEF :nlang.builtins.i32
     DEFNAME(_Ngensymc) :nlang.builtins.i32
    BLOCK :nlang.builtins.void
     CALL :nlang.builtins.void
      IDENT(assert) :nlang.builtins.assert
      BIN( == ) :nlang.builtins.bool
       NUMBER(10) :nlang.builtins.i32
       CALL :nlang.builtins.i32
        IDENT(onlyvar) :t00.optional.onlyvar
        BLOCK :(nlang.builtins.ref nlang.builtins.i32)
         BIN( = ) :nlang.builtins.void
          IDENT(_Ngensym8) :nlang.builtins.i32
          NUMBER(0) :nlang.builtins.i32
         UN(@) :(nlang.builtins.ref nlang.builtins.i32)
          IDENT(_Ngensym8) :nlang.builtins.i32
        BLOCK :(nlang.builtins.ref nlang.builtins.i32)
         BIN( = ) :nlang.builtins.void
          IDENT(_Ngensym9) :nlang.builtins.i32
          NUMBER(1) :nlang.builtins.i32
         UN(@) :(nlang.builtins.ref nlang.builtins.i32)
          IDENT(_Ngensym9) :nlang.builtins.i32
        BLOCK :(nlang.builtins.ref nlang.builtins.i32)
         BIN( = ) :nlang.builtins.void
          IDENT(_Ngensyma) :nlang.builtins.i32
          NUMBER(2) :nlang.builtins.i32
         UN(@) :(nlang.builtins.ref nlang.builtins.i32)
          IDENT(_Ngensyma) :nlang.builtins.i32
        BLOCK :(nlang.builtins.ref nlang.builtins.i32)
         BIN( = ) :nlang.builtins.void
          IDENT(_Ngensymb) :nlang.builtins.i32
          NUMBER(3) :nlang.builtins.i32
         UN(@) :(nlang.builtins.ref nlang.builtins.i32)
          IDENT(_Ngensymb) :nlang.builtins.i32
        BLOCK :(nlang.builtins.ref nlang.builtins.i32)
         BIN( = ) :nlang.builtins.void
          IDENT(_Ngensymc) :nlang.builtins.i32
          NUMBER(4) :nlang.builtins.i32
         UN(@) :(nlang.builtins.ref nlang.builtins.i32)
          IDENT(_Ngensymc) :nlang.builtins.i32
   LET :nlang.builtins.void
    DEFPATTERN :nlang.builtins.void
     TYPECONSTRAINT :nlang.builtins.i32
      IDENT(_Ngensymd) :nlang.builtins.i32
      DIRECTDEF :nlang.builtins.i32
     DEFNAME(_Ngensymd) :nlang.builtins.i32
    BLOCK :nlang.builtins.void
     RETURN :nlang.builtins.void
      CALL :nlang.builtins.i32
       IDENT(opts) :t00.optional.opts
       BLOCK :(nlang.builtins.ref nlang.builtins.i32)
        BIN( = ) :nlang.builtins.void
         IDENT(_Ngensymd) :nlang.builtins.i32
         NUMBER(0) :nlang.builtins.i32
        UN(@) :(nlang.builtins.ref nlang.builtins.i32)
         IDENT(_Ngensymd) :nlang.builtins.i32
