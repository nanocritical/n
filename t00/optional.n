from n import *

fun opts ?a:?@I32 = I32
	return Optional a 1

fun chained v:@!(Vararg @I32) = I32
	let s = 0
	such
		for i in v!
			s += i.
	return s

fun var a:I32 ?b:?@I32 ...v:(Vararg @I32) = I32
	let s = chained @!v
	return a + (Optional b 0) + s

fun onlyvar ...v:(Vararg @I32) = I32
	let s = 0
	such
		for i in v
			s += i.
	return s

fun diff x:I32 ...v:(Vararg @I32) = I32
	let d = 0
	such
		for i in v
			d -= i.
	return x + d

(fun t:`Any) unarygen ?p:?@t = I32
	return 0

fun Main = I32
	if opts a=1 != 1
		return 1
	if opts a=1 != opts
		return 1

	assert 10 == var 0 b=1 2 3 4
	assert 10 == onlyvar 0 1 2 3 4

	assert -1 == diff 0 - 1
	assert 1 == diff 0 -1
	assert 1 == diff 0 (-1)

	let x = unarygen I32

	return x + (opts a=0)
