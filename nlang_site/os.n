from nlang import *
import nlang.show.utils

type time64 = natural_arithmetic trivial_copy nlang.show.format_numeric
  inherit nlang.show.utils.auto_format_value this

  usec:i64

  fun from_usec us:i64 = this
    return this{{ usec=us }}

  fun from_sec s:i64 = this
    return this{{ usec=1000*1000*s }}

  method second = i64
    return self.usec / (1000*1000)

  method operator_eq__ other:@this = bool
    return self.usec == other.usec

  method operator_ne__ other:@this = bool
    return self.usec != other.usec

  method operator_lt__ other:@this = bool
    return self.usec < other.usec

  method operator_gt__ other:@this = bool
    return self.usec > other.usec

  method operator_le__ other:@this = bool
    return self.usec <= other.usec

  method operator_ge__ other:@this = bool
    return self.usec >= other.usec

  method operator_plus__ other:@this = this
    return this{{ usec=self.usec + other.usec }}

  method operator_minus__ other:@this = this
    return this{{ usec=self.usec - other.usec }}

  method operator_times__ other:@this = this
    return this{{ usec=self.usec * other.usec }}

  method operator_divide__ other:@this = this
    return this{{ usec=self.usec / other.usec }}

  method operator_modulo__ other:@this = this
    return this{{ usec=self.usec % other.usec }}

  method operator_neg__ = this
    return this{{ usec=(-self.usec) }}

  method format_value = i64
    return self.usec


-- A better implementation, ideally:

inline type time64 = i64
  inherit i64

time64 inline fun from_usec us:i64 = this
  nlang.unsafe.copy self @us
  return self.

time64 inline method usec = i64
  return ((nlang.unsafe.cast @i64 @this) self).

-- A better SAFE implementation:
inline type time64 = i64
  field _v:i64
  delegate _v i64


fun clock_time = time64


fun rand = i32
  return posix.rand

fun srand seed:u32 = void
  posix.srand seed
