from nlang.prelude import *
from nlang.containers import *
from nlang.slicemod import *
import nlang.heap
import c99

type vector t = (random_container t)
  _p:[]t
  _len:size

  method! ctor = void
    return

  method! init len:size ?with:?@t = void
    self!resize len with

  method len = size
    return self._len

  method capacity = size
    return self._p.len

  method storage_slice = @[]t
    return @self._p

  method! mutable_storage_slice = @![]t
    return @!self._p

  method first = t
    #? self.len > 0
    return self.[0]

  method last = t
    #? self.len > 0
    return self.[self.len - 1]

  method! reserve capacity:size = void
    if capacity > self.capacity
      nlang.heap.the!slice_resize @!self!_p capacity

  method! resize new_size:size = void
    if new_size > self.capacity
      let old_len = self.len
      nlang.heap.the!slice_resize @!self!_p (max new_size 2*self.capacity)
    else
      nlang.heap.the!slice_resize @!self!_p (max new_size self.capacity/2)
    self!_len = new_size

  method! resize_with new_size:size x:t = void
    let old_size = self.len
    self!resize new_size
    let r = self.range_index old_size new_size
    pfor n:size in r.iter
      self![n] = x

  method! clear = void
    nlang.heap.the!slice_free @!self!_p
    self!_len = 0

  method valid_index x:size = bool
    return x <= self.len

  method check_index x:size = void
    if not self.valid_index x
      c99.abort

  method valid_range r:@index_range = bool
    return r.end <= self.len

  method check_range r:@index_range = void
    if not self.valid_range r
      c99.abort

  method operator_get__ n:size = t
    return self._p.[n]

  method! operator_set__ n:size x:t = void
    self._p![n] = x

  method get_ref n:size = @t
    return self._p.get_ref n

  method all_index = index_range
    return self._p.all_index

  method range_index beg:size end:size ?by:?@size = index_range
    let r = range beg end by
    self.check_range @r
    return r

  method all = (random_element_range this)
    return (random_element_range this).mk self

  method! push x:t = void
    let old_size = self.len
    self!resize self.len+1
    self![old_size] = x

  method! pop = t
    #? self.len > 0
    let new_size = self.len - 1
    let tmp = self.[new_size]
    self!resize new_size
    return tmp

  (method! c:(random_container t)) extend r:@(random_element_range c) = void
    let offset = self.len
    self!reserve self.len+r.len
    pfor e in r.iter
      self!push e.
