from nlang import *

intf has_compare =
  method compare other:@this = i32


-- FIXME: obfuscated '_towc' generic argument name to avoid
-- collision with another generic argument name in the scope
-- of the type inheriting this. Proper compiler support is still
-- lacking.

type ordered_with_compare _towc:has_compare = comparable
  method operator_lt__ other:@this = bool
    return (this._towc.compare self other) < 0

  method operator_gt__ other:@this = bool
    return (_towc.compare self other) > 0

  method operator_le__ other:@this = bool
    return (_towc.compare self other) <= 0

  method operator_ge__ other:@this = bool
    return (_towc.compare self other) >= 0

  method operator_eq__ other:@this = bool
    return (_towc.compare self other) == 0

  method operator_ne__ other:@this = bool
    return (_towc.compare self other) != 0


intf bitwise_mask t =
  method operator_bwor__ other:this = this
  method operator_bwand__ other:this = this
  method operator_bwxor__ other:this = this
  method operator_bwnot__ = this
  method to_bits = t
  method! from_bits val:t = void

type bitwise_mask_impl _tbwmi = (bitwise_mask _tbwmi)
  _bits:_tbwmi

  method operator_bwor__ other:@this = this
    return this{{ _bits=self._bits | other._bits }}

  method operator_bwand__ other:@this = this
    return this{{ _bits=self._bits & other._bits }}

  method operator_bwxor__ other:@this = this
    return this{{ _bits=self._bits ^ other._bits }}

  method operator_bwnot__ = this
    return this{{ _bits=~self._bits }}

  method to_bits = _tbwmi
    return self._bits

  method! from_bits val:_tbwmi = void
    self._bits = val


type my_mask = (bitwise_mask u32)
  field _bits:(bitwise_mask_impl u32)
  delegate _bits (bitwise_mask u32)

  let VALUE = this{{ _bits=0x1 }}
  let OTHER_VALUE = this{{ _bits=0x2 }}
  let ALL = this{{ _bits=0xfffffff }}

type open_mode = (nlang.utils.bitwise_mask u32)
  field _bits:(nlang.utils.bitwise_mask_impl u32)
  delegate _bits (nlang.utils.bitwise_mask u32)

  let NONE = this{{ _bits=0 }}
  let S_IRWXU = this{{ _bits=00700 }}
  let S_IRUSR = this{{ _bits=00400 }}
  let S_IWUSR = this{{ _bits=00200 }}
  let S_IXUSR = this{{ _bits=00100 }}
  let S_IRWXG = this{{ _bits=00070 }}
  let S_IRGRP = this{{ _bits=00040 }}
  let S_IWGRP = this{{ _bits=00020 }}
  let S_IXGRP = this{{ _bits=00010 }}
  let S_IRWXO = this{{ _bits=00007 }}
  let S_IROTH = this{{ _bits=00004 }}
  let S_IWOTH = this{{ _bits=00002 }}
  let S_IXOTH = this{{ _bits=00001 }}
