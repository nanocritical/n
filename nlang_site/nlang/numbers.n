import nlang.meta
import nlang.literal
import nlang.unsafe
import nlang.show

intf comparable =
  method operator_eq__ other:@this = bool
  method operator_ne__ other:@this = bool

intf ordered = comparable
  method operator_lt__ other:@this = bool
  method operator_gt__ other:@this = bool
  method operator_le__ other:@this = bool
  method operator_ge__ other:@this = bool

intf bitwise_signed =
  let this_unsigned:nlang.meta.alias
  method additive_inverse = this
  method reinterpret_unsigned = this.this_unsigned

intf bitwise_unsigned =
  let this_signed:nlang.meta.alias
  method reinterpret_signed = this.this_signed

type void =

type u8 = ordered bitwise_unsigned nlang.show.show_numeric
  let this_signed:nlang.meta.alias = i8
  method reinterpret_signed = this.this_signed
  method to_u16 = u16
  method to_u32 = u32
  method to_u64 = u64

type u16 = ordered bitwise_unsigned nlang.show.show_numeric
  let this_signed:nlang.meta.alias = i16
  method trim_u8 = u8
  method reinterpret_signed = i16
  method to_u32 = u32
  method to_u64 = u64

type u32 = ordered bitwise_unsigned nlang.show.show_numeric
  let this_signed:nlang.meta.alias = i32
  method trim_u8 = u8
  method trim_u16 = u16
  method reinterpret_signed = i32
  method to_u64 = u64

type u64 = ordered bitwise_unsigned nlang.show.show_numeric
  let this_signed:nlang.meta.alias = i64
  method trim_u8 = u8
  method trim_u16 = u16
  method trim_u32 = u32
  method reinterpret_signed = i64

type size = ordered bitwise_unsigned nlang.show.show_numeric
  let this_signed:nlang.meta.alias = ssize
  method trim_u8 = u8
  method trim_u16 = u16
  method trim_u32 = u32
  method trim_u64 = u64
  method reinterpret_signed = ssize

type i8 = ordered bitwise_signed nlang.show.show_numeric
  let this_unsigned:nlang.meta.alias = u8
  method reinterpret_unsigned = u8
  method to_i16 = i16
  method to_i32 = i32
  method to_i64 = i64

type i16 = ordered bitwise_signed nlang.show.show_numeric
  let this_unsigned:nlang.meta.alias = u16
  method trim_i8 = i8
  method reinterpret_unsigned = u16
  method to_i32 = i32
  method to_i64 = i64

type i32 = ordered bitwise_signed nlang.show.show_numeric
  let this_unsigned:nlang.meta.alias = u32
  method trim_i8 = i8
  method trim_i16 = i16
  method reinterpret_unsigned = u32
  method to_i64 = i64

type i64 = ordered bitwise_signed nlang.show.show_numeric
  let this_unsigned:nlang.meta.alias = u64
  method trim_i8 = i8
  method trim_i16 = i16
  method trim_i32 = i32
  method reinterpret_unsigned = u64

type ssize = ordered bitwise_signed nlang.show.show_numeric
  method trim_i8 = i8
  method trim_i16 = i16
  method trim_i32 = i32
  method trim_i64 = i64
  method reinterpret_unsigned = size

type bool = ordered nlang.show.show


(fun t:ordered) max a:t b:t = t
  if a >= b
    return a
  else
    return b

(fun t:ordered) min a:t b:t = t
  if a <= b
    return a
  else
    return b

-- FIXME Specialize.
(fun t:ordered) compare a:t b:t = i32
  if a == b
    return 0
  elif a > b
    return 1
  else
    return -1
