import nlang.meta
import nlang.literal
import nlang.unsafe
import nlang.show

-- nlang.predicates contains more limited interfaces that capture weaker
-- orderings. If you're going to define comparison operators, they should
-- define a complete order. We don't want complex behaviors to hide behind
-- benign-looking operator syntax.

intf comparable =
  method operator_eq__ other:@this = bool
  method operator_ne__ other:@this = bool

intf ordered = comparable
  method operator_lt__ other:@this = bool
  method operator_gt__ other:@this = bool
  method operator_le__ other:@this = bool
  method operator_ge__ other:@this = bool

intf hashable =
  method! operator_hash__ = nlang.numbers.size

intf generalized_boolean =
  method operator_test__ = bool

intf additive_arithmetic = ordered
  method operator_plus__ other:@this = this
  method operator_minus__ other:@this = this
  method operator_neg__ = this

intf multiplicative_arithmetic = ordered
  method operator_times__ other:@this = this
  method operator_divide__ other:@this = this
  method operator_modulo__ other:@this = this

intf natural_arithmetic = additive_arithmetic multiplicative_arithmetic

intf bitwise_signed = hashable
  let this_unsigned:nlang.meta.alias
  method reinterpret_unsigned = this.this_unsigned

intf bitwise_unsigned = hashable
  let this_signed:nlang.meta.alias
  method reinterpret_signed = this.this_signed


type __native_arith =
  extern method operator_plus__ other:@this = this
  extern method operator_minus__ other:@this = this
  extern method operator_times__ other:@this = this
  extern method operator_divide__ other:@this = this
  extern method operator_modulo__ other:@this = this
  extern method operator_neg__ = this

type __native_bitwise = ordered
  extern method operator_rshift__ shift:size = this
  extern method operator_lshift__ shift:size = this
  extern method operator_bwand__ other:@this = this
  extern method operator_bwor__ other:@this = this
  extern method operator_bwxor__ other:@this = this
  extern method operator_bwnot__ = this

type __native_order = ordered
  extern method operator_eq__ other:@this = bool
  extern method operator_ne__ other:@this = bool
  extern method operator_lt__ other:@this = bool
  extern method operator_gt__ other:@this = bool
  extern method operator_le__ other:@this = bool
  extern method operator_ge__ other:@this = bool

declare nlang.stringmod =
  type string =

type __native_format_numeric = nlang.show.format_numeric
  extern method format_s ?flags:?@nlang.numbers.u32 ?width:?@nlang.numbers.size ?precision:?@nlang.numbers.size = nlang.stringmod.string
  extern method format_d ?flags:?@nlang.numbers.u32 ?width:?@nlang.numbers.size ?precision:?@nlang.numbers.size = nlang.stringmod.string
  extern method format_o ?flags:?@nlang.numbers.u32 ?width:?@nlang.numbers.size ?precision:?@nlang.numbers.size = nlang.stringmod.string
  extern method format_u ?flags:?@nlang.numbers.u32 ?width:?@nlang.numbers.size ?precision:?@nlang.numbers.size = nlang.stringmod.string
  extern method format_x ?flags:?@nlang.numbers.u32 ?width:?@nlang.numbers.size ?precision:?@nlang.numbers.size = nlang.stringmod.string
  extern method format_X ?flags:?@nlang.numbers.u32 ?width:?@nlang.numbers.size ?precision:?@nlang.numbers.size = nlang.stringmod.string
  extern method format_e ?flags:?@nlang.numbers.u32 ?width:?@nlang.numbers.size ?precision:?@nlang.numbers.size = nlang.stringmod.string
  extern method format_f ?flags:?@nlang.numbers.u32 ?width:?@nlang.numbers.size ?precision:?@nlang.numbers.size = nlang.stringmod.string
  extern method format_g ?flags:?@nlang.numbers.u32 ?width:?@nlang.numbers.size ?precision:?@nlang.numbers.size = nlang.stringmod.string
  extern method format_a ?flags:?@nlang.numbers.u32 ?width:?@nlang.numbers.size ?precision:?@nlang.numbers.size = nlang.stringmod.string
  extern method format_A ?flags:?@nlang.numbers.u32 ?width:?@nlang.numbers.size ?precision:?@nlang.numbers.size = nlang.stringmod.string

extern type void =

extern type u8 = natural_arithmetic bitwise_unsigned nlang.show.format_numeric
  inherit __native_arith
  inherit __native_bitwise
  inherit __native_order
  inherit __native_format_numeric
  let MAX:this
  let this_signed:nlang.meta.alias = i8
  extern method reinterpret_signed = this.this_signed
  extern method to_u16 = u16
  extern method to_u32 = u32
  extern method to_u64 = u64
  extern method operator_hash__ = size

extern type u16 = natural_arithmetic bitwise_unsigned nlang.show.format_numeric
  inherit __native_arith
  inherit __native_bitwise
  inherit __native_order
  inherit __native_format_numeric
  let MAX:this
  let this_signed:nlang.meta.alias = i16
  extern method trim_u8 = u8
  extern method reinterpret_signed = i16
  extern method to_u32 = u32
  extern method to_u64 = u64
  extern method operator_hash__ = size

extern type u32 = natural_arithmetic bitwise_unsigned nlang.show.format_numeric
  inherit __native_arith
  inherit __native_bitwise
  inherit __native_order
  inherit __native_format_numeric
  let MAX:this
  let this_signed:nlang.meta.alias = i32
  extern method trim_u8 = u8
  extern method trim_u16 = u16
  extern method reinterpret_signed = i32
  extern method to_u64 = u64
  extern method operator_hash__ = size

extern type u64 = natural_arithmetic bitwise_unsigned nlang.show.format_numeric
  inherit __native_arith
  inherit __native_bitwise
  inherit __native_order
  inherit __native_format_numeric
  let MAX:this
  let this_signed:nlang.meta.alias = i64
  extern method trim_u8 = u8
  extern method trim_u16 = u16
  extern method trim_u32 = u32
  extern method trim_size = size
  extern method reinterpret_signed = i64
  extern method operator_hash__ = size

extern type size = natural_arithmetic bitwise_unsigned nlang.show.format_numeric
  inherit __native_arith
  inherit __native_bitwise
  inherit __native_order
  inherit __native_format_numeric
  let MAX:this
  let this_signed:nlang.meta.alias = ssize
  extern method trim_u8 = u8
  extern method trim_u16 = u16
  extern method trim_u32 = u32
  extern method trim_u64 = u64
  extern method reinterpret_signed = ssize
  extern method operator_hash__ = size

extern type i8 = natural_arithmetic bitwise_signed nlang.show.format_numeric
  inherit __native_arith
  inherit __native_bitwise
  inherit __native_order
  inherit __native_format_numeric
  let MAX:this
  let MIN:this
  let this_unsigned:nlang.meta.alias = u8
  extern method reinterpret_unsigned = u8
  extern method to_i16 = i16
  extern method to_i32 = i32
  extern method to_i64 = i64
  extern method operator_hash__ = size

extern type i16 = natural_arithmetic bitwise_signed nlang.show.format_numeric
  inherit __native_arith
  inherit __native_bitwise
  inherit __native_order
  inherit __native_format_numeric
  let MAX:this
  let MIN:this
  let this_unsigned:nlang.meta.alias = u16
  extern method trim_i8 = i8
  extern method reinterpret_unsigned = u16
  extern method to_i32 = i32
  extern method to_i64 = i64
  extern method operator_hash__ = size

extern type i32 = natural_arithmetic bitwise_signed nlang.show.format_numeric
  inherit __native_arith
  inherit __native_bitwise
  inherit __native_order
  inherit __native_format_numeric
  let MAX:this
  let MIN:this
  let this_unsigned:nlang.meta.alias = u32
  extern method trim_i8 = i8
  extern method trim_i16 = i16
  extern method reinterpret_unsigned = u32
  extern method to_i64 = i64
  extern method operator_hash__ = size

extern type i64 = natural_arithmetic bitwise_signed nlang.show.format_numeric
  inherit __native_arith
  inherit __native_bitwise
  inherit __native_order
  inherit __native_format_numeric
  let MAX:this
  let MIN:this
  let this_unsigned:nlang.meta.alias = u64
  extern method trim_i8 = i8
  extern method trim_i16 = i16
  extern method trim_i32 = i32
  extern method trim_ssize = ssize
  extern method reinterpret_unsigned = u64
  extern method operator_hash__ = size

extern type ssize = natural_arithmetic bitwise_signed nlang.show.format_numeric
  inherit __native_arith
  inherit __native_bitwise
  inherit __native_order
  inherit __native_format_numeric
  let MAX:this
  let MIN:this
  extern method trim_i8 = i8
  extern method trim_i16 = i16
  extern method trim_i32 = i32
  extern method trim_i64 = i64
  extern method reinterpret_unsigned = size
  extern method operator_hash__ = size

extern type bool = ordered nlang.show.show generalized_boolean
  inherit __native_order
  method operator_test__ = bool
    return self.


(fun t:ordered) max a:t b:t = t
  if a >= b
    return a
  else
    return b

(fun t:ordered) min a:t b:t = t
  if a <= b
    return a
  else
    return b

-- FIXME Specialize.
(fun t:ordered) compare a:t b:t = i32
  if a == b
    return 0
  elif a > b
    return 1
  else
    return -1
