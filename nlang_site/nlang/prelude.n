import nlang.meta
import nlang.literal
import nlang.unsafe
from nlang.numbers import *

declare nlang.numbers =
  type i32 =
  type void =
  type size =
  type bool =

(fun t) _sizeof x:t = size


intf any =
intf trivial_ctor =
intf trivial_dtor =

intf copyable =
  method! operator_copy__ other:@this = nlang.numbers.void

intf trivial_copy = copyable

intf moveable =
  method! operator_move__ other:@!this = nlang.numbers.void

intf comparable =
  method operator_lt__ other:@this = nlang.numbers.bool
  method operator_gt__ other:@this = nlang.numbers.bool
  method operator_le__ other:@this = nlang.numbers.bool
  method operator_ge__ other:@this = nlang.numbers.bool
  method operator_eq__ other:@this = nlang.numbers.bool
  method operator_ne__ other:@this = nlang.numbers.bool


(fun t) optional ptr:?@t otherwise:t = t
  if ptr != null
    return (nlang.unsafe.nonnull_cast ptr).
  else
    return otherwise
