from nlang.meta import *
import nlang.literal
import nlang.unsafe
from nlang.numbers import *

declare nlang.numbers =
  extern type i32 =
  extern type void =
  extern type size =
  extern type bool =

(fun t) _sizeof x:t = nlang.numbers.size


intf any =
intf trivial_ctor =
intf trivial_dtor =

intf copyable =
  method! operator_copy__ other:@this = nlang.numbers.void

intf copyable_but_owned = copyable
  method! operator_copy__ other:@this = nlang.numbers.void

intf trivial_owned_copy = copyable_but_owned
intf trivial_copy = copyable
intf return_by_copy = trivial_copy

intf plain_old_data = trivial_ctor trivial_dtor trivial_copy

intf moveable =
  method! operator_move__ other:@!this = nlang.numbers.void

(fun t) optional ptr:?@t otherwise:t = t
  if ptr != null
    return (nlang.unsafe.nonnull_cast ptr).
  else
    return otherwise

(fun t r:(ref t) nr:(nullable_ref t)) optional_ref ptr:nr otherwise:r = r
  if ptr != null
    return (nlang.unsafe.nonnull_cast ptr)
  else
    return otherwise


type maybe t err =
  _error:err
  _value:t

  method valid = bool
    return not self._error

  method get = t
    #! eval self.valid
    return self._value

  method error = err
    return self._error
