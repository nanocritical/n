from nlang.prelude import *
from nlang.charmod import *
import nlang.show
from nlang.slicemod import *
import nlang.vectormod
import nlang.heap
import nlang.utils
import c99

let _EMPTY_CSTR:@u8

type string = nlang.show.show copyable comparable (random_container u8) nlang.utils.has_compare
  inherit nlang.utils.ordered_with_compare this

  _bytes:(nlang.vectormod.vector u8)

  method! ctor ?len:?@size = void
    self._bytes!resize (optional len 0) + 1
    self._bytes![0] = 0

  method compare other:@this = i32
    for a, b in zip self._bytes.all other._bytes.all
      let c = compare a. b.
      if c != 0
        return c
    return 0

  method len = size
    return self._bytes.len - 1

  method byte_len = size
    return self._bytes.len - 1

  method bytes = @(nlang.vectormod.vector u8)
    return @self._bytes

  method! extend x:@this = void
    let at = self.len
    let elements = x._bytes.all
    self._bytes!pop
    self._bytes!extend @elements

  method! push x:char = void
    let c, FIXME = x.to_ascii
    let last = self._bytes.len
    self._bytes!resize last+1
    self._bytes![last-1] = c
    self._bytes![last] = 0

  method! pop = char
    return char.from_ascii self._bytes!pop

  fun from_cstr cstr:@u8 = this
    let r = this.mk
      let cstr_len = (c99.strlen cstr) + 1
      let slice_cstr:(slice u8)
        slice_cstr!unsafe_reinit ((nlang.unsafe.cast @!u8 @u8) cstr) cstr_len
      let all_cstr = slice_cstr.all
      r._bytes!pop
      r._bytes!extend @all_cstr
    return r

  method cstr = @u8
    if self.len == 0
      return _EMPTY_CSTR
    else
      return nlang.unsafe.nonnull_cast self._bytes.storage_slice.unsafe_rawdata

  method to_s = this
    return self.

  method format_s ?flags:?@u32 ?width:?@size ?precision:?@size = this
    let plen = max (optional precision 0) self.len
    let pwidth = optional width 0
    let padding = 0:size
      if plen < pwidth
        padding = pwidth - plen
    let padding_range = range 0 padding

    let left = (optional flags 0) & nlang.show.LEFT_ALIGN != 0
    let r = this.mk
      if not left
        for n:size in padding_range.iter
          r!push ' ':char

      let start = 0:size
      let all = self._bytes.all
      r._bytes!pop
      r._bytes!extend @all

      if left
        for n:size in padding_range.iter
          r!push ' ':char

    return r
