from nlang.prelude import *


intf container t =
  method len = size
  method! clear = void
    #~ self.struct_change
  #~ prop non_empty
  #~ prop struct_change

intf forward_container t = (container t)
  method first = t
  method last = t
  #~ prop struct_change

intf random_container t = (forward_container t)
  method all = (element_iterator this)
    #~ retval.prevents self.struct_change

  method operator_get__ n:size = t
  method! operator_set__ n:size x:t = void
  method get_ref n:size = @t
  method len = size
  method check_index n:size = bool
    #~ eval retval self.valid_index n
  method all_index = index_range
  method range_index beg:size end:size ?by:?@size = index_range
  #~ prop valid_index
  #~ prop valid_range

intf index_iterator = copyable
  method all = index_range
  method get = size
  method has_next = bool
  method! next = bool
  method! reset = void

intf index_pair_iterator = copyable
  method all = index_range, index_range
  method get = size, size
  method has_next = bool
  method! next = bool
  method! reset = void


type index_range = trivial_copy
  _beg _end _by:size

  fun mk beg:size end:size ?by:?@size = this
    let r = this{{}}
      r!_beg = beg
      r!_end = end
      r!_by = optional by 1
    return r

  method begin = size
    return self._beg

  method end = size
    return self._end

  method by = size
    return self._by

  method sub beg:size end:size = this
    #? beg >= self.begin
    #? end <= self.end
    return this.mk beg end @self._by

  method with_offset offset:size = this
    return this.mk self.begin+offset self.end+offset @self._by

  method iter = index_range_iterator
    return index_range_iterator.mk self.

  method iter_zip_with_offset offset:size = index_range_iterator_with_offset
    return index_range_iterator_with_offset.mk self. offset


type index_range_iterator = index_iterator
  _r:index_range
  _pos:size

  fun mk r:index_range = this
    return this{{ _r=r _pos=r.begin }}

  method all = index_range
    return self._r

  method get = size
    return self._pos

  method has_next = bool
    return self._pos + self._r.by < self._r.end

  method! next = bool
    if not self.has_next
      return false
    else
      self!_pos = self._pos + self._r.by
      return true

  method! reset = void
    self!_pos = self._r.begin


type index_pair_range_iterator = index_pair_iterator
  _a _b:index_range_iterator

  fun mk ra:index_range rb:index_range = this
    return this{{ _a=ra.iter _b=rb.iter }}

  method all = index_range, index_range
    return self._a.all, self._b.all

  method get = size, size
    return self._a.get, self._b.get

  method has_next = bool
    return self._a.has_next and self._b.has_next

  method! next = bool
    if not self.has_next
      return false
    else
      self._a!next
      self._b!next
      return true

  method! reset = void
    self._a!reset
    self._b!reset


type index_range_iterator_with_offset = index_pair_iterator
  _iter:index_range_iterator
  _pos _offset:size

  fun mk r:index_range offset:size = this
    return this{{ _iter=r.iter _pos=r.begin _offset=offset }}

  method all = index_range, index_range
    let r = self._iter.all
    return r, r.with_offset self._offset

  method get = size, size
    return self._pos, self._pos + self._offset

  method has_next = bool
    return self._iter.has_next

  method! next = bool
    if not self.has_next
      return false
    else
      self._iter!next
      return true

  method! reset = void
    self._iter!reset


(type t) random_element_range c:(random_container t) =
  _v:@c
  _range:index_range

  fun mk v:@c = this
    return this{{ _v=v _range=v.all_index }}

  method container = @c
    return self._v

  method all_index = index_range
    return self._range

  method len = size
    return self._v.len

  method sub beg:size end:size = this
    #? beg >= self._range.begin
    #? end <= self._range.end
    let by = self._range.by
    let subr = self._range.sub beg end @by
    return this{{ _v=self._v _range=subr }}

  method iter = (random_element_iterator c)
    return (random_element_iterator c).mk self


(intf t) element_iterator c:(random_container t) =
  method all = (random_element_range c)
  method has_next = bool
  method! next = bool
  method get = @t
  method! reset = void


(type t) random_element_iterator c:(random_container t) = (element_iterator c)
  _er:@(random_element_range c)
  _iter:index_range_iterator

  fun mk r:@(random_element_range c) = this
    let rng = r.all_index
    return this{{ _er=r _iter=rng.iter }}

  method all = @(random_element_range c)
    return self._er

  method has_next = bool
    return self._iter.has_next

  method! next = bool
    if not self.has_next
      return false
    else
      self._iter!next
      return true

  method get = @t
    let ctnr = self._er.container
    return ctnr.get_ref self._iter.get

  method! reset = void
    self._iter!reset


(intf t1 t2) element_pair_iterator c1:(random_container t1) c2:(random_container t2) =
  method all = (random_element_range c1), (random_element_range c2)
  method has_next = bool
  method! next = void
  method get = @t1, @t2
  method! reset = void


(type t1 t2) random_element_pair_iterator c1:(random_container t1) c2:(random_container t2) = (element_pair_iterator c1 c2)
  _a:(random_element_iterator c1)
  _b:(random_element_iterator c2)

  fun mk r1:@(random_element_range c1) r2:@(random_element_range c2) = this
    return this{{ _a=r1.iter _b=r2.iter }}

  method all_index = @(random_element_range c1), @(random_element_range c2)
    let ra = self._a.all
    let rb = self._b.all
    return ra, rb

  method has_next = bool
    return self._a.has_next and self._b.has_next

  method! next = bool
    if not self.has_next
      return false
    else
      self._a!next
      self._b!next
      return true

  method get = @t1, @t2
    return self._a.get, self._b.get

  method! reset = void
    self._a!reset
    self._b!reset


fun range beg:size end:size ?by:?@size = index_range
  return index_range.mk beg end by

(fun t1 t2 c1:(random_container t1) c2:(random_container t2) rr1:(random_element_range c1) rr2:(random_element_range c2)) zip a:@rr1 b:@rr2 = (random_element_pair_iterator c1 c2)
  return (random_element_pair_iterator c1 c2).mk a b

fun zip_index a:index_range b:index_range = index_pair_range_iterator
  return index_pair_range_iterator.mk a b
