from nlang.prelude import *

intf index_iterator =
  method index = size
  method! next = bool

type index_range = index_iterator
  _pos _end _incr :size

  method! next = bool
    if self._pos > self._end - 1
      return false
    else
      self!_pos = self._pos + self._incr
      return true

  method index = size
    return self._pos

  method sub beg:size end:size ?by:?@size = this
    return this{{ _pos=beg _end=end _incr=(optional by 1) }}

intf index_pair_iterator =
  method index = size, size
  method! next = bool

intf element_iterator t =
  method! next = bool
  method get = t

intf element_pair_iterator t1 t2 =
  method! next = bool
  method get = t1, t2

intf container t =
  method len = size
  method! clear = void
    #~ self.struct_change
  method! reserve len:size = void
    #~ self.struct_change
  method all = (element_iterator t)
    #~ retval.prevents self.struct_change

  #~ prop non_empty
  #~ prop struct_change

intf forward_container t = (container t)
  -- from container t import *

  method len = size
  method! clear = void
    #~ self.struct_change
  method all = (element_iterator t)
    #~ retval.prevents self.struct_change

  method! push x:t = void
    #~ self.struct_change
  method! pop = t
    #~ self.struct_change
  method first = t
  method last = t
  method! resize newsize:size = void
    #~ self.struct_change
  method! resize_with newsize:size x:t = void
    #~ self.struct_change

  #~ prop struct_change

intf random_container t = (forward_container t)
  -- from forward_container t import *

  method len = size
  method! clear = void
    #~ self.struct_change
  method all = (element_iterator t)
    #~ retval.prevents self.struct_change

  method! push x:t = void
    #~ self.struct_change
  method! pop = t
    #~ self.struct_change
  method first = t
  method last = t
  method! resize newsize:size = void
    #~ self.struct_change
  method! resize_with newsize:size x:t = void
    #~ self.struct_change

  #~ prop struct_change

  method operator_get__ n:size = t
  method! operator_set__ n:size x:t = void
  method check_index n:size = bool
    #~ eval retval self.valid_index n
  method all_index = index_range

  #~ prop valid_index -- n:size
  #~ prop valid_range 

intf linked_container t = (container t)
  intf node =
    el :@!t
    method! next = this

  method! remove_node n:this.node = void
  method! insert_before n:this.node x:t = void
  method! insert_after n:this.node x:t = void
  method! replace n:this.node x:t = void
  method all_nodes = (this.node_range t)
