from n.builtins import *
from n.containers import *
from n.memory import *
import n.unsafe

inline struct Char =
	isa `Static_string_compatible `Show
	Code	:U32

inline Char fun From_static_string s:Static_string = this
	Assert <- s.Count == 1
	return { Code=(s.Get_char 0).Code }

inline Char fun From_ascii c:U8 = Char
	return { Code=c.To_u32 }

example <- Char.From_ascii 49 == '1':Char

inline Char met Show buf:@#`String_buffer
	buf#Push self.

intf `Static_string_compatible =
	fun From_static_string s:Static_string = final

intf `Const_string =
	isa `Static_string_compatible
-- export `Random_container
	met Count = Uint
	met All = Index_range
	met Get_char n:Uint = Char
	met Bytes_utf8 = []U8

intf `String =
	isa `Const_string
	met! Set_char n:Uint c:Char
	met! Fill c:Char r:Index_range

intf `String_buffer =
	isa `String
	met# Reserve Count:Uint
	met# Clear
	met# Push c:Char
	met# Pop = Char
	met# Append other:@`Const_string
	met# Copy at:Uint other:@`Const_string off:Uint Count:Uint

opaque struct Static_string =
	isa `Trivial_copy `Return_by_copy `Ordered_by_compare `Show
		\ `Static_string_compatible `Const_string `Trivial_ctor
	bytes	:[]U8

inline Static_string met# Unsafe_wrap bytes:@U8 Count:Uint
	let raw = (n.unsafe.Cast @U8 @#U8) bytes
	self.bytes#Unsafe_wrap raw Count

inline Static_string fun Mk bytes:@U8 Count:Uint = r:this
	r#Unsafe_wrap bytes Count
	return r

inline Static_string fun From_static_string s:Static_string = this
	return { bytes=s.bytes }

inline Static_string met Count = Uint
	return self.bytes.Count

inline Static_string met All = Index_range
	return self.bytes.All

inline Static_string met Get_char n:Uint = Char
	return Char.From_ascii self.bytes.[n].

inline Static_string met Bytes_utf8 = []U8
	return self.bytes

extern Static_string met Operator_compare other:@this = I32

Static_string met Show buf:@#`String_buffer
	buf#Reserve buf.Count + self.Count
	foreach i in self.All
		buf#Push (self.Get_char i)

example <- '1234'.Count == 4
example <- '1234'.All == Range 0 4
example <- '1234'.Get_char 3 == '4'.Get_char 0
example <- '1234'.Get_char 1 == '2':Char
example <- '1234' == '1234'
example <- '1234'.Bytes_utf8.Count == 4
example <- '1234'.Bytes_utf8.[0]. == 49


intf `Show =
	met Show buf:@#`String_buffer
