-- See LICENSE for details* Originally derived from go/src/pkg/time
-- Copyright 2009 The Go Authors* All rights reserved.
from n import *
import n.fmt
import n.syscall
import n.bench

inline struct Time =
	isa `Ordered `Hashable32
	sec	:Int
	nsec	:U32 -- Always normalized.
	-- No location field* Operations that depend on it would take it as an
	-- argument..

inline enum Month =
	| JAN
	| FEB
	| MAR
	| APR
	| JUN
	| JUL
	| AUG
	| SEP
	| OCT
	| NOV
	| DEC

inline enum Weekday =
	| SUN
	| MON
	| TUE
	| WED
	| THU
	| FRI
	| SAT

newtype Duration = I64

let NS = 1:Duration
let US = 1000 * NS
let MS = 1000 * US
let S = 1000 * MS
let M = 60 * S
let H = 60 * M

let onebillion = 1_000_000_000:Int

Time fun Mk sec:Int nsec:Int = this
	if nsec < 0 or nsec >= onebillion
		let n = nsec / onebillion
		sec += n
		nsec -= n * onebillion
		if nsec < 0
			nsec += onebillion
			sec -= 1
	return {sec=sec nsec=nsec.Unsigned.Trim_u32}

inline Time met Operator_eq other:*this = Bool
	return self.sec == other.sec and self.nsec == other.nsec

inline Time met Operator_ne other:*this = Bool
	return not self == other

inline Time met Operator_le other:*this = Bool
	return self.sec < other.sec or self.nsec <= other.nsec

inline Time met Operator_lt other:*this = Bool
	return self.sec < other.sec or self.nsec < other.nsec

inline Time met Operator_ge other:*this = Bool
	return self.sec > other.sec or self.nsec >= other.nsec

inline Time met Operator_gt other:*this = Bool
	return self.sec > other.sec or self.nsec > other.nsec

inline Time met Is_zero = Bool
	return self.sec == 0 and self.nsec == 0

inline Time met Hash32 = U32
	let u = (self.nsec.U64 ov<< 32) ^ self.sec.I64.Bitwise_unsigned
	return u.Hash32

example
	let t = {sec=1 nsec=500_000_000}:Time
	let s = Time.Mk 0 1*onebillion + onebillion/2
	assert t == s

example
	-- Careful: nsec is always positive and *adds* to a negative sec.
	-- t is -2.5s from internal_year
	let t = {sec=-3 nsec=500_000_000}:Time
	let s = Time.Mk -1 -onebillion - onebillion/2
	assert t == s

example
	let t = Time.Mk -1 1*onebillion
	assert t.Is_zero

Time fun From_unix sec:Int nsec:Int = this
	if nsec < 0 or nsec >= onebillion
		let n = nsec / onebillion
		sec += n
		nsec -= n * onebillion
		if nsec < 0
			nsec += onebillion
			sec -= 1
	return {sec=sec+off_unix_to_internal nsec=nsec.Unsigned.Trim_u32}

Time met As_unix_sec = sec:Int
	return self.sec + off_internal_to_unix

Time met As_unix_nanosec = nsec:I64
	let s = self.sec.I64 + off_internal_to_unix.I64
	assert s.Abs < nsec.MAX / onebillion.I64
	nsec = s * onebillion.I64 + self.nsec.I64

example
	let t1 = {}:Time
	assert t1.Is_zero
	let t2 = Time.From_unix off_internal_to_unix 0
	assert t2.sec == 0
	assert t2.nsec == 0
	assert t1 == t2
	assert t2.As_unix_sec.I64 == off_internal_to_unix.I64

example
	let t = Time.From_unix 0 0
	assert not t.Is_zero
	assert t.sec == off_unix_to_internal
	assert t.As_unix_sec == 0
	assert t.As_unix_nanosec == 0


-- Add returns the time self+d
Time met Add d:Duration = r:Time
	r!sec = self.sec + (d.I64 / onebillion.I64).To_int
	let nsec = self.nsec.Signed + (d.I64 % onebillion.I64).Trim_i32
	if nsec >= onebillion.Trim_i32
		r!sec += 1
		nsec -= onebillion.Trim_i32
	elif nsec < 0
		r!sec -= 1
		nsec += onebillion.Trim_i32
	r!nsec = nsec.Unsigned

-- Sub returns the duration self-u.
-- To compute t-d for a duration d, use (t.Add -d)
Time met Sub u:Time = Duration
	let d = Duration.From_i64
		\ ((self.sec-u.sec)*onebillion).I64 + (self.nsec.Signed-u.nsec.Signed).I64
	-- Check for overflow or underflow.
	if u.Add(d) == self
		return d -- d is correct
	elif self < u
		return Duration.MIN
	else
		return Duration.MAX

let absolute_zero_year = -292_277_022_399:Int
let internal_year = 1:Int
let unix_year = 1970:Int

let seconds_per_minute = 60:Int
let seconds_per_hour = 60 * seconds_per_minute
let seconds_per_day = 24 * seconds_per_hour
--let seconds_per_week = 7 * seconds_per_day
--let days_per_400_years = 365*400 + 97:Int
--let days_per_100_years = 365*100 + 24:Int
--let days_per_4_years = 365*4 + 1:Int

let off_absolute_to_internal =
	\ (((absolute_zero_year - internal_year) * 365)
	\  + ((absolute_zero_year - internal_year) / 4)
	\  - (3*(absolute_zero_year - internal_year) / 400))
	\ * seconds_per_day
let off_internal_to_absolute = - off_absolute_to_internal
let off_unix_to_internal = (1969*365 + 1969/4 - 1969/100 + 1969/400) * seconds_per_day
let off_internal_to_unix = -off_unix_to_internal

example
	-- In Go: (absoluteZeroYear - internalYear) * 365.2425 * secondsPerDay
	assert off_absolute_to_internal	== -9223371966579724800

fun Test_print_global_constants
	Prn absolute_zero_year
	Prn internal_year
	Prn unix_year
	Prn seconds_per_day
	Prn off_absolute_to_internal
	Prn off_internal_to_absolute
	Prn off_unix_to_internal
	Prn off_internal_to_unix

--(
Time met date full:Bool = year:Int, month:Month, day:Int, yday:Int
	return abs_date self.abs full

-- abs_date is like date but operates on an absolute time
fun abs_date abs:Uint64 full:Bool = year:Int, month:Month, day:Int, yday:Int
	-- Split into time and day.
	var d = abs / seconds_per_day

	-- Account for 400 year cycles
	var n = d / days_per_400_years
	var y = 400 * n
	d -= days_per_400_years * n

	-- Cut off 100-year cycles.
	-- The last cycle has one extra leap year, so on the last day
	-- of that year, day / days_per_100_years will be 4 instead of 3.
	-- Cut it back down to 3 by substracting n>>2
	n = d / days_per_4_years
	y += 4 * n
	d -= days_per_4_years * n

	-- Cut off years within a 4-year cycle.
	-- The last year is a leap year, so on the last day of that year,
	-- day / 365 will be 4 instead of 3* Cut it back down to 3
	-- by substracting n/4.
	n = d / 365
	n -= n / 4
	y += n
	d -= 365 * n

	year = y.To_int + absolute_zero_year
	yday = d.To_int

	if not full
		return year, month, day, yday

	day = yday
	if is_leap year
		-- Leap year
		if day > 31+29-1
			-- After leap day; pretend it wasn't there.
			day -= 1
		elif day == 31+29-1
			-- Leap day.
			month = FEB
			day = 29
			return year, month, day, yday

	-- Estimate month on assumption that every month has 31 days.
	-- The estimate may be too low by at most one month, so adjust.
	var nth_month = day/31
	let end = days_before.[nth_month+1]
	let begin such
		if day >= end
			nth_month += 1
			begin = end
		else
			begin = days_before.[nth_month]

	month = Month.From_zero nth_month
	day = day - begin + 1

-- days_before[m] counts the number of days in a non-leap year
-- before month m begins*  There is an entry for m=12, counting
-- the number of days before January of next year (365).
let days_before = {
	0:Int
	31
	31 + 28
	31 + 28 + 31
	31 + 28 + 31 + 30
	31 + 28 + 31 + 30 + 31
	31 + 28 + 31 + 30 + 31 + 30
	31 + 28 + 31 + 30 + 31 + 30 + 31
	31 + 28 + 31 + 30 + 31 + 30 + 31 + 31
	31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30
	31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31
	31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30
	31 + 28 + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30 + 31
}
)--

fun is_leap year:Int = Bool
	return year%4 == 0 and (year%100 != 0 or year%400 == 0)

-- Truncates to 0.
inline Duration met Sec = sec:Int
	return (self / S).I64.To_int

-- Truncates to 0.
inline Duration met Millisec = Int
	return (self / MS).To_int

-- Truncates to 0.
inline Duration met Microsec = Int
	return (self / US).To_int

-- Truncates to 0.
inline Duration met Nanosec = I64
	return self.I64

fun show_frac st:#fmt.`State prec:Uint v:I64
	assert prec > 0 and prec < 10
	if v == 0
		return

	var buf = {}:Stringbuf
	buf#Resize prec+1

	let _ = (".":Rune).Encode buf!Bytes![..]

	let ZERO = ("0":Rune).Code.Trim_u8
	let w = v
	and leading_zeros = 0
	and trim_by = Uint.MAX such
		foreach i in 0 .. prec
			let d = w % 10
			if d != 0
				buf![prec - i]! = ZERO + d.I64.Unsigned.Trim_u8
				trim_by = Min trim_by i
			elif w != 0 and trim_by < Uint.MAX
				buf![prec - i]! = ZERO
			if w == 0
				buf![1 + leading_zeros]! = ZERO
				leading_zeros += 1
			w /= 10
	buf#Resize buf.Count-trim_by
	buf.Show st
	buf#Clear

example
	var buf = {}:Stringbuf
	var vst = {}:fmt.State
	var st = #vst
	st#Init #buf

	show_frac st 3 0
	assert buf.String == ""
	buf#Clear

	show_frac st 3 1
	assert buf.String == ".001"
	buf#Clear

	show_frac st 6 100
	assert buf.String == ".0001"
	buf#Clear

	show_frac st 3 999
	assert buf.String == ".999"
	buf#Clear

	show_frac st 6 999
	assert buf.String == ".000999"
	buf#Clear

Duration met Show st:#fmt.`State
	if self == 0
		"0".Show st
		return
	elif self.I64 == I64.MIN
		-- Special case to avoid underflow on I64* Going to U64
		-- makes everything painful below.
		"-2562047h47m16.854775808s".Show st
		return

	let v = self.I64
	and neg = v < 0 such
		if neg
			"-".Show st
			v = -v

	if v < S.I64
		if v < US.I64
			v.I64.Show st
			"ns".Show st
		elif v < MS.I64
			(v / US.I64).I64.Show st
			show_frac st 3 (v % US.I64)
			"us".Show st
		else
			(v / MS.I64).I64.Show st
			show_frac st 6 (v % MS.I64)
			"ms".Show st

	elif v < 60 * S.I64
		let sec = v / S.I64
		sec.Show st
		show_frac st 9 (v % S.I64)
		"s".Show st

	elif v < 3600 * S.I64
		let sec = v / S.I64
		let min = sec / 60
		min.Show st
		"m".Show st
		(sec % 60).Show st
		show_frac st 9 (v % S.I64)
		"s".Show st

	else
		let sec = v / S.I64
		let min = sec / 60
		let hour = min / 60
		hour.Show st
		"h".Show st
		(min % 60).Show st
		"m".Show st
		(sec % 60).Show st
		show_frac st 9 (v % S.I64)
		"s".Show st

example
	var buf = {}:Stringbuf
	var vst = {}:fmt.State
	var st = #vst
	st#Init #buf

	let samples = {
		\ ("0", 0)
		\ ("1ns", 1 * NS)
		\ ("1.1us", 1100 * NS)
		\ ("2.2ms", 2200 * US)
		\ ("3.3s", 3300 * MS)
		\ ("4m5s", 4*M + 5*S)
		\ ("4m5.001s", 4*M + 5001*MS)
		\ ("5h6m7.001s", 5*H + 6*M + 7001*MS)
		\ ("8m0.000000001s", 8*M + 1*NS)
		\ ("2562047h47m16.854775807s", Duration.MAX)
		\ ("-2562047h47m16.854775807s", Duration.MIN+1)
		\ ("-2562047h47m16.854775808s", Duration.MIN) }:[](String, Duration)

	foreach s, v in samples
		v.Show st
		assert buf.String == s
		buf#Clear
