inline struct Slicebuf t:`Any =
	isa `Trivial_ctor `Copyable (`Random_container t)
	s	:[]!t	--::^Owned

inline Slicebuf met Cap = Uint
	return self.s.cap

inline Slicebuf met Count = Uint
	return self.s.cnt

inline Slicebuf met All = Range
	return self.s.All

inline Slicebuf met$ Buf = []$t
	return self$s

inline Slicebuf met# Clear
	self!s = self.s.[.. 0]
	self#Auto_shrink

inline Slicebuf met# Resize cnt:Uint
	assert cnt <= self.Count or t isa `Trivial_ctor
	if cnt <= self.Cap
		self!s = self.s.[.. cnt]
		self#Auto_shrink
	else
		self#Reserve cnt
		self!s = self.s.[.. cnt]

inline Slicebuf met# Push = @#t
	let nend = self.s.Count + 1
	self#Auto_grow nend
	self!s = self!s![.. nend]
	return self#Last

inline Slicebuf shallow met$ First = @$t
	return self$s$First

inline Slicebuf shallow met$ Last = @$t
	return self$s$Last

inline Slicebuf shallow met$ Operator_at n:Uint = r:@$t
	return self$s$Operator_at n

inline Slicebuf shallow met$ Operator_sub r:Range = []$t
	return self$s$Operator_sub r

inline Slicebuf met# Pop
	assert self.s.Count > 0
	self!s = self.s.[.. self.s.Count-1]
	self#Auto_shrink

inline Slicebuf met# Append s:[]t
	self#Auto_grow self.s.Count + s.Count
	self#s = self!s!Append s

inline Slicebuf met# Copy s:[]t
	self#Reserve s.Count
	self#s = self.s!Copy s
	self#Auto_shrink

-- The automatic growth of Slicebuf et al. slows down when the buffer is large.
inline fun growth_factor_shift n:Uint = Uint
	if n <= 256
		return 0
	elif n <= 16_384
		return 1
	elif n <= 65_536
		return 2
	else
		return 3

fun Buffer_auto_grown_size cap:Uint atleast:Uint = ret:Uint
	--post ret >= atleast
	if cap >= atleast
		return cap

	let shift = growth_factor_shift cap
	let min_newcap = cap + (cap >> shift)
	if atleast < min_newcap
		return min_newcap
	else
		return atleast

fun Buffer_auto_shrunk_size cap:Uint count:Uint = ret:Uint
	--pre count <= cap
	--post ret >= count
	if cap <= 16
		return cap

	let shift = growth_factor_shift count
	let max_newcap = cap - (cap >> (shift+1))
	if count <= max_newcap
		return max_newcap
	else
		return cap

example assert 16 == Buffer_auto_shrunk_size 16 0
example assert 9 == Buffer_auto_shrunk_size 17 0
example assert 128 == Buffer_auto_grown_size 128 127
example assert 128 == Buffer_auto_grown_size 128 128
example assert 256 == Buffer_auto_grown_size 128 129
example assert 256 == Buffer_auto_shrunk_size 256 255
example assert 256 == Buffer_auto_shrunk_size 256 129
example assert 128 == Buffer_auto_shrunk_size 256 128
example assert 256 == Buffer_auto_grown_size 256 155
example assert 256 == Buffer_auto_grown_size 256 256
example assert 512 == Buffer_auto_grown_size 256 257
example assert 385 == Buffer_auto_grown_size 257 258

inline Slicebuf met# Reserve atleast:Uint
	if self.s.cap >= atleast
		return
	Realloc @#self#s atleast

-- FIXME: unexport.
inline Slicebuf met# Auto_grow atleast:Uint
	let cap = self.s.cap
	if cap >= atleast
		return
	let newcap = Buffer_auto_grown_size cap atleast
	Realloc @#self#s newcap

-- FIXME: unexport.
inline Slicebuf met# Auto_shrink
	let cap = self.s.cap
	let newcap = Buffer_auto_shrunk_size cap self.s.cnt
	if newcap == cap
		return
	Realloc @#self#s newcap

example
	let v = {}:(Slicebuf Uint) such
		assert v.Count == 0
		foreach i in 0 .. 63
			(v#Push)! = i
		assert v.Cap == 64
		v#Reserve 112
		assert v.Count == 63
		assert v.Cap == 112 -- Reserve allocates exactly what you ask.
		let r = v.Count .. v.Cap
		assert r.Count == 112-63
		foreach i in r
			(v#Push)! = i
			assert v.Cap == 112
		assert v.Count == 112
		assert v.Cap == 112
		(v#Push)! = 1
		assert v.Cap == 224
		foreach _ in 0 .. (v.Count - 113)
			v#Pop
		assert v.Count == 113
		assert v.Cap == 224
		v#Pop
		assert v.Count == 112
		assert v.Cap == 112
