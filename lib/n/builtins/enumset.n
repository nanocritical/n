-- FIXME Use as little space as possible, and allow for enums with more than 64
-- elements* Over a certain threshold, we could switch to a non-bitmap
-- implementation* But should we, really? If you have a huge enum, use
-- something else than Enumset maybe.
inline struct Enumset T:`Enum =
	isa (`Universal_set T) `Show
	bits	:U64
	let ALL = {bits=(T.BWALL)}:this

Enumset fun From_slice c:[]T = this
	let r = {}:this such
		foreach x over c
			r!bits |= (this.Internal_mask_value x.Tag.U64)
	return r
Enumset fun From_bits bits:U64 = this
	let r = {}:this such
		r!bits = bits
	return r
Enumset fun Internal_mask_value x:U64 = U64
	if T isa `Trivial_ctor
		-- as 0 is a valid value
		return 1 ov<< x.To_uint
	else
		-- as values start from 1
		return 1 ov<< (x.To_uint - 1)
Enumset met Bits = U64
	return self.bits
Enumset met Count = Uint
	return math.Bit_popcount self.bits
Enumset met Operator_in x:*T = Bool
	return self.bits & (this.Internal_mask_value x.Tag.U64) != 0
Enumset met Operator_bwor other:*this = this
	return {bits=self.bits | other.bits}
Enumset met Operator_bwxor other:*this = this
	return {bits=self.bits ^ other.bits}
Enumset met Operator_bwand other:*this = this
	return {bits=self.bits & other.bits}
Enumset met Operator_bwnot = this
	return this.ALL & {bits=~self.bits}
Enumset met! Operator_assign_bwor other:*this
	self!bits |= other.bits
Enumset met! Operator_assign_bwxor other:*this
	self!bits ^= other.bits
Enumset met! Operator_assign_bwand other:*this
	self!bits &= other.bits
Enumset met Operator_eq other:*this = Bool
	return self.bits == other.bits
Enumset met Operator_ne other:*this = Bool
	return self.bits != other.bits
Enumset met Operator_le other:*this = Bool
	return (self.bits & other.bits) == self.bits
Enumset met Operator_lt other:*this = Bool
	return self <= other and self != other
Enumset met Operator_gt other:*this = Bool
	return self >= other and self != other
Enumset met Operator_ge other:*this = Bool
	return (self.bits & other.bits) == other.bits
Enumset met Iter = r:(Enumset_iterator this.T)
	r!Internal_init self

Enumset met! Add x:*T = added:Bool
	added = x in self
	self! |= {x*}
Enumset met! Add_all other:*this = added_all:Bool
	added_all = (self & other) == {}
	self! |= other
Enumset met! Remove x:*T = removed:Bool
	removed = x in self
	self! &= ~{x*}
Enumset met! Remove_all other:*this = removed_all:Bool
	removed_all = (self & other) == self
	self! &= ~other
Enumset met! Intersect other:*this
	self! &= other
Enumset met! Symmetric_difference other:*this
	self! ^= other

Enumset met Show st:#`Fmt_state
	"{".Show st
	let it = self.Iter
	var i = 0:Uint
	for e over it
		if i > 0
			" ".Show st
		e.Show st
		i += 1
	"}".Show st

inline struct Enumset_iterator T:`Enum =
	isa (`Iterator T)
	m	:(Enumset T)
	ffs	:Uint

Enumset_iterator met! Internal_init m:*(Enumset T)
	self!m = m*
	self!ffs = math.Bit_ffs self.m.Bits

Enumset_iterator met! Next = ?T
	if self.ffs == 0
		return nil
	let val = if T isa `Trivial_ctor -> self.ffs-1;; else self.ffs
	let r = T.From_tag <- (Force_convert T.Tag_type) val
	self!m &= ~{r}
	self!ffs = math.Bit_ffs self.m.Bits
	return r
