intf `Heap =
	isa (bench.`Observable_of Heap_stats)
	met! Alloc_raw bytecount:Uint = #U8
	met! Free_raw p:?#U8 bytecount:Uint
	met! Realloc_raw s:#U8 old_bytecount:Uint bytecount:Uint = #U8

globalenv Heap:!`Heap

fun Install_sysheap sysheader:#(Envheader !`Heap) within Heap
	Globalenv_install Heap sysheader

(fun t:`Any) Alloc = #t within Heap
	return (Cast #U8 #t) <- Heap!Alloc_raw (sizeof t)

-- FIXME(e): Free should really zero the ref.
(fun t:`Any) Free p:?#t within Heap
	if not p?
		return

	if t isa `Trivial_dtor
		noop
	elif t isa `Default_dtor
		p#Dtor
	else
		assert false
	Heap!Free_raw ((Cast #t #U8) p) (sizeof t)

(fun t:`Any) Alloc_opaque = #t within Heap
	let s = t.Sizeof
	assert s?
	return (Cast #U8 #t) <- Heap!Alloc_raw s

(fun t:`Any) Free_opaque p:?#t within Heap
	if not p?
		return

	if t isa `Trivial_dtor
		noop
	elif t isa `Default_dtor
		p#Dtor
	else
		assert false
	let s = t.Sizeof
	assert s?
	Heap!Free_raw ((Cast #t #U8) p) s

-- If t isn't `Moveable, only two cases are supported:
--	s.Cap == 0 or cap == 0
(fun t:`Any) Realloc s:#[!]t cap:Uint within Heap
	if cap == s.cap
		return

	let old_raw = s#Unsafe_rawdata
	and old_bytecap = s#Bytecap
	and bytecap = cap * (sizeof t)
	and old_cnt = s.cnt
	and cnt = Min old_cnt cap

	if t isa `Trivial_move
		if t isa `Trivial_dtor
			noop
		elif t isa `Default_dtor
			if cnt < old_cnt
				foreach i in cnt .. old_cnt
					s![i]#Dtor
		else
			assert false

		let raw = Heap!Realloc_raw old_raw old_bytecap bytecap
		s# = {dat=((Cast #U8 #t) raw) cnt=cnt cap=cap}

	elif t isa `Moveable
		if t isa `Trivial_dtor
			noop
		elif t isa `Default_dtor
			if cnt < old_cnt
				foreach i in cnt .. old_cnt
					s![i]#Dtor
		else
			assert false

		-- We allocate a new slice, move the elements to it, and
		-- free the old one.
		-- We cannot use realloc(3) to try to get a resized slice at
		-- the same memory location. We would need a realloc that fails
		-- if it cannot grow without moving the array, so we can fall
		-- back to the current approach only if needed. Another reason
		-- to have our own (tweaked) allocator some day.

		if bytecap == 0
			s# = {}
			let _ = Heap!Realloc_raw old_raw old_bytecap 0

		else
			let old = s*
			let raw = Heap!Realloc_raw nil 0 bytecap
			s# = {dat=((Cast #U8 #t) raw) cnt=cnt cap=cap}
			foreach i in s.All
				s![i]# = old![i]#Move
			let _ = Heap!Realloc_raw old_raw old_bytecap 0

	else
		if bytecap == 0
			if t isa `Trivial_dtor
				noop
			elif t isa `Default_dtor
				if cnt < old_cnt
					foreach i in cnt .. old_cnt
						s![i]#Dtor
			else
				assert false

			let raw = Heap!Realloc_raw old_raw old_bytecap 0
			s# = {dat=nil cnt=0 cap=0}

		elif old_bytecap == 0
			let raw = Heap!Realloc_raw old_raw 0 cap
			s# = {dat=raw cnt=0 cap=cap}
		else
			assert false


inline struct Heap_stats =
	isa bench.`Measure
	Allocated	:Int
	Freed		:Int
	Max_size	:Int

Heap_stats met Operator_plus other:*this = r:this
	r!Allocated = self.Allocated + other.Allocated
	r!Freed = self.Freed + other.Freed
	r!Maintain

Heap_stats met Operator_minus other:*this = r:this
	r!Allocated = self.Allocated - other.Allocated
	r!Freed = self.Freed - other.Freed
	r!Maintain

Heap_stats met Operator_uminus = r:this
	r!Allocated = - self.Allocated
	r!Freed = - self.Freed
	r!Maintain

Heap_stats met Size = Int
	return self.Allocated - self.Freed

Heap_stats met! Maintain
	self!Max_size = Max self!Max_size self.Size
