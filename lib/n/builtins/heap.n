intf `Heap =
	isa (`Environment `Heap)
	met! Alloc_raw bytecount:Uint = @#U8
	met! Free_raw p:?@#U8 bytecount:Uint
	met! Realloc_raw s:@#U8 old_bytecount:Uint bytecount:Uint = @#U8

extern inline fun Internal_realloc0 p:?@#U8 old_bytecount:Uint bytecount:Uint = @#U8
extern inline fun Internal_free p:?@#U8 bytecount:Uint

struct Sysheap =
	isa `Heap
	dummy	:U8

Sysheap met! Alloc_raw bytecount:Uint = @#U8
	return Internal_realloc0 null 0 bytecount

Sysheap met! Free_raw raw:?@#U8 bytecount:Uint
	return Internal_free raw bytecount

Sysheap met! Realloc_raw raw:@#U8 old_bytecount:Uint bytecount:Uint = @#U8
	return Internal_realloc0 raw old_bytecount bytecount

globalenv Heap:@!`Heap

(fun t:`Any) Alloc = @#t within Heap
	return (Cast @#U8 @#t) <- Heap!Alloc_raw (sizeof t)

(fun t:`Any) Free p:@#t within Heap
	Heap!Free_raw ((Cast @#t @#U8) p) (sizeof t)

(fun t:`Any) Realloc s:@#[]!t count:Uint within Heap
	let old_raw = s#Unsafe_rawdata
	and old_bytecount = s#Bytecount
	and bytecount = count * (sizeof t)
	let raw = Heap!Realloc_raw old_raw old_bytecount bytecount
	s# = {dat=((Cast @#U8 @#t) raw) cnt=s.cnt cap=count}
