intf `Heap =
	isa (bench.`Observable_of Heap_stats)
	met! Alloc_raw bytecount:Uint = #U8
	met! Free_raw p:?#U8 bytecount:Uint
	met! Realloc_raw s:#U8 old_bytecount:Uint bytecount:Uint = #U8

globalenv Heap:!`Heap

fun Install_sysheap sysheader:#(Envheader !`Heap) within Heap
	Globalenv_install Heap sysheader

(fun t:`Any) Alloc = #t within Heap
	return (Cast #U8 #t) <- Heap!Alloc_raw (sizeof t)

(fun t:`Any) Free p:?#t within Heap
	if not p?
		return

	if t isa `Trivial_dtor
		noop
	elif t isa `Default_dtor
		p#Dtor
	else
		assert false
	Heap!Free_raw ((Cast #t #U8) p) (sizeof t)

(fun t:`Any) Realloc s:#[!]t cap:Uint within Heap
	let old_raw = s#Unsafe_rawdata
	and old_bytecap = s#Bytecap
	and bytecap = cap * (sizeof t)

	if t isa `Trivial_copy
		let raw = Heap!Realloc_raw old_raw old_bytecap bytecap
		s# = {dat=((Cast #U8 #t) raw) cnt=s.cnt cap=cap}
	elif old_bytecap == 0
		let raw = Heap!Realloc_raw old_raw old_bytecap bytecap
		s# = {dat=((Cast #U8 #t) raw) cnt=s.cnt cap=cap}
	elif bytecap == 0
		foreach i in s.All
			if t isa `Default_dtor
				s![i]#Dtor
		let raw = Heap!Realloc_raw old_raw old_bytecap bytecap
		s# = {dat=((Cast #U8 #t) raw) cnt=s.cnt cap=cap}
	elif t isa `Copyable
		let old = s*
		let raw = Heap!Realloc_raw nil 0 bytecap
		s# = {dat=((Cast #U8 #t) raw) cnt=s.cnt cap=cap}
		foreach i in old.All
			s![i]#Copy_ctor old.[i]
		let _ = Heap!Realloc_raw old_raw old_bytecap 0
	else
		assert false


inline struct Heap_stats =
	isa bench.`Measure
	Allocated	:Int
	Freed		:Int
	Max_size	:Int

Heap_stats met Operator_plus other:*this = r:this
	r!Allocated = self.Allocated + other.Allocated
	r!Freed = self.Freed + other.Freed
	r!Maintain

Heap_stats met Operator_minus other:*this = r:this
	r!Allocated = self.Allocated - other.Allocated
	r!Freed = self.Freed - other.Freed
	r!Maintain

Heap_stats met Operator_uminus = r:this
	r!Allocated = - self.Allocated
	r!Freed = - self.Freed
	r!Maintain

Heap_stats met Size = Int
	return self.Allocated - self.Freed

Heap_stats met! Maintain
	self!Max_size = Max self!Max_size self.Size
