-- See LICENSE for details. Partially derived from go/src/pkg/strings
-- Copyright 2009 The Go Authors. All rights reserved.

intf `Hashable32 =
	met Hash32 = U32

intf `String_compatible =
	fun From_string s:String = final

intf `String =
	isa `String_compatible `Ordered `Hashable32 `Copyable
		\ (`Random_container U8) `Show
	fun From_bytes s:[]U8 = final--::(^Captures s)
	met Bytes = []U8
	met Operator_at n:Uint = U8
	met Operator_sub r:Range = String

--	met Begins_with s:String = Bool
--	met Ends_with s:String = Bool
--	met Index s:String = Bool, Uint
--	met Index_all s:String = Bool, []Uint
--	met Find s:String = Bool, String
--	met Find_all s:String = Bool, []String
--	met Strip any:String = String
--	met Strip_left any:String = String
--	met Strip_right any:String = String
--	met Split ?sep:?@String ?max:?@Uint = []String

intf `Stringbuf =
	isa `String (`Io_writer U8)
	met# Clear
	met# Push c:U8
	met# Pop = U8
	met# Append b:[]U8
	met# Copy b:[]U8

intf `Show =
	met Show st:@#`Fmt_state

inline struct Rune =
	isa `String_compatible `Show `Hashable32
	Code	:U32

inline Rune fun From_string s:String = this
	let r, _ = Rune.Decode s.bytes
	return r

inline Rune fun Decode b:[]U8 = this, Uint
	assert b.Count >= 1
	-- FIXME: utf8
	return { Code=b.First.To_u32 }, 1

inline Rune fun Decode_last b:[]U8 = this, Uint
	assert b.Count >= 1
	-- FIXME: utf8
	return { Code=b.Last.To_u32 }, 1

inline Rune fun From_ascii c:U8 = Rune
	return { Code=c.To_u32 }

inline Rune met Encode z:[]!U8 = Uint
	assert z.Cap >= 1
	z = z.[.. 1]
	z![0]! = self.Code.Trim_u8
	-- FIXME: utf8
	return 1

inline Rune met Hash32 = U32
	return self.Code

example assert Rune.From_ascii 49 == '1'

inline Rune met Show st:@#`Fmt_state
	--let s = {}:[4]U8 ...
	self.Code.Show st

inline struct String =
	isa `String `Return_by_copy `Trivial_copy_but_owned
	bytes	:[]U8

inline String fun From_string s:String = this
	return s

inline String fun From_bytes b:[]U8 = this--::(^Captures s)
	return {bytes=b} -- cap b.Count]}

inline String met All = Range
	return self.bytes.All

inline String met Bytes = []U8
	return self.bytes

inline String met Count = Uint
	return self.bytes.Count

inline String met Operator_at n:Uint = U8
	return self.bytes.[n].

inline String met Operator_sub r:Range = String
	return String.From_bytes <- self.bytes.Operator_sub r

inline String met Operator_compare other:@this = Int
	return Bytes_compare self.bytes other.bytes
inline String met Operator_eq other:@this = Bool
	if self === other
		return true
	return self.Operator_compare other == 0
inline String met Operator_ne other:@this = Bool
	if self === other
		return false
	return self.Operator_compare other != 0
inline String met Operator_le other:@this = Bool
	if self === other
		return true
	return self.Operator_compare other <= 0
inline String met Operator_lt other:@this = Bool
	if self === other
		return false
	return self.Operator_compare other < 0
inline String met Operator_gt other:@this = Bool
	if self === other
		return false
	return self.Operator_compare other > 0
inline String met Operator_ge other:@this = Bool
	if self === other
		return true
	return self.Operator_compare other >= 0

inline String met Show st:@#`Fmt_state
	let _ = st#Write self.bytes

example assert 'a' < 'b'
example assert 'b' > 'a'
example assert 'a' == 'a'
example assert 'a' < 'aa'
example assert 'b' > 'aa'
example assert 'aa' > 'a'
example assert 'aa' < 'b'

let _M0 = 2860486313:U32
let _M1 = 3267000013:U32

fun Hash b:[]U8 = U32
	let hash = _M0 such
		foreach x in b
			hash = (hash ^ x.To_u32) ov* _M1
	return hash

example assert Hash "".Bytes == _M0
example assert Hash "abc".Bytes == 2407100781

inline String met Hash32 = U32
	return Hash self.bytes

inline String met Begins_with s:String = Bool
	if s.bytes.Count > self.bytes.Count
		return false
	let a = self.bytes
	and b = s.bytes
	and i = 0 such
		while i < b.Count
			let ra, cnt = Rune.Decode a
			let rb, _ = Rune.Decode b
			if ra != rb
				return false
			a = a.[cnt ..]
			b = b.[cnt ..]
			i += cnt
	return true

inline String met Ends_with s:String = Bool
	if s.bytes.Count > self.bytes.Count
		return false
	let a = self.bytes
	and b = s.bytes
	and i = 0 such
		while i < b.Count
			let ra, cnt = Rune.Decode_last a
			let rb, _ = Rune.Decode_last b
			if ra != rb
				return false
			a = a.[.. a.Count - cnt]
			b = b.[.. b.Count - cnt]
			i += cnt
	return true

extern String met Index_byte sep:U8 = Int
extern String met Last_index_byte sep:U8 = Int

example assert "abcdef".Index_byte "a".[0] == 0
example assert "abcdef".Index_byte "f".[0] == 5
example assert "abcdef".Index_byte "z".[0] == -1
example assert "abcdef".Index_byte "\0".[0] == -1
example assert "abcdef".Last_index_byte "z".[0] == -1
example assert "abcdef".Last_index_byte "\0".[0] == -1
example assert "abccba".Last_index_byte "a".[0] == 5
example assert "abccba".Last_index_byte "c".[0] == 3
example assert "abccba".Index_byte "c".[0] == 2

-- Prime base used in the Rabin-Karp algorithm.
let rk_prime = 16777619:U32

fun rk_hash b:[]U8 = U32, U32
	let hash = 0 such
		foreach x in b
			hash = hash ov* rk_prime ov+ x.To_u32
	let pow = 1
	and sq = rk_prime
	and i = b.Count such
		while i != 0
			if i & 1 != 0
				pow ov*= sq
			sq ov*= sq
			i >>= 1
	return hash, pow

String met Index sep:String = Int
	let cnt = self.Count
	let n = sep.Count
	if n == 0
		return 0
	elif n == 1
		return self.Index_byte sep.[0]
	elif n == cnt
		if self == sep
			return 0
		return -1
	elif n > cnt
		return -1

	let hashsep, pow = rk_hash sep.Bytes
	let h = 0 such
		foreach i in 0 .. n
			h = h ov* rk_prime ov+ self.[i].To_u32
		if h == hashsep and self.[.. n] == sep
			return 0
		foreach i in n .. cnt
			h ov*= rk_prime
			h ov+= self.[i].To_u32
			h ov-= pow ov* self.[i-n].To_u32
			i += 1
			if h == hashsep and self.[i-n .. i] == sep
				return (i - n).Signed
	return -1

example assert "abcdef".Index "" == 0
example assert "abcdef".Index "b" == 1
example assert "abcdef".Index "abcdef" == 0
example assert "abcdef".Index "abcdez" == -1
example assert "abcdef".Index "abcdefg" == -1
example assert "abcdef".Index "z" == -1
example assert "abcdef".Index "abc" == 0
example assert "abcdef".Index "def" == 3

String met Index_all s:String = Bool, []Uint
String met Find s:String = Bool, String
String met Find_all s:String = Bool, []String
String met Strip any:String = String
String met Strip_left any:String = String
String met Strip_right any:String = String
String met Split ?sep:?@String ?max:?@Uint = []String

example assert '1234'.Bytes.Count == 4
example assert '1234'.Bytes.All == 0 .. 4
example assert '1234'.Bytes.[3] == '4'.[0]
example assert '1234'.Bytes.[1].To_u32 == ('2':Rune).Code
example assert '1234' == '1234'
example assert '1234'.Bytes.Count == 4
example assert '1234'.Bytes.[0] == 49

inline struct Stringbuf =
	isa `Stringbuf
	bytes	:[]!U8	--::^Owned

inline Stringbuf fun From_string s:String = this
	let r = {}:this such
		r#Append s.Bytes
	return r

inline Stringbuf met# Copy_ctor other:Stringbuf
	self#Copy other.bytes

inline Stringbuf fun From_bytes s:[]U8 = this
	let r = {}:this such
		r#Reserve s.Count
		r#bytes = r!bytes!Copy s
	return r

inline Stringbuf met Bytes = []U8
	return self.bytes

inline Stringbuf met All = Range
	return self.bytes.All

inline Stringbuf met Str = String
	return String.From_bytes self.bytes

inline Stringbuf met Cap = Uint
	return self.bytes.cap

inline Stringbuf met Count = Uint
	return self.bytes.cnt

inline Stringbuf met$ Operator_at n:Uint = @$U8
	return self$bytes$[n]

inline Stringbuf met$ Operator_sub r:Range = []$U8
	return self$bytes$Operator_sub r

inline Stringbuf met Operator_compare other:@this = Int
	return Bytes_compare self.bytes other.bytes

inline Stringbuf met Operator_eq other:@this = Bool
	if self === other
		return true
	return self.Operator_compare other == 0
inline Stringbuf met Operator_ne other:@this = Bool
	if self === other
		return false
	return self.Operator_compare other != 0
inline Stringbuf met Operator_le other:@this = Bool
	if self === other
		return true
	return self.Operator_compare other <= 0
inline Stringbuf met Operator_lt other:@this = Bool
	if self === other
		return false
	return self.Operator_compare other < 0
inline Stringbuf met Operator_gt other:@this = Bool
	if self === other
		return false
	return self.Operator_compare other > 0
inline Stringbuf met Operator_ge other:@this = Bool
	if self === other
		return true
	return self.Operator_compare other >= 0

inline Stringbuf met Show st:@#`Fmt_state
	let _ = st#Write self.bytes

inline Stringbuf met Hash32 = U32
	return Hash self.bytes

inline Stringbuf met# Clear
	self!bytes = self.bytes.[.. 0]
	self#Auto_shrink

inline Stringbuf met# Resize cnt:Uint
	if cnt <= self.Cap
		self!bytes = self.bytes.[.. cnt]
		self#Auto_shrink
	else
		self#Reserve cnt
		self!bytes = self.bytes.[.. cnt]

inline Stringbuf met# Push c:U8
	let nend = self.bytes.Count + 1
	self#Reserve nend
	self!bytes = self.bytes.[.. nend]
	self!bytes![nend - 1]! = c

inline Stringbuf met# Pop = U8
	assert self.Bytes.Count > 0
	let c = (self.bytes.Last).
	self!bytes = self.bytes.[.. self.bytes.Count-1]
	self#Auto_shrink
	return c

inline Stringbuf met# Append b:[]U8
	self#Reserve self.bytes.Count + b.Count
	self#bytes = self!bytes!Append b

inline Stringbuf met# Copy b:[]U8
	self#Reserve b.Count
	self#bytes = self.bytes!Copy b

inline Stringbuf met# Reserve atleast:Uint
	if self.bytes.cap >= atleast
		return
	Realloc @#self#bytes atleast

inline Stringbuf met# Cat ?sep:?@String ...v:(Vararg @`String)
	let sepcnt = sep?.Count else 0
	for b in v
		self#Reserve self.bytes.Count + sepcnt + b.Count
		self#bytes = self!bytes!Append b.Bytes
		if sep?
			self#bytes = self!bytes!Append sep.Bytes

-- FIXME: unexport.
inline Stringbuf met# Auto_grow atleast:Uint
	let cap = self.bytes.cap
	if cap >= atleast
		return
	let newcap = Buffer_auto_grown_size cap atleast
	Realloc @#self#bytes newcap

-- FIXME: unexport.
inline Stringbuf met# Auto_shrink
	let cap = self.bytes.cap
	let newcap = Buffer_auto_shrunk_size cap self.bytes.cnt
	if newcap == cap
		return
	Realloc @#self#bytes newcap

inline Stringbuf met# Write b:[]U8 = []U8, Error --[]U8::|{}, Error::|OK
	self#Reserve self.Count + b.Count
	self#bytes = self#bytes#Append b
	return {}, OK

inline Stringbuf met# Pr ?sep:?@String ...v:(Vararg ?@`Show)
	let separator = Optional_ref sep " "
	and st = {}:Fmt_state such
		st#Init self
		for x in v
			if x === null
				"(null)".Show @#st
			else
				x.Show @#st
			if v.Count_left > 0
				separator.Show @#st

inline Stringbuf met# Prn ?sep:?@String ...v:(Vararg ?@`Show)
	self#Pr sep=sep ...v
	self#Append "\n".Bytes
