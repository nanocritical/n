-- See LICENSE for details* Partially derived from go/src/pkg/strings
-- Copyright 2009 The Go Authors* All rights reserved.

intf `String_compatible =
	fun From_string s:String = final

intf `String =
	isa `String_compatible `Ordered `Hashable32 `Copyable
		\ (`Random_container U8) `Show
	fun From_bytes s:[]U8 = final--::(^Captures s)
	met String = String
	met Operator_at n:Uint = U8
	met Operator_sub r:Range = String
	met First = U8
	met Last = U8

--	met Begins_with s:String = Bool
--	met Ends_with s:String = Bool
--	met Index s:String = Bool, Uint
--	met Index_all s:String = Bool, []Uint
--	met Find s:String = Bool, String
--	met Find_all s:String = Bool, []String
--	met Strip any:String = String
--	met Strip_left any:String = String
--	met Strip_right any:String = String
--	met Split ?sep:?*String ?max:?*Uint = []String

intf `Stringbuf =
	isa `String io.`Writer
	met# Clear
	met# Push c:U8
	met# Pop = U8
	met# Append b:[]U8
	met# Copy_from b:[]U8

-- Show is autointf generated method in many types* Therefore the prototype of
-- Show must use type names visibile to everybody, and others may not have
-- imported 'fmt'.
alias `Fmt_state = fmt.`State

intf `Show =
	met Show st:#`Fmt_state

inline struct Rune =
	isa `String_compatible `Show `Hashable32
	Code	:U32

	let ERROR = {Code=0xfffd}:Rune
	let ERROR_STRING = "\xef\xbf\xbd"

inline Rune fun From_string s:String = this
	let r, _ = Rune.Decode s.bytes
	return r

inline Rune fun Decode b:[]U8 = this, []U8
	assert b.Count >= 1
	-- FIXME: utf8
	return { Code=b.First.U32 }, b.[1 ..]

inline Rune fun Decode_last b:[]U8 = this, Uint
	assert b.Count >= 1
	-- FIXME: utf8
	return { Code=b.Last.U32 }, 1

inline Rune fun From_ascii c:U8 = Rune
	return { Code=c.U32 }

inline Rune met Bytecount = Uint
	return 1

inline Rune met Encode z:[!]U8 = [!]U8
	if self == ERROR
		assert z.Cap >= 3
		z![0]! = ERROR_STRING.[0]
		z![1]! = ERROR_STRING.[1]
		z![2]! = ERROR_STRING.[2]
		return z![3 ..]

	assert z.Cap >= 1
	z![0]! = self.Code.Trim_u8
	-- FIXME: utf8
	return z![1 ..]

inline Rune met Hash32 = U32
	return self.Code.Hash32

Rune met Buf = r:Stringbuf
	r#Resize self.Bytecount
	_ = self.Encode r!Bytes

example -> assert Rune.From_ascii 49 == '1'

inline Rune met Show st:#`Fmt_state
	--let s = {}:[4]U8 ...
	self.Code.Show st

extern fun Byte_to_lower c:U8 = U8
extern fun Byte_to_upper c:U8 = U8

inline struct String =
	isa `String `Return_by_copy `Trivial_copy_but_owned
	bytes	:[]U8

inline String fun From_slice c:[]U8 = this
	return {bytes=c}

inline String fun From_string s:String = this
	return s

inline String fun From_bytes b:[]U8 = this--::(^Captures s)
	return {bytes=b} -- cap b.Count]}

inline String met All = Range
	return self.bytes.All

inline String met String = String
	return self*

inline String met Bytes = []U8
	return self.bytes

inline String met Count = Uint
	return self.bytes.Count

inline String met Operator_at n:Uint = U8
	return self.bytes.[n]*

inline String met First = U8
	return self.[0]

inline String met Last = U8
	return self.[self.Count-1]

inline String met Operator_sub r:Range = String
	return this.From_bytes <- self.bytes.Operator_sub r

inline String met Operator_compare other:*this = Int
	return Bytes_compare self.bytes other.bytes
inline String met Operator_eq other:*this = Bool
	if self === other
		return true
	return self.Operator_compare other == 0
inline String met Operator_ne other:*this = Bool
	if self === other
		return false
	return self.Operator_compare other != 0
inline String met Operator_le other:*this = Bool
	if self === other
		return true
	return self.Operator_compare other <= 0
inline String met Operator_lt other:*this = Bool
	if self === other
		return false
	return self.Operator_compare other < 0
inline String met Operator_gt other:*this = Bool
	if self === other
		return false
	return self.Operator_compare other > 0
inline String met Operator_ge other:*this = Bool
	if self === other
		return true
	return self.Operator_compare other >= 0

inline String met Cut_at i:Uint = this, this
	return self.[.. i], self.[i ..]

inline String met Cut_around i:Uint = this, this
	let j = i + 1 such
		if j >= self.Count
			j = i
	return self.[.. i], self.[j ..]

inline String met Show st:#`Fmt_state
	let _ = st#Write self.bytes

String met Buf = Stringbuf
	return Stringbuf.From_string self

example -> assert 'a' < 'b'
example -> assert 'b' > 'a'
example -> assert 'a' == 'a'
example -> assert 'a' < 'aa'
example -> assert 'b' > 'aa'
example -> assert 'aa' > 'a'
example -> assert 'aa' < 'b'

example -> assert '1234'.Bytes.Count == 4
example -> assert '1234'.Bytes.All == 0 .. 4
example -> assert '1234'.Bytes.[3] == '4'.[0]
example -> assert '1234'.Bytes.[1].U32 == ('2':Rune).Code
example -> assert '1234' == '1234'
example -> assert '1234'.Bytes.Count == 4
example -> assert '1234'.Bytes.[0] == 49

String met Iter = String_iterator
	return {s=self}

String met Iter_bytes = String_bytes_iterator
	return {s=self}

inline struct String_iterator =
	isa (`Iterator (Uint, Rune))
	s	:String
	p	:Uint

inline String_iterator met! Next = ?(Uint, Rune)
	if self.p >= self.s.Count
		return nil

	let i = self.p
	self!p += 1
	return i, Rune.From_ascii <- self.s.[i]

inline struct String_bytes_iterator =
	isa (`Iterator (Uint, U8))
	s	:String
	p	:Uint

inline String_bytes_iterator met! Next = ?(Uint, U8)
	if self.p >= self.s.Count
		return nil

	let i = self.p
	self!p += 1
	return i, self.s.[i]

extern fun hash32_hsieh data:*U8 len:Uint = U32

fun Hash32 b:[]U8 = U32
	return hash32_hsieh b.Unsafe_rawdata b.Bytecount

let _M0 = 2860486313:U32
let _M1 = 3267000013:U32

fun hash32_go_string b:[]U8 = U32
	let hash = _M0 such
		foreach x over b
			hash = (hash ^ x.U32) ov* _M1
	return hash

example -> assert hash32_go_string "".Bytes == _M0
example -> assert hash32_go_string "abc".Bytes == 2407100781

inline String met Hash32 = U32
	return Hash32 self.bytes

inline String met Begins_with s:String = Bool
	if s.bytes.Count > self.bytes.Count
		return false
	let a = self.bytes
	and b = s.bytes such
		while b.Count > 0
			let ra, na = Rune.Decode a
			let rb, nb = Rune.Decode b
			if ra != rb
				return false
			a = na
			b = nb
	return true

inline String met Ends_with s:String = Bool
	if s.bytes.Count > self.bytes.Count
		return false
	let a = self.bytes
	and b = s.bytes
	and i = 0 such
		while i < b.Count
			let ra, cnt = Rune.Decode_last a
			let rb, _ = Rune.Decode_last b
			if ra != rb
				return false
			a = a.[.. a.Count - cnt]
			b = b.[.. b.Count - cnt]
			i += cnt
	return true

extern String met Index_byte sep:U8 = Int
extern String met Last_index_byte sep:U8 = Int

example -> assert "abcdef".Index_byte "a".[0] == 0
example -> assert "abcdef".Index_byte "f".[0] == 5
example -> assert "abcdef".Index_byte "z".[0] == -1
example -> assert "abcdef".Index_byte "\0".[0] == -1
example -> assert "abcdef".Last_index_byte "z".[0] == -1
example -> assert "abcdef".Last_index_byte "\0".[0] == -1
example -> assert "abccba".Last_index_byte "a".[0] == 5
example -> assert "abccba".Last_index_byte "c".[0] == 3
example -> assert "abccba".Index_byte "c".[0] == 2

-- Prime base used in the Rabin-Karp algorithm.
let rk_prime = 16777619:U32

fun rk_hash b:[]U8 = U32, U32
	let hash = 0 such
		foreach x over b
			hash = hash ov* rk_prime ov+ x.U32
	let pow = 1
	and sq = rk_prime
	and i = b.Count such
		while i != 0
			if i & 1 != 0
				pow ov*= sq
			sq ov*= sq
			i >>= 1
	return hash, pow

extern String met memmem_index sep:String = Int

String met naive_index sep:String = Int
	let n = sep.Count
	if n == 0
		return 0
	let sep_first = sep.First
	if n == 1
		return self.Index_byte sep_first
	if n > self.Count
		return -1

	let sep_second = sep.[1]
	-- Take from 1 to avoid having to separate n==2 case and n>2 case.
	let sep_allbut1 = sep.[1 ..]
	var data = self*
	var i, j
	while true
		j = data.Index_byte sep_first
		if j == -1
			break
		i += j
		data = data.[j.Unsigned ..]
		if data.[1] == sep_second and n <= data.Count and data.[1 .. n] == sep_allbut1
			return i
		data = data.[1 ..]
		i += 1
	return -1

String met rk_index sep:String = Int
	let cnt = self.Count
	let n = sep.Count
	if n == 0
		return 0
	elif n == 1
		return self.Index_byte sep.[0]
	elif n == cnt
		if self == sep
			return 0
		return -1
	elif n > cnt
		return -1

	let hashsep, pow = rk_hash sep.Bytes
	let h = 0 such
		foreach i over 0 .. n
			h = h ov* rk_prime ov+ self.[i].U32
		if h == hashsep and self.[.. n] == sep
			return 0
		foreach i over n .. cnt
			h ov*= rk_prime
			h ov+= self.[i].U32
			h ov-= pow ov* self.[i-n].U32
			i += 1
			if h == hashsep and self.[i-n .. i] == sep
				return (i - n).Signed
	return -1

fun bm_init_bad_shift bad:#(Buf Uint) sep:String
	bad#Resize 256
	let m = sep.Count
	foreach i over bad.All
		bad![i]! = m
	foreach i over 0 .. m-1
		bad![sep.[i].Uint]! = m - 1 - i

-- Tuned Boyer-Moore
-- Chapter 20, Handbook of Exact String-Matching Algorithms
-- Christian Charras, Thierry Lecroq
String met tunedbm_index sep:String = Int
	let m = sep.Count
	let n = self.Count

	let sep_allbutlast = sep.[.. sep.Count-1]
	let sep_last = sep.Last.Uint
	let bad = {}:(Buf Uint)
	and shift such
		bm_init_bad_shift #bad sep
		shift = bad.[sep_last]*
		bad![sep_last]! = 0

	var j = m - 1
	while j < n
		let k = bad.[self.[j].Uint] such
			while k != 0
				j += k
				if j >= n
					break
				k = bad.[self.[j].Uint]

		let possible = j - (m-1)
		if j < n and (self.[possible .. j]) == sep_allbutlast
			return possible.Signed

		j += shift

	return -1

enum String_index_impl =
	| NAIVE
	| MEMMEM
	| RK
	| TUNEDBM

String met Index_selectimpl impl:String_index_impl sep:String = Int
	match impl
	| NAIVE -> return self.naive_index sep
	| MEMMEM -> return self.memmem_index sep
	| RK -> return self.rk_index sep
	| TUNEDBM -> return self.tunedbm_index sep

String met Index sep:String = Int
	if sep.Count < 32
		return self.Index_selectimpl NAIVE sep
	else
		return self.Index_selectimpl MEMMEM sep

example -> assert "abcdef".Index "" == 0
example -> assert "abcdef".Index "b" == 1
example -> assert "abcdef".Index "abcdef" == 0
example -> assert "abcdef".Index "abcdez" == -1
example -> assert "abcdef".Index "abcdefg" == -1
example -> assert "abcdef".Index "z" == -1
example -> assert "abcdef".Index "abc" == 0
example -> assert "abcdef".Index "def" == 3

String met Last_index sep:String = Int
	let n = sep.Count
	if n == 0
		return self.Count.Signed
	let sep_last = sep.Last
	if n == 1
		return self.Last_index_byte sep_last
	if n > self.Count
		return -1

	let sep_second = sep.[sep.Count-2]
	let sep_allbut2 = sep.[.. sep.Count-2]
	var data = self*
	while true
		let i = data.Last_index_byte sep_last
		if i+1 < sep.Count.Signed
			break
		let possible_beg = i.Unsigned + 1 - n
		if data.[i.Unsigned-1] == sep_second and data.[possible_beg .. i.Unsigned-1] == sep_allbut2
			return possible_beg.Signed
		data = data.[.. i.Unsigned]
	return -1

example -> assert "abcdef".Last_index "" == 6
example -> assert "abcdef".Last_index "a" == 0
example -> assert "abcdef".Last_index "b" == 1
example -> assert "abcdef".Last_index "abcdef" == 0
example -> assert "abcdef".Last_index "bcdef" == 1
example -> assert "abcdef".Last_index "abcdez" == -1
example -> assert "abcdef".Last_index "abcdefg" == -1
example -> assert "abcdef".Last_index "z" == -1
example -> assert "abcdef".Last_index "abc" == 0
example -> assert "abcdef".Last_index "def" == 3

String met Index_any chars:String = Int
	if chars.Count == 0
		return -1
	for i, c over self.Iter
		for _, m over chars.Iter
			if c == m
				return i.Signed
	return -1

String met Last_index_any chars:String = Int
	if chars.Count == 0
		return -1
	var b = self.Bytes
	var i = self.Count
	while i > 0
		let r, size = Rune.Decode_last b.[.. i]
		i -= size
		for _, m over chars.Iter
			if r == m
				return i.Signed
	return -1

String met Index_all s:String = Bool, []Uint
String met Find s:String = Bool, String
String met Find_all s:String = Bool, []String

-- FIXME(e): unicode
String met Strip any:String = String
	return (self.Strip_left any).Strip_right any

-- FIXME(e): unicode
String met Strip_left any:String = String
	foreach i over self.All
		if any.Index_byte self.[i] == -1
			return self.[i ..]
	return ""

-- FIXME(e): unicode
String met Strip_right any:String = String
	for i over self.All.Reverse_iter
		if any.Index_byte self.[i] == -1
			return self.[.. i+1]
	return ""

example -> assert "\t\nabc\t\n".Strip "\n\t" == "abc"
example -> assert "\t\nabc\t\n".Strip_right "\n\t" == "\t\nabc"
example -> assert "\t\nabc\t\n".Strip_left "\n\t" == "abc\t\n"

String met To_lower = r:Stringbuf
	r#Reserve self.Count
	foreach i over self.All
		r#Push <- Byte_to_lower self.[i]

String met To_upper = r:Stringbuf
	r#Reserve self.Count
	foreach i over self.All
		r#Push <- Byte_to_upper self.[i]

-- FIXME(e): Unicode
fun explode s:String ?max:?Uint = ret:(Buf String)
	ret#Reserve s.Count
	for i, r over s.Iter
		if r == Rune.ERROR
			ret#Push# = Rune.ERROR_STRING
		else
			ret#Push# = s.[i .. i+r.Bytecount]

String met Split sep:String ?max:?Uint ?after_sep:?Bool = r:(Buf String)
	let sep_save = 0 such
		if after_sep else false
			sep_save = sep.Count
	if sep == ""
		return explode self max=max
	if sep.Count > self.Count
		r#Push# = self
		return r

	var data = self.[..]
	while true
		let i = data.Index sep
		if i == -1
			r#Push# = data
			break
		r#Push# = data.[.. i.Unsigned+sep_save]
		data = data.[i.Unsigned+sep.Count ..]
	return r

example -> assert "0 1 2".Split " " == {"0" "1" "2"}
example -> assert "0 1 2".Split " " max=nil after_sep=true == {"0 " "1 " "2"}
example -> assert "0 1 2".Split "," == {"0 1 2"}
example -> assert "0 1 2".Split " 1 " == {"0" "2"}


inline struct Stringbuf =
	isa `Stringbuf bufio.`Writer
	bytes	:[!]U8	--::^Owned

inline Stringbuf fun From_slice c:[]U8 = r:this
	r#Resize c.Count
	r#Bytes!Exact_copy c

inline Stringbuf fun From_string s:String = this
	let r = {}:this such
		r#Append s.Bytes
	return r

inline Stringbuf met# Dtor
	Realloc #self#bytes 0

inline Stringbuf met# Copy_ctor other:*this
	self#Copy_from other.bytes

inline Stringbuf fun From_bytes s:[]U8 = this
	let r = {}:this such
		r#Reserve s.Count
		r#bytes = r!bytes!Copy_from s
	return r

inline Stringbuf met$ Bytes = [$]U8
	return self$bytes

inline Stringbuf met All = Range
	return self.bytes.All

inline Stringbuf met String = String
	return String.From_bytes self.bytes

inline Stringbuf met Cap = Uint
	return self.bytes.cap

inline Stringbuf met Count = Uint
	return self.bytes.cnt

inline Stringbuf met First = U8
	return self.[0]*

inline Stringbuf met Last = U8
	return self.[self.Count-1]*

inline Stringbuf met$ Operator_at n:Uint = $U8
	return self$bytes$[n]

inline Stringbuf met Operator_sub r:Range = String
	return String.From_bytes <- self.bytes.Operator_sub r

inline Stringbuf met Operator_compare other:*this = Int
	return Bytes_compare self.bytes other.bytes

inline Stringbuf met Operator_eq other:*this = Bool
	if self === other
		return true
	return self.Operator_compare other == 0
inline Stringbuf met Operator_ne other:*this = Bool
	if self === other
		return false
	return self.Operator_compare other != 0
inline Stringbuf met Operator_le other:*this = Bool
	if self === other
		return true
	return self.Operator_compare other <= 0
inline Stringbuf met Operator_lt other:*this = Bool
	if self === other
		return false
	return self.Operator_compare other < 0
inline Stringbuf met Operator_gt other:*this = Bool
	if self === other
		return false
	return self.Operator_compare other > 0
inline Stringbuf met Operator_ge other:*this = Bool
	if self === other
		return true
	return self.Operator_compare other >= 0

inline Stringbuf met Show st:#`Fmt_state
	let _ = st#Write self.bytes

inline Stringbuf met Hash32 = U32
	return Hash32 self.bytes

inline Stringbuf met# Clear
	self!bytes = self.bytes.[.. 0]
	self#auto_shrink

inline Stringbuf met# Resize cnt:Uint
	if cnt <= self.Cap
		self!bytes = self.bytes.[.. cnt]
		self#auto_shrink
	else
		self#Reserve cnt
		self!bytes = self.bytes.[.. cnt]

inline Stringbuf met# Push c:U8
	let nend = self.bytes.Count + 1
	self#Reserve nend
	self!bytes = self.bytes.[.. nend]
	self!bytes![nend - 1]! = c

inline Stringbuf met# Pop = U8
	assert self.Bytes.Count > 0
	let c = (self.bytes.Last)*
	self!bytes = self.bytes.[.. self.bytes.Count-1]
	self#auto_shrink
	return c

inline Stringbuf met# Append b:[]U8
	self#Reserve self.bytes.Count + b.Count
	self#bytes = self!bytes!Append b

inline Stringbuf met# Copy_from b:[]U8
	self#Reserve b.Count
	self#bytes = self.bytes!Copy_from b

example stringbuf_copy_empty
	var buf:Stringbuf
	buf#Cat "test"
	assert buf.Count > 0
	buf#Copy_from {}:[]U8
	assert buf.Count == 0

inline Stringbuf met# Reserve atleast:Uint
	if self.bytes.cap >= atleast
		return
	Realloc #self#bytes atleast

Stringbuf met# Cat ?sep:?*String ...v:(Vararg *`String)
	let sepcnt = sep?.Count else 0
	for b over v
		self#Reserve self.bytes.Count + sepcnt + b.Count
		self#bytes = self!bytes!Append b.String.Bytes
		if sep? and v.Count_left > 0
			self#bytes = self!bytes!Append sep.Bytes

Stringbuf met# Cat_all ?sep:?*String ...v:(Vararg *[]String)
	for b over v
		foreach i over b.All
			let s = b.[i]
			self#Cat s
			if sep? and i > 0 and i != b.Count-1
				self#Cat sep

inline Stringbuf met# auto_grow atleast:Uint
	let cap = self.bytes.cap
	if cap >= atleast
		return
	let newcap = Buffer_auto_grown_size cap atleast
	Realloc #self#bytes newcap

inline Stringbuf met# auto_shrink
	let cap = self.bytes.cap
	let newcap = Buffer_auto_shrunk_size cap self.bytes.cnt
	if newcap == cap
		return
	Realloc #self#bytes newcap

inline Stringbuf met# Write b:[]U8 = []U8, Error --[]U8::|{}, Error::|OK
	self#Reserve self.Count + b.Count
	self#bytes = self#bytes#Append b
	return {}, OK

Stringbuf met# Writing_buffer ?min:?Uint = Error, [!]U8
	self#Reserve self.Count + (min else 1024)
	return OK, self!bytes!Available_capacity

Stringbuf met# Pr ?sep:?*String ...v:(Vararg ?*`Show)
	let separator = sep else " "
	and st = {}:fmt.State such
		st#Init self
		for x over v
			if x?
				x.Show #st
			else
				"(nil)".Show #st
			if v.Count_left > 0
				separator.Show #st

Stringbuf met# Prn ?sep:?*String ...v:(Vararg ?*`Show)
	self#Pr sep=sep ...v
	self#Append "\n".Bytes

Stringbuf met# Set s:String
	self#Clear
	self#Cat s

Stringbuf met Begins_with s:String = Bool
	return self.String.Begins_with s
Stringbuf met Ends_with s:String = Bool
	return self.String.Ends_with s
Stringbuf met Index_byte sep:U8 = Int
	return self.String.Index_byte sep
Stringbuf met Last_index_byte sep:U8 = Int
	return self.String.Last_index_byte sep
Stringbuf met Index s:String = Int
	return self.String.Index s
Stringbuf met Last_index s:String = Int
	return self.String.Last_index s
Stringbuf met Index_any chars:String = Int
	return self.String.Index_any chars
Stringbuf met Last_index_any chars:String = Int
	return self.String.Last_index_any chars
Stringbuf met Strip any:String = this
	return (self.String.Strip any).Buf
Stringbuf met Strip_left any:String = this
	return (self.String.Strip_left any).Buf
Stringbuf met Strip_right any:String = this
	return (self.String.Strip_right any).Buf
Stringbuf met To_lower = r:this
	return self.String.To_lower
Stringbuf met To_upper = this
	return self.String.To_upper
Stringbuf met Split sep:String ?max:?Uint ?after_sep:?Bool = (Buf String)
	return self.String.Split sep max=max after_sep=after_sep
