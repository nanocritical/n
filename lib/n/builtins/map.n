intf `Hashable32 =
	met Hash32 = U32

alias `Map_key = {`Hashable32 `Copyable `Has_equality}

struct sptable T:`Copyable =
	bitmap	:Bitmap
	groups	:(Buf (Buf T))

fun sp_num_groups size_pow2:Uint = Uint
	return math.Div_ceil size_pow2 32

sptable met# init ?size_pow2:?Uint
	self!bitmap#Resize <- Max size_pow2 64
	self!groups#Resize (sp_num_groups self.bitmap.Count)

sptable met size = Uint
	return self.bitmap.Count

fun maskout_after mask:U32 = U32
	return mask - 1

example
	assert maskout_after (1 ov<< 31) == 0x7fffffff
	assert maskout_after (1 ov<< 1) == 0x1
	assert maskout_after (1 ov<< 0) == 0x0

sptable shallow met$ get n:Uint = ?$T
	assert n < self.size
	let word, mask = Bitmap_split n
	let w = self.bitmap.Words.[word]*
	if w & mask == 0
		return nil

	let before_w = w & (maskout_after mask)
	let count_before = math.Bit_popcount before_w
	let gr = self$groups$[word]
	return gr.Operator_at count_before

sptable met# set n:Uint = #T
	assert n < self.size
	let word, mask = Bitmap_split n
	let w = self!bitmap!Words![word]
	let before_w = w & (maskout_after mask)
	let count_before = math.Bit_popcount before_w
	let gr = self.groups![word]
	if w & mask != 0
		return gr![count_before]

	w! |= mask

	let old_count = gr.Count
	gr#Resize gr.Count+1

	let src_after = gr![count_before .. old_count]
	let dst_after = gr![count_before+1 ..]
	dst_after!Exact_move src_after
	return gr![count_before]

sptable met! iter = (sptable_iter T)
	let w = 0:U32 such
		if self.bitmap.Count > 0
			w = self.bitmap.Words.First
	return {table=self ng=self.groups.Count g=0 w=w}

struct sptable_iter T:`Copyable =
	-- FIXME(e): isa `Trivial_copy_but_owned
	isa (`Iterator (Uint, #T))
	table	:*(sptable T)	--::(owns self)
	ng	:Uint
	g	:Uint
	w	:U32
	w_nth	:U32

sptable_iter met! Next = ?(Uint, #T)
	while self.w == 0 and self.g+1 < self.ng
		self!g += 1
		self!w = self.table.bitmap.Words.[self.g]
		self!w_nth = 0

	if self.w == 0
		return nil

	let nxt = (math.Bit_ffs self.w) - 1
	self!w &= ~(1:U32 ov<< nxt)
	let w_nth = self.w_nth
	self!w_nth += 1
	let gr = self.table.groups![self.g]
	return self.g*32 + nxt, gr![w_nth.Uint]

example sptable_basic
	var t = {}:(sptable Uint)
	t#init size_pow2=100
	(t#set 0)# = 42
	assert t#get 1 === nil
	assert (t#get 0)* == 42
	(t#set 7)# = 44
	assert (t#get 7)* == 44
	(t#set 3)# = 43
	assert (t#get 3)* == 43
	(t#set 99)# = 45
	assert (t#get 0)* == 42
	assert (t#get 3)* == 43
	assert (t#get 7)* == 44
	assert (t#get 99)* == 45

	for i, e over t!iter
		match i
		| 0 -> assert e == 42
		| 3 -> assert e == 43
		| 7 -> assert e == 44
		| 99 -> assert e == 45
		| _ -> assert false

example sptable_group_boundary
	var t = {}:(sptable Uint)
	t#init size_pow2=32+1
	(t#set 32-1)# = 42
	(t#set 32)# = 43
	assert t#get 1 === nil
	assert (t#get 32)* == 43
	assert (t#get 32-1)* == 42

struct unit K:`Map_key T:`Copyable =
	isa `Show
	hash	:?U32
	key	:K
	val	:T

unit met Show st:#`Fmt_state
	"{".Show st
	try_show st (self.hash else 0)
	" ".Show st
	try_show st self.key
	" ".Show st
	try_show st self.val
	"}:unit".Show st

struct Map K:`Map_key T:`Copyable =
	isa `Show (`Slice_compatible (K, T)) `Copyable (`Collection K) (`Inherit `Has_equality T)
	alias unit_type = (unit K T)
	table			:(sptable unit_type)
	count			:Uint
	count_inc_deleted	:Uint

-- Ignore duplicated keys.
Map fun From_slice c:[](K, T) = r:this
	foreach i over c.All
		let k, v = c.[i]
		let added, p = r#Try_store k
		if added
			p# = v

Map met# init ?size_pow2:?Uint
	self#table#init size_pow2=size_pow2

Map met# ensure_init
	if self.table.size == 0
		self#init

Map met# Dtor
	self#Clear

Map met# Clear
	self#table#Dtor
	self!count = 0
	self!count_inc_deleted = 0

Map met# Copy_ctor other:*this
	self#Dtor
	assert self#Ingest other

Map met Count = Uint
	return self.count

-- Quadratic open addressing (see Knuth TAOCP 6.4 exercise 20)
--
-- The table must have at least one empty spot to make sure that, if the
-- table is full, the quadratic search eventually stops.
inline fun quad_open_addr size:Uint hash:U32 nth:Uint = Uint
	return ((hash + (nth.Trim_u32 * (nth.Trim_u32+1)) / 2) & (size.Trim_u32 - 1)).Uint

Map met index hash:U32 nth:Uint = Uint
	return quad_open_addr self.table.size hash nth

example check_bijection
	let hash = 0xcafebabe:U32
	let size = 4096
	var hits = {}:Bitmap
	hits#Resize size
	foreach nth over 0 .. size
		hits!Set <- quad_open_addr size hash nth
	assert hits.Popcount == size

Map shallow met$ get_unit key:*K just_looking:Bool = ?$this.unit_type, idx:Uint, hash:U32
	if just_looking and self.Count == 0
		return nil, 0, 0

	hash = key.Hash32
	var nth
	var deleted_slot_idx:?Uint
	while true
		idx = self.index hash nth
		let u = self.table$get idx
		nth += 1
		if not u?
			if not just_looking and deleted_slot_idx?
				let u = self.table$get deleted_slot_idx
				return u, (deleted_slot_idx else 0), hash
			return nil, idx, hash
		if not u.hash?
			-- Deleted
			if not just_looking and not deleted_slot_idx?
				deleted_slot_idx = idx
			continue
		if u.hash != hash
			continue
		if u.key == key
			return u, idx, hash

Map met Operator_in key:*K = Bool
	return self.[key]?

Map shallow met$ Operator_at key:*K = ?$T
	let u, _, _ = self$get_unit key true
	if u?
		return $u$val
	return nil

Map met# may_grow = Bool
	-- 3/4 full?
	if self.count_inc_deleted <= self.table.size/2
		return false

	-- Grow.
	-- We will move tmp over self, we don't want the memory to be freed.
	var tmp = Alloc this
	-- Must remain a power of 2.
	tmp#init size_pow2=2*self.table.size
	let all = tmp#Ingest self
	assert all

	self#Dtor

	-- Steal the memory owned by tmp.
	Slice_memmove ((Cast #this #U8) self) ((Cast #this #U8) tmp) (sizeof this)
	-- Zero tmp (to ensure its Dtor is a no-op), and free it.
	Slice_memset ((Cast #this #U8) tmp) 0 (sizeof this)
	Free tmp

	assert self.count_inc_deleted <= self.table.size/2
	return true

Map met# store key:*K = added:Bool, #T
	self#ensure_init
	var u, idx, hash = self!get_unit key false
	if u? and u.hash?
		return false, #u#val

	if u?
		-- Reusing deleted slot.
		self!count += 1
		u#hash = hash
		u#key = key
		return true, #u#val

	-- Need to create a spot.
	if self#may_grow
		-- The table has changed, we need to recompute idx. Let's just restart.
		return self#store key

	self!count += 1
	self!count_inc_deleted += 1
	let nu = self#table#set idx
	nu#hash = hash
	nu#key = key
	return true, #nu#val

Map met# Store key:*K = #T
	let _, loc = self#store key
	return loc

Map met# Try_store key:*K = added:Bool, #T
	return self#store key

-- Return true if some keys from 'other' were already in 'self'.
Map met# Ingest other:*this = ingested_all:Bool
	ingested_all = true
	for pos over other.table.bitmap.Iter
		let u = other#table#get pos
		if not u.hash?
			continue
		let added, loc = self#Try_store u.key
		if not added
			ingested_all = false
			continue
		loc# = u.val
	return ingested_all

Map met# Delete key:*K = deleted:Bool
	if self.Count == 0
		return false

	let u, _, _ = self!get_unit key true
	if u?
		u!hash = nil
		u!key = {}
		u!val = {}
		self!count -= 1
		return true

	return false

Map shallow met$ Iter = (Map_iter this $T)
	-- To avoid this cast, we would have to make sptable_iter more complex.
	let mself = (Cast *this !this) self
	return {iter=mself!table!iter}

-- Because of deleted values, elements may not appear in the same position
-- in groups, so we cannot simply compare groups.
-- Instead of the approach below, which is O(N) in the worst case, but with
-- not very good constants, we could compare groups one by one, taking into
-- account the possibility of deleted values being in there.
Map met Operator_eq other:*this = Bool
	assert T isa `Has_equality
	if self.Count != other.Count
		return false

	for k, sv over self.Iter
		let ov = other.[k]
		if not ov?
			return false
		if T isa `Has_equality -- To appease the compiler.
			if sv != ov
				return false
		else
			_ = sv

	return true

Map met Operator_ne other:*this = Bool
	return not self.Operator_eq other

Map met Show st:#`Fmt_state
	"{".Show st
	var i = 0:Uint
	for k, v over self.Iter
		if i > 0
			", ".Show st
		"(".Show st
		generic_show st k
		", ".Show st
		generic_show st v
		")".Show st
		i += 1
	"}".Show st

Map met Copy_to_buf = r:(Buf (K, T))
	for k, v over self.Iter
		r#Push# = k, v*


(struct K:`Map_key T:`Copyable) Map_iter H:(Map K T) RT:`Any_any_ref =
	isa (`Iterator (K, RT)) `Trivial_copy `Trivial_ctor
	iter	:(sptable_iter H.unit_type)

Map_iter met! Next = ?(K, RT)
	while true
		let p = self!iter!Next
		if not p?
			return nil
		let _, u = p
		if u.hash?
			return u.key, (Cast #T RT) #u#val

-- Implementation note: Does not contain degenerate elements with value false.
struct Set T:`Map_key =
	isa (`Set T) `Show `Copyable
	map	:(Map T Bool)

-- Ignore duplicated elements.
Set fun From_slice c:[]T = r:this
	foreach i over c.All
		let x = c.[i]
		let added, p = r!map#Try_store x
		if added
			p# = true

Set met# Clear
	self#map#Dtor

Set met# Copy_ctor other:*this
	self#Clear
	assert self#Add_all other

Set met Count = Uint
	return self.map.Count

Set met Operator_in x:*T = Bool
	return self.map.[x] else false

Set met# Add x:*T = added:Bool
	let added, p = self!map#Try_store x
	if not added
		return false

	p# = true
	return added

Set met# Add_all other:*this = added_all:Bool
	added_all = true
	for x over other.Iter
		added_all = self!Add x and added_all

Set met# Remove x:*T = removed:Bool
	return self#map#Delete x

Set met# Remove_all other:*this = removed_all:Bool
	removed_all = true
	for x over other.Iter
		removed_all = self!Remove x and removed_all

-- Useful to perform a pop-like operation:
--	let e = set.Any_one*
--	_ = set#Remove e
Set met Any_one = r:T
	assert self.Count > 0
	var it = self.Iter
	r = it!Next

Set met# Intersect other:*this
	-- We cannot call self#Remove while iterating.
	-- TODO(e): rehash the set if the size has changed a lot.

	let to_remove:(Buf T)
	for x, _ over self.map.Iter
		if not x in other
			to_remove#Push# = x

	foreach i over to_remove.All
		let _ = self#Remove to_remove.[i]

Set met# Symmetric_difference other:*this
	for x over other.Iter
		if x in self
			let _ = self.Remove x
		else
			let _ = self.Add x

Set met Operator_eq other:*this = Bool
	if self.Count != other.Count
		return false

	for x over other.Iter
		if not x in self
			return false
	return true

Set met Operator_ne other:*this = Bool
	return not self == other

Set met Operator_le other:*this = Bool
	if self.Count > other.Count
		return false
	for x over self.Iter
		if not x in other
			return false
	return true

Set met Operator_lt other:*this = Bool
	if self.Count >= other.Count
		return false
	return self <= other

Set met Operator_gt other:*this = Bool
	return self <= other

Set met Operator_ge other:*this = Bool
	return self < other

Set met Show st:#`Fmt_state
	"{".Show st
	var i = 0:Uint
	for x over self.Iter
		if i > 0
			" ".Show st
		generic_show st x
		i += 1
	"}".Show st

Set met Iter = it:(Set_iter T)
	it#iter = self.map.Iter

Set met Copy_to_buf = r:(Buf T)
	for x over self.Iter
		r#Push# = x


struct Set_iter T:`Map_key =
	isa (`Iterator T) `Trivial_copy `Trivial_ctor
	iter	:(Map_iter (Map T Bool) *Bool)

Set_iter met! Next = ?T
	let r = self!iter!Next
	return r?.X0

example set_basic
	var s = {0 1 2}:(Set U32)
	assert s.Count == 3
	assert not <- s#Add 0
	assert s.Count == 3
	assert s#Add 3
	assert s.Count == 4

	var t = {0}:(Set U32)
	s#Intersect t
	assert t == s
	assert s.Count == 1
	assert not s.map.[1]?
	assert not <- s#Remove 1
	assert s.Count == 1
	assert s#Remove 0
	assert s.Count == 0


-- Implementation note: Does not contain degenerate elements with count 0.
struct Multiset T:`Map_key =
	isa `Show `Copyable
	map	:(Map T Uint)

Multiset fun From_slice c:[]T = r:this
	foreach i over c.All
		let x = c.[i]
		let _, p = r!map#Try_store x
		p# += 1

Multiset met# Clear
	self#map#Dtor

Multiset met# Copy_ctor other:*this
	self#Clear
	for x, m over other.Iter
		let _ = self#Add x multiple=m*

Multiset met Count = Uint
	return self.map.Count

Multiset met Operator_in x:*T = Bool
	return (self.map.[x] else 0) != 0

Multiset met Multiplicity x:*T = Uint
	return self.map.[x] else 0

Multiset met# Add x:*T ?multiple:?Uint = prev_multiplicity:Uint
	let _, p = self!map#Try_store x
	prev_multiplicity = p*
	p# += (multiple else 1)

Multiset met# Remove x:*T ?multiple:?Uint = prev_multiplicity:Uint
	let p = self!map![x]
	if not p?
		return 0

	prev_multiplicity = p*

	let decr_by = multiple else 1
	if decr_by >= prev_multiplicity
		_ = self!map#Delete x
		return prev_multiplicity

	p# -= decr_by

Multiset met Operator_eq other:*this = Bool
	return self.map == other.map

Multiset met Operator_ne other:*this = Bool
	return not self == other

Multiset met Show st:#`Fmt_state
	self.map.Show st

Multiset shallow met$ Iter = (Map_iter (Map T Uint) $Uint)
	return self$map$Iter

example multiset
	let m = Multiset.From_slice {0:U32 1 2 0 1}
	assert m.Count == 3
	assert 0 in m
	assert 1 in m
	assert 2 in m
	assert m.Multiplicity 0 == 2
	assert m.Multiplicity 1 == 2
	assert m.Multiplicity 2 == 1

	assert 2 == m#Remove 0
	assert m.Multiplicity 0 == 1
	assert 1 == m#Remove 0 multiple=2
	assert m.Multiplicity 0 == 0
	assert not 0 in m

	assert 1 == m#Add 2
	assert m.Multiplicity 2 == 2
	assert 2 == m#Add 2 multiple=3
	assert m.Multiplicity 2 == 5

	let n = m
	assert n.Count == 2
	assert n == m



(struct T:`Any) Ref_as_key R:(`Any_nullable_ref T) =
	isa `Map_key `Has_equality
	Ref	:R

Ref_as_key met Hash32 = U32
	return (Voidref.From_ptr self.Ref).Hash32
Ref_as_key met Operator_eq other:*this = Bool
	return self.Ref === other.Ref
Ref_as_key met Operator_ne other:*this = Bool
	return self.Ref !== other.Ref
