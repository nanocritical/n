struct prevent_passthrough_reader =
	isa io.`Reader
	r	:#bufio.Bytes_reader

prevent_passthrough_reader met# Read b:[!]U8 = [!]U8, Error
	return self#r#Read b


struct capped_block_writer =
	isa bufio.`Writer
	w		:#Stringbuf
	block_size	:Uint

capped_block_writer met# Write b:[]U8 = []U8, Error
	return self#w#Write b
capped_block_writer met# Flush ?max:?Uint = Error
	return self#w#Flush max=max
capped_block_writer met Buffered = Uint
	return self.w.Buffered
capped_block_writer met# Writing_buffer ?min:?Uint = Error, [!]U8
	let err, b = self#w#Writing_buffer min=min
	if err != OK
		return err, b
	return err, b!Recapped (Min self.block_size b.Cap)


fun test_varint_read bs:Uint bytes:[]U8 value:U64 = Error
	var br = bufio.Bytes_reader.Mk bytes
	var bufr = bufio.Reader.Mk #({r=#br}:prevent_passthrough_reader)
	var coded = Reader.Mk #bufr block_size=bs

	let err, res = coded#Read_varint32
	if bytes.Count == 10 and bytes.Last & 0x80 != 0
		assert err == OVERFLOW
		return OK
	else
		assert res == value.Trim_u32

	var bufw:Stringbuf
	var codedw = Writer.Mk #({w=#bufw block_size=bs}:capped_block_writer)
	codedw#Write_varint32 value.Trim_u32
	except = codedw#Flush
	if bytes.Count >= 5
		foreach i in 0 .. 4
			assert bufw.Bytes.[i] == bytes.[i]

		-- Only the 4 bits 28 .. 32 make it in there
		assert bufw.Bytes.[4] == bytes.[4] & 0xf
	else
		assert bufw.Bytes.Const == bytes


fun test_varint_write bs:Uint bytes:[]U8 value:U64 = Error
	var br = bufio.Bytes_reader.Mk bytes
	var bufr = bufio.Reader.Mk #({r=#br}:prevent_passthrough_reader)
	var coded = Reader.Mk #bufr block_size=bs

	let err, res = coded#Read_varint64
	if bytes.Count == 10 and bytes.Last & 0x80 != 0
		assert err == OVERFLOW
		return OK
	else
		assert res == value

	var bufw:Stringbuf
	var codedw = Writer.Mk #({w=#bufw block_size=bs}:capped_block_writer)
	codedw#Write_varint64 value
	except = codedw#Flush
	assert bufw.Bytes.Const == bytes


example varint
	let block_sizes = {1 2 3 5 7 13 32 Writer.DEFAULT_BLOCK_SIZE}:[]Uint
	let varint_cases = {
		\ ({0x00}, 0)
		\ ({0x01}, 1)
		\ ({0x7f}, 127)
		-- 14882
		\ ({0xa2 0x74}, (0x22 ov<< 0) | (0x74 ov<< 7))
		-- 2961488830 
		\ ({0xbe 0xf7 0x92 0x84 0x0b}, (0x3e ov<< 0) | (0x77 ov<< 7) | (0x12 ov<< 14) | (0x04 ov<< 21) | (0x0b ov<< 28))

		-- 64-bit
		-- 7256456126
		\ ({0xbe 0xf7 0x92 0x84 0x1b}, (0x3e ov<< 0) | (0x77 ov<< 7) | (0x12 ov<< 14) | (0x04 ov<< 21) | (0x1b ov<< 28))
		-- 41256202580718336
		\ ({0x80 0xe6 0xeb 0x9c 0xc3 0xc9 0xa4 0x49}, (0x00 ov<< 0) | (0x66 ov<< 7) | (0x6b ov<< 14) | (0x1c ov<< 21) | (0x43 ov<< 28) | (0x49 ov<< 35) | (0x24 ov<< 42) | (0x49 ov<< 49))
		-- 11964378330978735131
		\ ({0x9b 0xa8 0xf9 0xc2 0xbb 0xd6 0x80 0x85 0xa6 0x01}, (0x1b ov<< 0) | (0x28 ov<< 7) | (0x79 ov<< 14) | (0x42 ov<< 21) | (0x3b ov<< 28) | (0x56 ov<< 35) | (0x00 ov<< 42) | (0x05 ov<< 49) | (0x26 ov<< 56) | (0x01 ov<< 63))
		-- 11964378330978735131 with 0x80 on high-bit: OVERFLOW expected
		\ ({0x9b 0xa8 0xf9 0xc2 0xbb 0xd6 0x80 0x85 0xa6 0x81}, (0x1b ov<< 0) | (0x28 ov<< 7) | (0x79 ov<< 14) | (0x42 ov<< 21) | (0x3b ov<< 28) | (0x56 ov<< 35) | (0x00 ov<< 42) | (0x05 ov<< 49) | (0x26 ov<< 56) | (0x01 ov<< 63))}:[]([]U8, U64)

	foreach bs in block_sizes
		foreach bytes, value in varint_cases
			except = test_varint_read bs bytes value

	foreach bs in block_sizes
		foreach bytes, value in varint_cases
			except = test_varint_write bs bytes value
