-- Reads are either complete or, on error, do not happen at all.
inline struct Reader =
	br		:bufio.Bytes_reader
	br_caught_up	:Uint
	r		:@#bufio.`Fillable_reader
	pending_err	:Error
	Total_count	:Uint
	block_size	:Uint
	Copy_to		:?@#io.`Writer

Reader fun Mk r:@#bufio.`Fillable_reader ?block_size:?Uint ?copy_to:?@#io.`Writer = ret:this
	ret#r = r
	-- Make sure we initialize 'br' with whatever is already buffered in 'r'.
	ret#br = bufio.Bytes_reader.Mk ret.r.Peek
	ret#block_size = block_size else Uint.MAX
	ret#Copy_to = copy_to

Reader met Count_read = Uint
	return self.r.Count_read + self.br.Count_read - self.br_caught_up

Reader met Pending_read_error = Error
	return self.pending_err

-- Advance underlying reader as far as buffered reads have gone.
-- Catchup_reader can be called at anytime between reads.
-- If Copy_to is set, ensure all bytes consumed so far have been copied.
Reader met! Catchup_reader = Error
	let in_progress = self.br.Buffered
	var to_commit = self.br.Bytes.Count - self.br_caught_up - in_progress

	var copy_err
	if self.Copy_to?
		var left
		left, copy_err = io.Write_full self.Copy_to self.r.Peek.[.. to_commit]
		if left.Count > 0
			never = copy_err
			to_commit -= left.Count

	-- Commit on the underlying reader 'r' everything that was read in
	-- 'br', except the last bytes that are used by the read in progress.
	-- If Copy_to is set, we may only be able to commit fewer bytes, at
	-- least for now.
	self#r#Skip_buffered to_commit
	self!br_caught_up += to_commit
	return copy_err

-- If we can complete only a partial read on the underlying reader `r`, we save
-- the error and continue decoding with the partial read data. We have no way
-- of knowing if the error we got is somehow "urgent", so we will keep working
-- until we actually run out of data. This is just as the `Reader intf works:
-- use any read data first, before processing any error. When we hit the error,
-- we return it.

-- If at_least bytes cannot be read, leaves br as-is, including its buffer
-- position.
Reader met# refresh at_least:Uint = Error within logging.Log
	assert at_least > 0

	let in_progress = self.br.Buffered
	except = self!Catchup_reader

	if self.pending_err != OK
		let err = self.pending_err
		self!pending_err = OK
		if in_progress > 0 and err == io.EOF
			return io.UNEXPECTED_EOF
		return err

	if self.Total_count + at_least > MAX_MESSAGE_LENGTH
		Log#Error "A protocol message was rejected because it was larger than %s bytes"
			\ MAX_MESSAGE_LENGTH
		return OVERFLOW
	if self.Total_count + at_least > WARN_MAX_MESSAGE_LENGTH
		Log#Warning "Reading dangerously large protocol message, larger than %s bytes (max is %s)"
			\ WARN_MAX_MESSAGE_LENGTH MAX_MESSAGE_LENGTH

	var just_filled
	just_filled, self!pending_err = self#r#Fill
		\ max=(Min (Max at_least self.block_size) MAX_MESSAGE_LENGTH-self.Total_count)

	if just_filled < at_least
		let err = self.pending_err
		self!pending_err = OK
		if in_progress > 0 and err == io.EOF
			return io.UNEXPECTED_EOF
		return err

	self#br = bufio.Bytes_reader.Mk self.r.Peek
	self!br_caught_up = 0
	-- in_progress bytes are still in r (and br)
	self#Total_count += self.br.Buffered - in_progress

-- Read data to fill all the Available space in 'b', or not at all on partial
-- read, i.e. r.Available == 0 or r.Available == b.Available
Reader met# Read_bytes b:[!]U8 = r:[!]U8, err:Error
	let err = self#refresh b.Available - (Min b.Available self.br.Buffered)
	if err != OK
		return b, err
	r, never = self!br!Read b
	assert r.Available == 0

Reader met# Skip_bytes count:Uint = left:Uint, err:Error
	let err = self#refresh count - (Min count self.br.Buffered)
	if err != OK
		return count, err

	self!br!Skip_buffered count
	return 0, OK

inline Reader met# Read_le32 = Error, n:U32
	let s = self.br.Peek
	let err, n = (io.Read_little_endian U32) s
	if err == OK
		self!br!Skip_buffered (sizeof n)
		return OK, n
	return self#slow_read_le32

Reader met# slow_read_le32 = Error, n:U32
	var s = self.br.Peek
	if s.Count == 3
		n |= s.[0].U32
		n |= s.[1].U32 ov<< 8
		n |= s.[2].U32 ov<< 16
	elif s.Count == 2
		n |= s.[0].U32
		n |= s.[1].U32 ov<< 8
	elif s.Count == 1
		n |= s.[0].U32
	elif s.Count == 0
		noop
	else
		assert false

	let left = (sizeof n) - s.Count
	except = self#refresh left

	s = self.br.Peek
	if left == 1
		n |= s.[0].U32 ov<< 24
	elif left == 2
		n |= s![0].U32 ov<< 16
		n |= s![1].U32 ov<< 24
	elif left == 3
		n |= s![0].U32 ov<< 8
		n |= s![1].U32 ov<< 16
		n |= s![2].U32 ov<< 24
	elif left == 4
		never, n = (io.Read_little_endian U32) s
	else
		assert false

	self!br!Skip_buffered left
	return OK, n


inline Reader met# Read_le64 = Error, n:U64
	let s = self.br.Peek
	let err, n = (io.Read_little_endian U64) s
	if err == OK
		self!br!Skip_buffered (sizeof n)
		return OK, n
	return self#slow_read_le64

Reader met# slow_read_le64 = Error, n:U64
	var s = self.br.Peek

	var count
	var part0, shift1
	if s.Count >= 4
		never, part0 = (io.Read_little_endian U32) s
		count = 4
		s = s.[4 ..]
		shift1 = 32

	var part1
	var shift2 = shift1
	if s.Count == 3
		part1 |= s.[0].U64
		part1 |= s.[1].U64 ov<< 8
		part1 |= s.[2].U64 ov<< 16
		shift2 += 24
	elif s.Count == 2
		part1 |= s.[0].U64
		part1 |= s.[1].U64 ov<< 8
		shift2 += 16
	elif s.Count == 1
		part1 |= s.[0].U64
		shift2 += 8
	elif s.Count == 0
		noop
	else
		assert false

	count += s.Count

	let left = (sizeof n) - count
	except = self#refresh left

	s = self.br.Peek
	var part2
	var shift3 = shift2
	if left >= 4
		never, part2 = (io.Read_little_endian U32) s
		self!br!Skip_buffered 4
		left -= 4
		shift3 += 32

	s = self.br.Peek
	var part3
	if left == 0
		noop
	elif left == 1
		part3 |= s.[0].U32 ov<< 24
	elif left == 2
		part3 |= s![0].U32 ov<< 16
		part3 |= s![1].U32 ov<< 24
	elif left == 3
		part3 |= s![0].U32 ov<< 8
		part3 |= s![1].U32 ov<< 16
		part3 |= s![2].U32 ov<< 24
	elif left == 4
		never, part3 = (io.Read_little_endian U32) s
	else
		assert false

	n = (part3.U64 ov<< shift3) | (part2.U64 ov<< shift2) | (part1 ov<< shift1) | part0.U64

	self!br!Skip_buffered left
	return OK, n

inline Reader met# Read_varint32 = Error, n:U32
	if Likely <- MAX_SIZE_VARINT <= self.br.Buffered
		var s = self.br.Peek
		var i = 0
		var shift = 0
		var ignore = false
		while true
			let b = s.[i]
			if Likely <- not ignore
				n |= (b & 0x7f).U32 ov<< shift
				shift += 7
			i += 1
			if b & 0x80 == 0
				break
			if i == MAX_SIZE_VARINT
				return OVERFLOW, 0
			if i == MAX_USED_SIZE_VARINT32
				ignore = true
		self!br!Skip_buffered i
		return OK, n
	return self#slow_read_varint32

Reader met# slow_read_varint32 = Error, n:U32
	var s = self.br.Peek
	var i = 0
	var shift = 0
	var ignore = false
	while true
		if i == s.Count
			except = self#refresh 1
			s = self.br.Peek

		let b = s.[i]
		if Likely <- not ignore
			n |= (b & 0x7f).U32 ov<< shift
			shift += 7
		i += 1
		if b & 0x80 == 0
			break
		if i == MAX_SIZE_VARINT
			return OVERFLOW, 0
		if i == MAX_USED_SIZE_VARINT32
			ignore = true

	self!br!Skip_buffered i

inline Reader met# Read_varint64 = Error, n:U64
	if Likely <- MAX_SIZE_VARINT <= self.br.Buffered
		var s = self.br.Peek
		var i = 0
		var shift = 0
		while true
			let b = s.[i]
			n |= (b & 0x7f).U64 ov<< shift
			shift += 7
			i += 1
			if b & 0x80 == 0
				break
			if i == MAX_SIZE_VARINT
				return OVERFLOW, 0
		self!br!Skip_buffered i
		return OK, n
	return self#slow_read_varint64

Reader met# slow_read_varint64 = Error, n:U64
	var s = self.br.Peek
	var i = 0
	var shift = 0
	while true
		if i == s.Count
			except = self#refresh 1
			s = self.br.Peek

		let b = s.[i]
		n |= (b & 0x7f).U64 ov<< shift
		shift += 7
		i += 1
		if b & 0x80 == 0
			break

		if i == MAX_SIZE_VARINT
			return OVERFLOW, 0

	self!br!Skip_buffered i

Reader met# Read_value_header = Error, wire_type:Wire_types, field:Uint
	let except, header = self#Read_varint32

	let wire = header & 0x7
	field = (header >> 3).Uint

	match wire
	| 0
		wire_type = VARINT
	| 1
		wire_type = BIT64
	| 2
		wire_type = LENGTH
	| 5
		wire_type = BIT32
	| _
		except = INVAL
