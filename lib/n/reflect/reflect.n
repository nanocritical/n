from n import *
import n.unsafe
import n.math

struct Type =
	isa `Has_equality
	typename_hash32	:U32
	Typename	:String
	dynisalist	:Dynisalist

alias refdyntable = unsafe.Voidref

extern inline fun get_type_from_dyntable dyntable:refdyntable = @Type

Type met Operator_eq other:@Type = Bool
	if self === other
		return true
	return self.typename_hash32 == other.typename_hash32
		\ and self.Typename == other.Typename

Type met Operator_ne other:@Type = Bool
	return not self == other

-- For codegen use:
fun Get_dyntable_for dyntable:refdyntable i:@Type = refdyntable
	let t = get_type_from_dyntable dyntable
	let e, _ = t.dynisalist.find_entry i false
	return e?.dyntable else (unsafe.Voidref.From_uintptr 0)

-- For codegen use:
fun Isa dyntable:refdyntable i:@Type = Bool
	let t = get_type_from_dyntable dyntable
	if t == i
		return true
	let e, _ = t.dynisalist.find_entry i false
	return e?

struct entry =
	isa `Trivial_equality
	typename_hash32	:U32
	typename	:String
	dyntable	:refdyntable

struct Dynisalist =
	hashmap	:[]!U16
	entries	:[]!entry
	-- invariant -> hashmap.Count > entries.Count -- For open-addressing to work.

Dynisalist met hashmap_addr hash:U32 nth:Uint = Uint
	-- Quadratic open addressing
	return (hash.Uint + (nth * (nth+1)/2)) % self.hashmap.Count

Dynisalist met find_entry rintf:@Type create:Bool = ?@entry, Uint
	let hash = rintf.typename_hash32
	let nth, addr such
		while true
			addr = self.hashmap_addr hash nth
			let pos = self.hashmap.[addr]
			if pos == 0
				if create
					break
				else
					return nil, 0

			let e = self.entries.[pos.Uint - 1]
			if e.typename_hash32 != hash
				nth += 1
				continue

			if e.typename == rintf.Typename
				return e, 0

			nth +=1

	return nil, addr

-- Implementations are encouraged to fill the table statically, at compile
-- time. The code below is given for reference. Implementations may also use
-- 'Check'.

Dynisalist met# Init count:Uint
	-- With quadratic probing, the table size must be a power of 2, and not
	-- too full.
	let table_size = math.Roundup_pow2 count.U64 such
		if 3*table_size < 4*count.U64
			table_size *= 2
	Realloc @#self#hashmap table_size.To_uint
	self!hashmap = self!hashmap![.. self.hashmap.Cap]

	Realloc @#self#entries count

Dynisalist met# Dtor
	Realloc @#self#entries 0
	Realloc @#self#hashmap 0

Dynisalist met! Add_entry rintf:@Type dyntable:refdyntable
	let e, addr = self.find_entry rintf true
	assert not e?

	self!entries = self!entries![.. self.entries.Count+1]
	let pos = self.entries.Count
	assert pos < U16.MAX.Uint
	self!hashmap![addr]! = pos.Trim_u16
	let new = self!entries![pos - 1] such
		new!typename_hash32 = rintf.typename_hash32
		new!typename = rintf.Typename
		new!dyntable = dyntable

fun init_type typename:String = Type
	return {Typename=typename typename_hash32=typename.Hash32}

Dynisalist met Check
	foreach ee in self.entries
		let rintf = init_type ee.typename
		let e, addr = self.find_entry rintf false
		assert e? and addr == 0
		assert e == ee

	let bogus = init_type "`I do not exist!"
	let e, addr = self.find_entry bogus false
	assert not e? and addr == 0

Type met Check
	assert self.typename_hash32 == self.Typename.Hash32
	self.dynisalist.Check

example
	let list = {"`Any" "`Shower" "`Formatter" "`Scanner"
		\ "`Trivial_ctor" "`Trivial_dtor" "`Return_by_copy"
		\ "`Trivial_copy"}
	let my = init_type "my" such
		my#dynisalist#Init list.Count
		foreach t in list
			let r = init_type t
			let fakedyntable = (unsafe.Cast @U8 refdyntable) t.Bytes.Unsafe_rawdata
			my#dynisalist#Add_entry r fakedyntable

			let e, addr = my.dynisalist.find_entry r false
			assert e? and addr == 0
			assert e.dyntable.Uintptr == fakedyntable.Uintptr
	my.Check
