-- See LICENSE for details. Originally derived from go/src/pkg/bufio
-- Copyright 2009 The Go Authors. All rights reserved.

-- Note that while the spirit of the interfaces defined here may seem similar
-- to Go's bufio, in reality N's bufio behaves very differently. We're careful
-- to trigger I/O on the underlying streams only in the Fill and Flush methods.
-- By contrast, Go's bufio.Reader calls Read() even inside of Peek().
-- In N, we assume the caller may very much care about where I/O happens. In
-- this sense, bufio is much lower-level than in Go.

from n import *
import n.io
import n.fmt

let NEED_FILL = {Why=*"NEED_FILL: buffer empty"}:Error
let NEED_FLUSH = {Why=*"NEED_FLUSH: buffer full"}:Error

-- bufio.`Reader has no Fill method, see bufio.`Fillable_reader.
-- This allows for buffered readers that can be transparently filled (e.g.
-- without blocking). This is particularly useful for wrappers where having
-- to manually Fill would be a burden: see bufio.Bytes_reader.
--
-- Most implemantations should be `Fillable_reader.
--
intf `Reader =
	isa io.`Reader

	-- Number of buffered bytes, available to `Peek`.
	met Buffered = Uint

	-- Peek at up to `Buffered` bytes.
	-- If max is unspecified, assume Uint.MAX.
	met Peek ?max:?Uint = []U8

	-- Advance the buffer past the lesser of `count` or `Buffered` bytes.
	met! Skip_buffered count:Uint

-- A `Fillable_reader not only provides a Fill method, but declares that calling this
-- method is mandatory to read any data.
intf `Fillable_reader =
	isa `Reader
	-- Perform a read of up to `max` bytes. If `max` is unspecified, may
	-- read any number of bytes >= 1.
	--
	-- Return the number of bytes read during this call, and any underlying
	-- error. Similarly to `Read.Read, you must consider the bytes read
	-- (and possibly bytes that were already counted in Buffered before
	-- this call) before considering the error.
	--
	-- Like io.`Read, short reads need not return an error, unless they
	-- read nothing at all.
	--
	-- io.EOF returned here will also be returned when calls to Read
	-- reach the end of the buffered output, unless Fill is called in
	-- between.
	met# Fill ?max:?Uint = just_filled:Uint, Error


-- bufio.`Writer has no Flush method, see bufio.`Flushable_writer.
-- This allows for buffered writers that can be transparently flushed (e.g.
-- without blocking). This is particularly useful for wrappers where having
-- to manually Flush would be a burden: see bufio.Stringbuf_writer.
--
-- Most implemantations should be `Flushable_writer.
--
intf `Writer =
	isa io.`Writer

	-- Get a buffer to write into. The returned slice has `Count` 0, and
	-- `Cap` at least `min`. If `min` is unspecified, return a slice
	-- with non-zero Cap, or return an error.
	--
	-- The returned slice may be passed to `Write` to make the write
	-- effective, the implementation must recognize its own, avoid a copy,
	-- and this `Write` is guaranteed to return `OK`. If `Write` isn't
	-- called, no write happened.
	--
	-- An implementation may have a preferred size for this buffer, that
	-- lets it avoid allocation. It may also fail to return a buffer, but
	-- cannot return a smaller buffer than requested.
	met# Writing_buffer ?min:?Uint = Error, [!]U8

-- A `Flushable_writer not only provides a Flush method, but declares that calling this
-- method is mandatory to propagate any write.
intf `Flushable_writer =
	isa `Writer
	-- Propagate write of up to `max` bytes. Return any underlying error.
	-- An incomplete flush, like a partial write, must return an error.
	met# Flush ?max:?Uint = Error

	-- Number of buffered bytes, available to `Flush`.
	met Buffered = Uint


inline struct Reader =
	isa `Fillable_reader
	r		:#io.`Reader
	bufr		:?#`Reader -- If wrapping an already buffered reader.
	fillbufr	:?#`Fillable_reader -- If wrapping an already fillable buffered reader.
	buf		:Stringbuf
	pending		:String
	copier		:io.Copier
	saw_eof		:Bool

Reader fun Mk r:#io.`Reader = ret:this
	ret#r = r
	ret#bufr = (Dyncast `Reader) ret#R
	ret#fillbufr = (Dyncast `Fillable_reader) ret#R
	if not ret#bufr?
		ret!copier#Reset #ret#buf ret#R

Reader met# R = ?#io.`Reader
	return self#r

Reader met# Read b:[!]U8 = [!]U8, Error
	if self.bufr?
		return self#bufr#Read b

	if self.Buffered == 0
		if self.saw_eof
			return b, io.EOF
		return b, NEED_FILL

	let before = b.Count
	let result = b!Append self.pending.Bytes
	let read = result.Count - before
	self!pending = self.pending.[read ..]
	return result, OK

Reader met Buffered = Uint
	if self.bufr?
		return self.bufr.Buffered
	return self.pending.Count

-- Returns OK if max bytes were read. If unspecified, reads until io.EOF or
-- another read or write error.
Reader met# Fill ?max:?Uint = just_filled:Uint, Error
	if self#fillbufr?
		return self#fillbufr#Fill max=max
	if self#bufr?
		-- If it's not fillable, then it's already filled.
		-- Likely it's something like a bufio.Bytes_reader.
		return 0, io.EOF

	self#buf#Copy_from self.pending.Bytes
	just_filled = self.pending.Count
	let written, fill_err = self!copier#Copy max=max
	just_filled += written
	self#pending = self.buf.String

	self#saw_eof = fill_err == io.EOF
	return just_filled, fill_err

-- Does not Fill more data. Does not advance.
-- The returned slice is valid until the next call to Fill.
Reader met Peek ?max:?Uint = []U8
	if self.bufr?
		return self.bufr.Peek max=max
	let len = Min (max else Uint.MAX) self.pending.Count
	return self.pending.[.. len].Bytes

Reader met! Skip_buffered count:Uint
	if self.bufr?
		self!bufr!Skip_buffered count
		return
	self!pending = self.pending.[(Min count self.pending.Count) ..]

-- Convenience method.
-- Does not Fill more data. Does not advance.
-- The returned string is valid until the next call to Fill.
Reader met Peek_string ?max:?Uint = String
	return String.From_bytes <- self.Peek max=max

-- Does not Fill more data.
-- The returned slice is valid until the next call to Fill.
-- If a newline ("\r\n" or "\n") is not reached, it returns partial==true.
Reader met Peek_line = partial:Bool, line:String
	let pending = self.Peek_string
	let i = pending.Index_byte '\n'
	if i < 0
		line = pending
		partial = true
	else
		var eol = i.Unsigned
		if eol > 0 and pending.[eol-1] == '\r'
			eol -= 1
		line = pending.[.. eol]

-- Does not Fill more data.
-- The returned slice is valid until the next call to Fill.
-- If a newline "\n" is not reached, it returns partial==true.
Reader met Peek_lf_line = partial:Bool, line:String
	let pending = self.Peek_string
	let i = pending.Index_byte '\n'
	if i < 0
		line = pending
		partial = true
	else
		let eol = i.Unsigned
		line = pending.[.. eol]

-- Does not Fill more data.
-- The returned slice is valid until the next call to Fill.
-- If a newline "\r\n" is not reached, it returns partial==true.
Reader met Peek_crlf_line = partial:Bool, line:String
	let pending = self.Peek_string
	let i = pending.Index '\r\n'
	if i < 0
		line = pending
		partial = true
	else
		let eol = i.Unsigned
		line = pending.[.. eol]


struct prevent_passthrough_reader =
	isa io.`Reader
	r	:#Bytes_reader

prevent_passthrough_reader met# Read b:[!]U8 = [!]U8, Error
	return self#r#Read b


example reader
	let s = "This is a test"
	var sr = #<- Mk_string_reader s
	var r = #<- Reader.Mk #({r=sr}:prevent_passthrough_reader)

	var buf:Stringbuf
	buf#Reserve 32
	var b = buf!Bytes
	var err = OK

	b, err = r#Read b
	assert b.Count == 0 and err == NEED_FILL

	var cnt
	cnt, except = r#Fill max=4
	assert cnt == 4
	b, err = r#Read b
	assert b.Count == 4 and err == OK and b.Const == "This".Bytes

	cnt, err = r#Fill
	assert cnt == s.Count-4 and err == io.EOF
	b, err = r#Read b![.. 0]
	assert b.Count == s.Count-4 and err == OK and b.Const == s.Bytes.[4 ..]

	b, err = r#Read b
	assert b.Count == s.Count-4 and err == io.EOF


-- Write never block or return AGAIN. However, Flush may.
-- Flushes are not automatic. The buffer has no maximum size, it will keep
-- allocating more memory until it is flushed.

inline struct Writer =
	isa `Flushable_writer
	w		:?#io.`Writer
	bufw		:?#`Writer
	flushbufw	:?#`Flushable_writer
	buf		:Stringbuf
	pending		:[!]U8

Writer fun Mk w:#io.`Writer = ret:this
	ret#w = w
	ret#bufw = (Dyncast `Writer) ret#w
	ret#flushbufw = (Dyncast `Flushable_writer) ret#w

Writer met# W = ?#io.`Writer
	return self#w

Writer met# Write b:[]U8 = []U8, Error
	if self.bufw?
		return self#bufw#Write b
	_, _ = self#buf#Write b
	self!pending = self!buf!Bytes
	return {}, OK

Writer met Buffered = Uint
	if self.flushbufw?
		return self.flushbufw.Buffered
	if self.bufw?
		-- If it's not flushable, then it's already "flushed".
		-- Likely it's something like a Stringbuf.
		return 0
	return self.pending.Count

Writer met# Write_string s:String = Error
	_, except = self#Write s.Bytes

Writer met# Writing_buffer ?min:?Uint = Error, [!]U8
	if self.bufw?
		return self#bufw#Writing_buffer min=min
	if min? and min > self.pending.Available
		self#buf#Resize min
		self!pending = self!buf!Bytes
	return OK, self!pending!Available_capacity

Writer met# Flush ?max:?Uint = Error
	if self.flushbufw?
		return self#flushbufw#Flush max=max
	if self.bufw?
		-- If it's not flushable, then it's already "flushed".
		-- Likely it's something like a Stringbuf.
		return OK

	let len = max else self.pending.Count
	let left, wr_err = io.Write_full self#W self.pending.[.. len]
	let copied = len - left.Count
	self!pending = self!pending![copied ..]
	self#buf#Copy_from self!pending
	self!pending = self!buf!Bytes
	return wr_err


struct prevent_passthrough_writer =
	isa io.`Writer
	w	:#Stringbuf

prevent_passthrough_writer met# Write b:[]U8 = []U8, Error
	return self#w#Write b


example writer
	var buf:Stringbuf
	var w = #<- Writer.Mk #({w=#buf}:prevent_passthrough_writer)

	fmt.F w "This is a test."
	assert buf == ""
	fmt.F w " This is only a test."
	fmt.F w " Do not leave the dancefloor."
	assert buf == ""

	except = w#Flush max=4
	assert buf == "This"

	except = w#Flush
	assert buf == "This is a test. This is only a test. Do not leave the dancefloor."


enum Auto_mode =
	| FULLY_BUFFERED = 0
	| LINE_BUFFERED
	| UNBUFFERED


-- Wraps around a bufio.Reader and automatically loads the buffer when
-- depleted. May block.
inline struct Auto_reader =
	isa io.`Reader
	R	:#Reader

Auto_reader met# Read b:[!]U8 = r:[!]U8, err:Error
	if self.R.Buffered == 0
		_, drop = self#R#Fill

	r, err = self#R#Read b


-- Wraps around a bufio.Writer, and automatically flushes the buffer when it
-- contains Max bytes, or sooner according to the buffering mode.
-- Writes may block while the buffer is flushed.
--
-- FULLY_BUFFERED: automatically flush blocks of exactly Max bytes, or less if
-- flushed manually.
--
-- LINE_BUFFERED: automatically flush after the last newline byte in a write,
-- or flush blocks of exactly Max bytes, or less if flushed manually.
--
-- UNBUFFERED: bypass the underlying bufio.Writer entirely, uses io.Write_full
-- on the inner `Writer in the bufio.Writer.
--
-- Auto_writer does not assume that it is the only writer to the bufio.Writer.
inline struct Auto_writer =
	isa io.`Writer
	W	:#Writer
	Mode	:Auto_mode
	Max	:Uint

-- Underlying writes will be of max bytes, or self.Max if left unspecified.
Auto_writer met# Flush ?max:?Uint = Error
	return self#W#Flush max=max

Auto_writer met Buffered = Uint
	return self.W.Buffered

Auto_writer met# buffered_write b:[]U8 = r:[]U8, err:Error
	-- If someone else is writing to the bufio.Writer, try to maintain the
	-- block flushing behavior.
	while self.W.Buffered > self.Max
		err = self#W#Flush max=self.Max
		if err != OK
			return b, err

	r = b
	while r.Count > 0
		let room = self.Max - self.W.Buffered
		if r.Count <= room
			return self#W#Write r

		let head, tail = r.[.. room], r.[room ..]
		_, never = self#W#Write head

		err = self#W#Flush
		if err != OK
			return tail, err

		r = tail

Auto_writer met# Write b:[]U8 = r:[]U8, err:Error
	match self.Mode
	| FULLY_BUFFERED
		return self#buffered_write b

	| LINE_BUFFERED
		let bs = String.From_bytes b
		let last_nl = bs.Last_index_byte '\n'
		if last_nl < 0
			return self#buffered_write b

		let to_flush, not_to_flush = bs.Cut_at last_nl.Unsigned+1

		r, err = self#buffered_write to_flush.Bytes
		if err != OK
			return r, err
		err = self#W#Flush
		if err != OK
			return r, err

		return self#buffered_write not_to_flush.Bytes

	| UNBUFFERED
		return io.Write_full self#W#W b

example auto_writer_fully_buffered
	var buf:Stringbuf
	var w = Writer.Mk #({w=#buf}:prevent_passthrough_writer)
	var aw = #{W=#w Mode=FULLY_BUFFERED Max=16}:Auto_writer
	var left

	left, except = aw#Write "abc\n".Bytes
	assert left.Count == 0 and buf == ""

	left, except = aw#Write "abcabcabcabc".Bytes -- 4 + 12 bytes, will just hit Max: no flush.
	assert left.Count == 0 and buf == ""

	left, except = aw#Write "".Bytes
	assert left.Count == 0 and buf == ""
	left, except = aw#Write "a".Bytes
	assert left.Count == 0 and buf == "abc\nabcabcabcabc"

	except = aw#Flush
	assert buf == "abc\nabcabcabcabca"

example auto_writer_line_buffered
	var buf:Stringbuf
	var w = Writer.Mk #({w=#buf}:prevent_passthrough_writer)
	var aw = #{W=#w Mode=LINE_BUFFERED Max=16}:Auto_writer
	var left

	left, except = aw#Write "abc".Bytes
	assert left.Count == 0 and buf == ""

	left, except = aw#Write "\n".Bytes
	assert left.Count == 0 and buf == "abc\n"

	left, except = aw#Write "abc\nabc".Bytes
	assert left.Count == 0 and buf == "abc\nabc\n"
	assert aw.W.Buffered == 3

	left, except = aw#Write "abcabcabcabcd".Bytes -- 3 + 13 bytes, will just hit Max: no flush.
	assert left.Count == 0 and buf == "abc\nabc\n"

	left, except = aw#Write "e".Bytes -- Over Max: flush.
	assert left.Count == 0 and buf == "abc\nabc\nabcabcabcabcabcd"

	except = aw#Flush
	assert buf == "abc\nabc\nabcabcabcabcabcde"

	buf#Clear
	left, except = aw#Write "a\nabcabcabcabcabcd".Bytes -- nl flush, and 16 chars.
	assert left.Count == 0 and buf == "a\n"

	except = aw#Flush
	buf#Clear
	left, except = aw#Write "a\nabcabcabcabcabcde".Bytes -- nl flush, and 17 chars flush.
	assert left.Count == 0 and buf == "a\nabcabcabcabcabcd"

example auto_writer_unbuffered
	var buf:Stringbuf
	var w = Writer.Mk #buf
	var aw = #{W=#w Mode=UNBUFFERED}:Auto_writer
	var left

	left, except = aw#Write "abc".Bytes
	assert left.Count == 0 and buf == "abc"

	left, except = aw#Write "\n".Bytes
	assert left.Count == 0 and buf == "abc\n"

	left, except = aw#Write "abc\nabc".Bytes
	assert left.Count == 0 and buf == "abc\nabc\nabc"


-- Like io.Limited_reader, but buffered.
inline struct Limited_reader =
	isa `Fillable_reader
	R		:#Reader
	Left		:Uint
	-- left_fill <= Left
	-- We do not fill past the limit.
	left_fill	:Uint

Limited_reader fun Mk r:#Reader limit:Uint = ret:this
	ret#R = r
	ret#Left = limit
	ret#left_fill = limit - (Min limit r.Buffered)

Limited_reader met Buffered = Uint
	return Min self.Left self.R.Buffered

Limited_reader met Peek ?max:?Uint = []U8
	return self.R.Peek max=(Min self.Left (max else Uint.MAX))

Limited_reader met! Skip_buffered count:Uint
	assert count <= self.Buffered
	return self!R!Skip_buffered count

Limited_reader met# Fill ?max:?Uint = just_filled:Uint, Error
	if self.left_fill == 0
		return 0, io.EOF

	let buffered_before = self.R.Buffered
	let just_filled, err = self#R#Fill max=(Min self.left_fill (max else Uint.MAX))
	self!left_fill -= self.R.Buffered - buffered_before

	if self.left_fill == 0
		return just_filled, io.EOF
	return just_filled, err

Limited_reader met# Read b:[!]U8 = rb:[!]U8, rerr:Error
	if self.Left == 0
		return b, io.EOF

	var lim_b = b
	if lim_b.Available > self.Left
		lim_b = lim_b!Recapped lim_b.Count+self.Left

	rb, rerr = self.R.Read lim_b
	-- Return a slice with the original cap.
	rb = b.[.. rb.Count]

	self!Left -= rb.Count - b.Count
	if self.Left == 0
		rerr = io.EOF

example limited_reader
	let s = "Test"
	let r = Mk_string_reader s
	let lr = Limited_reader.Mk #(Reader.Mk #r) 3
	var buf:Stringbuf
	buf#Reserve 100
	var b, err = lr#Read (buf!Bytes!Recapped 1)
	assert err == OK and b.Count == 1 and b.Const == "T".Bytes and lr.Left == 2 and b.Cap == 1
	b, err = lr#Read buf!Bytes![.. 1]
	assert err == io.EOF and b.Count == 3 and b.Const == "Tes".Bytes and lr.Left == 0 and b.Cap == 100
	b, err  = lr#Read b
	assert err == io.EOF and b.Count == 3 and b.Const == "Tes".Bytes and lr.Left == 0 and b.Cap == 100
