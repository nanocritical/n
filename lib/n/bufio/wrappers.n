inline struct Bytes_reader =
	isa `Reader
	b	:[]U8
	cur	:[]U8

Bytes_reader fun Mk b:[]U8 = ret:this
	ret#b = b
	ret#cur = b

Bytes_reader met Bytes = []U8
	return self.b

Bytes_reader met Buffered = Uint
	return self.cur.Count

Bytes_reader met! Read_bytes ?max:?Uint = []U8
	let r = self.cur.[.. (Min self.cur.Count (max else Uint.MAX))]
	self!cur = self.cur.[r.Count ..]
	return r

Bytes_reader met! Read_string ?max:?Uint = String
	return String.From_bytes <- self!Read_bytes max=max

Bytes_reader met Peek ?max:?Uint = []U8
	return self.cur.[.. (Min self.cur.Count (max else Uint.MAX))]

Bytes_reader met! Skip_buffered count:Uint
	self!cur = self.cur.[(Min count self.cur.Count) ..]

Bytes_reader met Peek_string ?max:?Uint = String
	return String.From_bytes <- self.Peek max=max

Bytes_reader met! Rewind_buffered cnt:Uint
	let cur_beg = self.b.Count - self.cur.Count
	assert cnt <= cur_beg
	self!cur = self.b.[cur_beg - cnt ..]

Bytes_reader met! Read b:[!]U8 = [!]U8, Error
	if self.cur.Count == 0
		return b, io.EOF

	let copied = b!Available_elements!Copy self.cur
	self!cur = self.cur.[copied.Count ..]
	return b.[.. b.Count+copied.Count], OK

example bytes_reader_whole
	let s = "testabc"
	var br = Bytes_reader.Mk s.Bytes
	var buf:Stringbuf
	buf#Reserve 32
	var b = buf!Bytes
	b, except = br#Read b
	assert b.Count == s.Count
	assert b.Const == s.Bytes

example bytes_reader_partial
	let s = "testabc"
	var br = Bytes_reader.Mk s.Bytes
	var buf:Stringbuf
	buf#Reserve 4
	var b = buf!Bytes

	b, except = br#Read b
	assert b.Const == "test".Bytes
	b, except = br#Read b.[.. 0]
	assert b.Const == "abc".Bytes


fun Mk_string_reader s:String = r:Bytes_reader
	r = Bytes_reader.Mk s.Bytes


inline struct Bytes_writer =
	isa `Writer
	B	:[!]U8

Bytes_writer met! Write b:[]U8 = []U8, err:Error
	if self.B.Available == 0
		return b, io.SHORT_BUFFER

	let copied = self!B!Available_elements!Copy b
	self!B = self!B![.. self.B.Count + copied.Count]

	if copied.Count < b.Count
		err = io.SHORT_BUFFER
	return b.[copied.Count ..], err

Bytes_writer met! Writing_buffer ?min:?Uint = Error, [!]U8
	if not min? and self.B.Available == 0
		return NOMEM, {}
	if min? and min > self.B.Available
		return NOMEM, {}
	return OK, self!B!Available_capacity

Bytes_writer met! Rewind_buffered count:Uint
	assert count <= self.B.Count
	let end = self.B.Count - count
	self!B = self!B![.. end]

Bytes_writer met! Skip_buffered count:Uint
	let end = self.B.Count + count
	assert end <= self.B.Cap
	self!B = self!B![.. end]


example bytes_writer_short
	var buf:Stringbuf
	buf#Reserve 3
	var bw = #{B=buf!Bytes}:Bytes_writer
	var left, err = bw#Write "abcd".Bytes
	assert left.Count == 1 and left.[0] == 'd' and err == io.SHORT_BUFFER and bw.B.Const == "abc".Bytes

	bw#Rewind_buffered 1
	left, err = bw#Write "d".Bytes
	assert left.Count == 0 and err == OK and bw.B.Const == "abd".Bytes


example bytes_writer
	var buf:Stringbuf
	buf#Reserve 4
	var bw = #{B=buf!Bytes}:Bytes_writer
	var left, err = bw#Write "ab".Bytes
	assert left.Count == 0 and err == OK and bw.B.Const == "ab".Bytes
	left, err = bw#Write "cd".Bytes
	assert left.Count == 0 and err == OK and bw.B.Const == "abcd".Bytes
	left, err = bw#Write "ef".Bytes
	assert left.Count == 2 and err == io.SHORT_BUFFER and bw.B.Const == "abcd".Bytes


-- Tolerates arbitrary changes on the underlying Stringbuf between reads.
-- If the current value of `Pos` points past the end of `S`, read nothing
-- and return EOF, leaving `Pos` unchanged.
struct Stringbuf_reader =
	isa `Reader
	S	:*Stringbuf
	Pos	:Uint

Stringbuf_reader fun Mk s:*Stringbuf ?beg:?Uint = ret:this
	ret#S = s
	ret#Pos = beg else 0

Stringbuf_reader met# Read b:[!]U8 = [!]U8, err:Error
	if self.Pos >= self.S.Count
		return {}, io.EOF

	let copied = b!Available_elements!Copy self.S.Bytes.[self.Pos ..]
	self#Pos += copied.Count

	if self.Pos == self.S.Count
		err = io.EOF

	return b.[.. b.Count+copied.Count], err

Stringbuf_reader met Buffered = Uint
	if self.Pos >= self.S.Count
		return 0
	return self.S.Count - self.Pos

Stringbuf_reader met Peek ?max:?Uint = []U8
	if self.Pos >= self.S.Count
		return {}
	return self.S.Bytes.[self.Pos .. (Min self.S.Count self.Pos+(max else 0))]

Stringbuf_reader met! Skip_buffered count:Uint
	if self.Pos >= self.S.Count
		return
	self!Pos += Min count self.S.Count-self.Pos
