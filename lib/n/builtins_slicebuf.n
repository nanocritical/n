inline struct Slicebuf t:`Any =
	isa `Trivial_array_ctor `Trivial_ctor `Copyable (`Random_container t)
	s	:[]!t	--::^Owned

inline Slicebuf fun With s:[]t = this
	let r = {}:this such
		r#Reserve s.Count
		r#s = r!s!Copy s
	return r

inline Slicebuf fun From_array c:[]t = r:this
	return this.With c

inline Slicebuf met Count = Uint
	return self.s.Count

inline Slicebuf met All = Range
	return self.s.All

inline Slicebuf met$ Buf = []$t
	return self$s

inline Slicebuf met# Clear
	self!s = self.s.[.. 0]
	self#Auto_shrink

inline Slicebuf met# Push = @#t
	let nend = self.s.Count + 1
	self#Reserve nend
	self!s = self!s![.. nend]
	return self#Last

inline Slicebuf shallow met$ First = @$t
	return self$s$First

inline Slicebuf shallow met$ Last = @$t
	return self$s$Last

inline Slicebuf shallow met$ Operator_at n:Uint = r:@$t
	return self$s$Operator_at n

inline Slicebuf shallow met$ Operator_sub r:Range = []$t
	return self$s$Operator_sub r

inline Slicebuf met# Pop
	Assert <- self.s.Count > 0
	self!s = self.s.[.. self.s.Count-1]
	self#Auto_shrink

inline Slicebuf met# Append s:[]t
	self#Reserve self.s.Count + s.Count
	self#s = self!s!Append s

inline Slicebuf met# Copy s:[]t
	self#Reserve s.Count
	self#s = self.s!Copy s

inline Slicebuf met# Reserve atleast:Uint
	if self.s.cap >= atleast
		return
	Realloc @#self#s atleast

-- FIXME: unexport.
inline Slicebuf met# Auto_shrink
	let cap = self.s.Cap
	and cnt = self.s.Count
	if cap == 0
		return
	let newcap = cap such
		if cnt == 0
			newcap = 0
		elif cnt < cap / 2
			newcap = cnt
	Realloc @#self#s newcap
