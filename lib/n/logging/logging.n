from n import *
import n.io
import n.stdio
import n.bufio
import n.syscall
import n.fmt

globalenv Log:#`Log

intf `Log =
	isa io.`Writer
	met# Emergency format:String ?_Ncodeloc:?*Codeloc ...v:(Vararg ?*`Show)
	met# Alert format:String ?_Ncodeloc:?*Codeloc ...v:(Vararg ?*`Show)
	met# Critical format:String ?_Ncodeloc:?*Codeloc ...v:(Vararg ?*`Show)
	met# Error format:String ?_Ncodeloc:?*Codeloc ...v:(Vararg ?*`Show)
	met# Warning format:String ?_Ncodeloc:?*Codeloc ...v:(Vararg ?*`Show)
	met# Notice format:String ?_Ncodeloc:?*Codeloc ...v:(Vararg ?*`Show)
	met# Info format:String ?_Ncodeloc:?*Codeloc ...v:(Vararg ?*`Show)
	met# Debug format:String ?_Ncodeloc:?*Codeloc ...v:(Vararg ?*`Show)

fun Install_sys within Log
	let s = Alloc formatter
	let header = Alloc (Envheader #`Log)
	header#Env = s
	Globalenv_install Log header


-- TODO(e): Make it configurable via Env: whether locations are printed at
-- all, whether the full path is shown, etc.
fun write_header w:#io.`Writer header:String c:?*Codeloc
	if not c?
		fmt.F w "%s: " header
		return

	let last_slash = 1 + (c.File.Last_index_byte '/')
	fmt.F w "%s [%s:%s %s]: " header c.File.[last_slash.Unsigned ..] c.Line c.Function


fun New w:?@#io.`Writer = @#`Log
	let r = Alloc formatter
	r!w = w
	return r


struct formatter =
	isa io.`Writer `Log
	buf	:Stringbuf
	w	:?@#io.`Writer

formatter met# Write b:[]U8 = []U8, Error within stdio.Stdio
	if self.w?
		return self.w.Write b
	return Stdio.Err.Write b

formatter met# flush
	_, drop = io.Write_full self self.buf.Bytes
	self#buf#Clear

formatter met# Emergency format:String ?_Ncodeloc:?*Codeloc ...v:(Vararg ?*`Show)
	write_header #self#buf "Emergency" _Ncodeloc
	fmt.F #self#buf format ...v
	fmt.F #self#buf "\n"
	self#flush

formatter met# Alert format:String ?_Ncodeloc:?*Codeloc ...v:(Vararg ?*`Show)
	write_header #self#buf "Alert" _Ncodeloc
	fmt.F #self#buf format ...v
	fmt.F #self#buf "\n"
	self#flush

formatter met# Critical format:String ?_Ncodeloc:?*Codeloc ...v:(Vararg ?*`Show)
	write_header #self#buf "Critical" _Ncodeloc
	fmt.F #self#buf format ...v
	fmt.F #self#buf "\n"
	self#flush

formatter met# Error format:String ?_Ncodeloc:?*Codeloc ...v:(Vararg ?*`Show)
	write_header #self#buf "Error" _Ncodeloc
	fmt.F #self#buf format ...v
	fmt.F #self#buf "\n"
	self#flush

formatter met# Warning format:String ?_Ncodeloc:?*Codeloc ...v:(Vararg ?*`Show)
	write_header #self#buf "Warning" _Ncodeloc
	fmt.F #self#buf format ...v
	fmt.F #self#buf "\n"
	self#flush

formatter met# Notice format:String ?_Ncodeloc:?*Codeloc ...v:(Vararg ?*`Show)
	write_header #self#buf "Notice" _Ncodeloc
	fmt.F #self#buf format ...v
	fmt.F #self#buf "\n"
	self#flush

formatter met# Info format:String ?_Ncodeloc:?*Codeloc ...v:(Vararg ?*`Show)
	write_header #self#buf "Info" _Ncodeloc
	fmt.F #self#buf format ...v
	fmt.F #self#buf "\n"
	self#flush

formatter met# Debug format:String ?_Ncodeloc:?*Codeloc ...v:(Vararg ?*`Show)
	write_header #self#buf "Debug" _Ncodeloc
	fmt.F #self#buf format ...v
	fmt.F #self#buf "\n"
	self#flush
