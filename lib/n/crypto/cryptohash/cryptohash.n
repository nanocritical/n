from n import *
import openssl
import n.fmt
import n.io
import n.encoding.hex

inline enum Function =
	| SHA256 = 0
	| SHA224
	| SHA384
	| SHA512
	| SHA1
	| MD5

Function met Bytecount = Uint
	match self
	| SHA256 -> return 256/8
	| SHA224 -> return 224/8
	| SHA384 -> return 384/8
	| SHA512 -> return 512/8
	| SHA1 -> return 160/8
	| MD5 -> return 128/8

Function met openssl_evp_md = *openssl.EVP_MD
	match self
	| SHA256 -> return openssl.EVP_sha256
	| SHA224 -> return openssl.EVP_sha224
	| SHA384 -> return openssl.EVP_sha384
	| SHA512 -> return openssl.EVP_sha512
	| SHA1 -> return openssl.EVP_sha1
	| MD5 -> return openssl.EVP_md5


inline struct Digest =
	isa `Show `Has_equality `Hashable32
	Function	:Function
	Binary		:Stringbuf
	Is_hmac		:Bool

Digest met Show st:#fmt.`State
	let hmac such
		if self.Is_hmac
			hmac = "HMAC-"
	-- Function tag at the end to make bytewise comparison stop faster.
	fmt.F st "%s:%s%s" self.Hex hmac self.Function

Digest met Hex = r:Stringbuf
	r#Resize <- hex.Encoded_length self.Function.Bytecount
	never, _ = hex.Encode r!Bytes self.Binary.Bytes

Digest met Hash32 = U32
	return self.Binary.Hash32

Digest met Operator_eq other:*this = Bool
	return self.Function == other.Function and self.Binary == other.Binary
		\ and self.Is_hmac == other.Is_hmac
Digest met Operator_ne other:*this = Bool
	return not self == other


-- Convenience function.
fun Hash function:Function b:[]U8 = md:Digest
	var state:State
	state#Init function
	_, never = state#Write b
	md = state#Final


inline struct State =
	isa io.`Writer
	ctx		:openssl.EVP_MD_CTX
	ctx_initialized	:Bool
	function	:Function

State met# Dtor
	never = openssl.EVP_MD_CTX_cleanup #self#ctx

State met# Init function:Function
	if not self.ctx_initialized
		openssl.EVP_MD_CTX_init #self#ctx
		self#ctx_initialized = true

	self#function = function
	never = openssl.EVP_DigestInit_ex #self#ctx self.function.openssl_evp_md nil

State met# Write b:[]U8 = empty:[]U8, Error
	assert self.ctx_initialized
	never = openssl.EVP_DigestUpdate #self#ctx b

State met# Final = digest:Digest
	assert self.ctx_initialized
	digest#Function = self.function
	digest#Binary#Resize self.function.Bytecount
	never, _ = openssl.EVP_DigestFinal_ex #self#ctx digest!Binary!Bytes![.. 0]


example sha1
	let msg = "def"

	var state:State
	state#Init SHA1
	_, never = state#Write msg.Bytes
	let md = state#Final
	assert md.Function == SHA1
	assert md.Hex == "589c22335a381f122d129225f5c0ba3056ed5811"

	let mdcpy = md
	assert md == mdcpy

	var buf:Stringbuf
	fmt.F #buf "%s" md
	assert buf == "589c22335a381f122d129225f5c0ba3056ed5811:SHA1"

	let md2 = Hash SHA1 msg.Bytes
	assert md2.Function == SHA1
	assert md2.Hex == "589c22335a381f122d129225f5c0ba3056ed5811"

	let md3 = Hash MD5 msg.Bytes
	assert md3.Function == MD5
	assert md3.Hex == "4ed9407630eb1000c0f6b63842defa7d"

	let md4 = Hash SHA256 msg.Bytes
	assert md4.Function == SHA256
	assert md4.Hex == "cb8379ac2098aa165029e3938a51da0bcecfc008fd6795f401178647f96c5b34"



-- Convenience function.
fun Hmac function:Function key:[]U8 b:[]U8 = md:Digest
	var state:Hmac_state
	state#Init function key
	_, never = state#Write b
	md = state#Final


inline struct Hmac_state =
	isa io.`Writer
	ctx		:openssl.HMAC_CTX
	ctx_initialized	:Bool
	function	:Function

Hmac_state met# Dtor
	openssl.HMAC_CTX_cleanup #self#ctx

Hmac_state met# Init function:Function key:[]U8
	if not self.ctx_initialized
		openssl.HMAC_CTX_init #self#ctx
		self#ctx_initialized = true

	self#function = function
	never = openssl.HMAC_Init_ex #self#ctx key self.function.openssl_evp_md nil

Hmac_state met# Write b:[]U8 = empty:[]U8, Error
	assert self.ctx_initialized
	never = openssl.HMAC_Update #self#ctx b

Hmac_state met# Final = digest:Digest
	assert self.ctx_initialized
	digest#Function = self.function
	digest#Binary#Resize self.function.Bytecount
	never, _ = openssl.HMAC_Final #self#ctx digest!Binary!Bytes![.. 0]
	digest#Is_hmac = true


example hmac_sha1
	let key = "abc"
	let msg = "def"

	var state:Hmac_state
	state#Init SHA1 key.Bytes
	_, never = state#Write msg.Bytes
	let md = state#Final
	assert md.Function == SHA1
	assert md.Hex == "12554eabbaf7e8e12e4737020f987ca7901016e5"

	let mdcpy = md
	assert md == mdcpy

	var buf:Stringbuf
	fmt.F #buf "%s" md
	assert buf == "12554eabbaf7e8e12e4737020f987ca7901016e5:HMAC-SHA1"
