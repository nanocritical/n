from n import *
import n.unsafe
from n.sysheap import Heap

opaque struct Vector t:`Copyable =
	isa `Trivial_ctor (`Array_ctor t) `Copyable (`Random_container t)
	p	:[]!t
	c	:Uint

inline Vector fun From_array c:@(Static_array t) = r:this
	r#Reserve c.Count
	foreach i in c.All
		r#Push c.[i].

inline Vector met Count = Uint
	return self.c

inline Vector shallow met$ Operator_at n:Uint = @$t
	Assert <- n < self.c
	return self$p$[n]

inline Vector met$ First = @$t
	return self$[0]

inline Vector met$ Last = @$t
	return self$[self.c-1]

inline Vector met Is_empty = Bool
	return self.c == 0

inline Vector met Capacity = Uint
	return self.p.Count

inline Vector met# Reserve n:Uint
	if n > self.Capacity
		(Heap.Slice_realloc t) @!Sysheap @#self#p n

inline Vector met# Resize n:Uint
	(Heap.Slice_realloc t) @!Sysheap @#self#p n
	self!c = n

inline Vector met# Push x:t
	self#Reserve self.c+1
	let n = self.c
	self!c += 1
	let d = self![n]
	d! = x

inline Vector met# Pop = t
	Assert <- self.c != 0
	let d = self.Last
	self!c -= 1
	return d.

inline Vector met# Clear
	(Heap.Slice_free t) @!Sysheap @#self#p

inline Vector met All = Range
	return 0 .. self.Count

inline Vector met# Copy_ctor other:@this
	(Heap.Slice_realloc t) @!Sysheap @#self#p other.p.Count
	self.p!Copy other.p
	self!c = other.c

inline Vector met# Append_slice other:[]t
	(Heap.Slice_realloc t) @!Sysheap @#self#p self.Count+other.Count
	self.p![self.c ..]!Copy other
	self!c = other.Count

inline Vector met$ Storage = []$t
	return self$p
