from n.builtins export *
from n.containers export *
import n.crypto.rand
import n.fs

fun write_buf fd:I32 s:*U8 Count:Uint

fun Pr ?err:?Bool ?sep:?*String ...v:(Vararg ?*`Show)
	let buf = {}:Stringbuf such
		buf#Pr sep=sep ...v
	let b = buf.Bytes
	let fd = 1 such
		if err else false
			fd = 2
	write_buf fd b.Unsafe_data b.Bytecount

fun Prn ?err:?Bool ?sep:?*String ...v:(Vararg ?*`Show)
	let buf = {}:Stringbuf such
		buf#Prn sep=sep ...v
	let b = buf.Bytes
	let fd = 1 such
		if err else false
			fd = 2
	write_buf fd b.Unsafe_data b.Bytecount

fun Epr ?sep:?*String ...v:(Vararg ?*`Show)
	Pr err=true sep=sep ...v

fun Eprn ?sep:?*String ...v:(Vararg ?*`Show)
	Prn err=true sep=sep ...v

inline (fun t:`Any r:(`Any_ref t)) Just_const p:r = *t
	return p

inline (fun t:`Any r:(`Any_mutable_ref t)) Just_mutable p:r = !t
	return p
