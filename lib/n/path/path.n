-- See LICENSE for details. Originally derived from go/src/pkg/path
-- Copyright 2009 The Go Authors. All rights reserved.

from n import *
import n.fmt

fun Mk name:String = r:Path
	r#Init name

inline struct Path =
	isa `String
	buf	:Stringbuf

Path fun From_slice name:[]U8 = r:this
	r#buf#Resize name.Count
	r!buf!Bytes!Exact_copy name

Path met# Init name:String
	self#buf#Cat name

Path met String = String
	return self.buf.String

Path met Hash32 = U32
	return self.buf.Hash32

Path fun From_string s:String = r:this
	r#buf#Cat s

Path fun From_bytes s:[]U8 = r:this
	_, _ = r#buf#Write s

Path met Count = Uint
	return self.buf.Count

Path met First = U8
	return self.buf.First

Path met Last = U8
	return self.buf.Last

Path met Operator_at n:Uint = U8
	return self.buf.[n].

Path met$ Operator_sub r:Range = []$U8
	return self$buf$Bytes$Operator_sub r

Path met Bytes = []U8
	return self.buf.Bytes

Path met Operator_compare other:@this = Int
	return self.buf.Operator_compare other.buf

Path met Operator_eq other:@this = Bool
	if self === other
		return true
	return self.Operator_compare other == 0
Path met Operator_ne other:@this = Bool
	if self === other
		return false
	return self.Operator_compare other != 0
Path met Operator_le other:@this = Bool
	if self === other
		return true
	return self.Operator_compare other <= 0
Path met Operator_lt other:@this = Bool
	if self === other
		return false
	return self.Operator_compare other < 0
Path met Operator_gt other:@this = Bool
	if self === other
		return false
	return self.Operator_compare other > 0
Path met Operator_ge other:@this = Bool
	if self === other
		return true
	return self.Operator_compare other >= 0

Path met Show st:@#fmt.`State
	let _ = st#Write self.Bytes

Path met# Clear
	self#buf#Clear

Path met# Resize cnt:Uint
	self#buf#Resize cnt

Path met# Push c:U8
	self#buf#Push c

Path met# Pop = U8
	return self#buf#Pop

Path met# Append b:[]U8
	self#buf#Append b

Path met# Copy b:[]U8
	self#buf#Copy b

Path met# Reserve atleast:Uint
	self#buf#Reserve atleast

Path met# Cat ?sep:?@String ...v:(Vararg @`String)
	self#buf#Cat sep=sep ...v

Path met# Clean
	if self.buf == ""
		self#buf = "."
		return

	let SLASH = "/".[0]
	and DOT = ".".[0]

	-- Processing is in place, as Clean can only shorten the path.
	let path = @!self!buf
	and n = path.Count
	and rooted = self.buf.[0] == SLASH
	and w, r, dotdot = 0, 0, 0
	such
		if rooted
			w, r, dotdot = 1, 1, 1

		while r < n
			if path.[r] == SLASH
				r += 1
			elif path.[r] == DOT and (r+1 == n or path.[r+1] == SLASH)
				r += 1
			elif path.[r] == DOT and path.[r+1] == DOT and (r+2 == n or path.[r+2] == SLASH)
				-- .. element: remove to last /
				r += 2
				if w > dotdot
					-- can backtrack
					w -= 1
					while w > dotdot and path.[w] != SLASH
						w -= 1
				elif not rooted
					-- cannot backtrack, but not rooted, so append .. element
					if w > 0
						path![w]! = SLASH
						w += 1
					path![w]! = DOT
					w += 1
					path![w]! = DOT
					w += 1
					dotdot = w
			else
				-- real path element.
				-- add slash if needed
				if (rooted and w != 1) or (not rooted and w != 0)
					path![w]! = SLASH
					w += 1
				while r < n and path.[r] != SLASH
					path![w]! = path.[r].
					w += 1
					r += 1
	self#buf#Resize w

example -> let p = "a/c":Path such p#Clean; assert p == "a/c"
example -> let p = "a//c":Path such p#Clean; assert p == "a/c"
example -> let p = "a/c/.":Path such p#Clean; assert p == "a/c"
example -> let p = "a/c/":Path such p#Clean; assert p == "a/c"
example -> let p = "a/c/b/..":Path such p#Clean; assert p == "a/c"
example -> let p = "/../a/c":Path such p#Clean; assert p == "/a/c"
example -> let p = "/../a/b/../././/c":Path such p#Clean; assert p == "/a/c"
example -> let p = "///":Path such p#Clean; assert p == "/"

Path met Split = Path, Path
	let path = self.buf.String
	let i = path.Last_index_byte "/".[0]
	let enddir = (i + 1).Unsigned
	return Path.From_string path.[.. enddir], Path.From_string path.[enddir ..]

example -> let p = "a/b":Path such let d, b = p.Split; assert d == "a/" and b == "b"
example -> let p = "/b":Path such let d, b = p.Split; assert d == "/" and b == "b"
example -> let p = "/":Path such let d, b = p.Split; assert d == "/" and b == ""
example -> let p = "":Path such let d, b = p.Split; assert d == "" and b == ""

Path met Base = Path
	let path = self.buf.String
	let i = path.Last_index_byte "/".[0]
	let enddir = (i + 1).Unsigned
	return Path.From_string path.[enddir ..]

example -> let p = "a/b":Path such let b = p.Base; assert b == "b"
example -> let p = "/b":Path such let b = p.Base; assert b == "b"
example -> let p = "/":Path such let b = p.Base; assert b == "" -- go says "/"
example -> let p = "":Path such let b = p.Base; assert b == "" -- go says "."

Path met# Join ...v:(Vararg @`Show)
	self#buf#Pr sep="/" ...v
	self#Clean
	return

example -> let p = "":Path such p#Join "a" "b" "c"; assert p == "a/b/c"
example -> let p = "/":Path such p#Join "a" "b" "c"; assert p == "/a/b/c"
example -> let p = "":Path such p#Join "a" "b" "/c"; assert p == "a/b/c"

Path met Ext = Path
	let path = self.buf.String
	for i in path.All.Reverse_iter
		if path.[i] == ".".[0]
			return Path.From_string path.[i ..]
	return ""

example -> let p = "test.jpg":Path such assert p.Ext == ".jpg"
example -> let p = "test.png.jpg":Path such assert p.Ext == ".jpg"
example -> let p = "test.png.":Path such assert p.Ext == "."
example -> let p = ".":Path such assert p.Ext == "."
example -> let p = "t":Path such assert p.Ext == ""
example -> let p = "":Path such assert p.Ext == ""

Path met Is_abs = Bool
	return self.Count > 0 and self.[0] == "/".[0]

example -> let p = "/a":Path such assert p.Is_abs
example -> let p = "":Path such assert not p.Is_abs
