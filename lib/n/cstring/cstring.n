from n import *
import n.syscall

inline union Cstring =
	| ORIG -> String
	| BUF -> Stringbuf

Cstring met Count = Uint
	match self
	| ORIG -> return self.ORIG.Count
	| BUF -> return self.BUF.Count

Cstring met Rawdata = *U8
	match self
	| ORIG -> return self.ORIG.Bytes.Unsafe_rawdata
	| BUF -> return self.BUF.Bytes.Unsafe_rawdata

Cstring met String = String
	match self
	| ORIG -> return self.ORIG
	| BUF -> return self.BUF.String

fun Wrap_raw_cstring raw:*U8 = Cstring
	let len = syscall.Strlen raw
	let b = {}:[]U8 such b#Unsafe_wrap raw len len
	let r = String.From_bytes b
	return r:Cstring.ORIG

fun Mk s:String = r:Cstring
	let b = s.Bytes
	if b.Count > 0 and b.Last == 0
		return s:Cstring.ORIG
	if b.Cap > b.Count
		let ext = b.[.. s.Count+1]
		if ext.Last == 0
			return s:Cstring.ORIG
	r = {}:Cstring.BUF
	r#BUF#Append s.Bytes
	r#BUF#Push 0

example
	let x = {}:[]U8
	let cx = Mk <- String.From_bytes x
	assert syscall.Strlen cx.Rawdata == 0

example
	let x = {0}:[]U8
	let cx = Mk <- String.From_bytes x
	assert syscall.Strlen cx.Rawdata == 0

example
	let A = ('a':Rune).Code.Trim_u8
	let x = {A A+1 A+2}:[]U8
	let cx = Mk <- String.From_bytes x
	assert syscall.Strlen cx.Rawdata == 3

example
	let A = ('a':Rune).Code.Trim_u8
	let x = {A A+1 A+2 0}:[]U8
	x = x.[.. 3]
	assert x.Count == 3
	assert x.Cap == 4
	let cx = Mk <- String.From_bytes x
	assert syscall.Strlen cx.Rawdata == 3
