from n import *
import n.cstring

extern let _EPERM:I32
extern let _ENOENT:I32
extern let _ESRCH:I32
extern let _EINTR:I32
extern let _EIO:I32
extern let _ENXIO:I32
extern let _E2BIG:I32
extern let _ENOEXEC:I32
extern let _EBADF:I32
extern let _ECHILD:I32
extern let _EAGAIN:I32
extern let _ENOMEM:I32
extern let _EACCES:I32
extern let _EFAULT:I32
extern let _ENOTBLK:I32
extern let _EBUSY:I32
extern let _EEXIST:I32
extern let _EXDEV:I32
extern let _ENODEV:I32
extern let _ENOTDIR:I32
extern let _EISDIR:I32
extern let _EINVAL:I32
extern let _ENFILE:I32
extern let _EMFILE:I32
extern let _ENOTTY:I32
extern let _ETXTBSY:I32
extern let _EFBIG:I32
extern let _ENOSPC:I32
extern let _ESPIPE:I32
extern let _EROFS:I32
extern let _EMLINK:I32
extern let _EPIPE:I32
extern let _EDOM:I32
extern let _ERANGE:I32
extern let _EDEADLK:I32
extern let _ENAMETOOLONG:I32
extern let _ENOLCK:I32
extern let _ENOSYS:I32
extern let _ENOTEMPTY:I32
extern let _ELOOP:I32
extern let _EWOULDBLOCK:I32
extern let _ENOMSG:I32
extern let _EIDRM:I32
extern let _ECHRNG:I32
extern let _EL2NSYNC:I32
extern let _EL3HLT:I32
extern let _EL3RST:I32
extern let _ELNRNG:I32
extern let _EUNATCH:I32
extern let _ENOCSI:I32
extern let _EL2HLT:I32
extern let _EBADE:I32
extern let _EBADR:I32
extern let _EXFULL:I32
extern let _ENOANO:I32
extern let _EBADRQC:I32
extern let _EBADSLT:I32
extern let _EDEADLOCK:I32
extern let _EBFONT:I32
extern let _ENOSTR:I32
extern let _ENODATA:I32
extern let _ETIME:I32
extern let _ENOSR:I32
extern let _ENONET:I32
extern let _ENOPKG:I32
extern let _EREMOTE:I32
extern let _ENOLINK:I32
extern let _EADV:I32
extern let _ESRMNT:I32
extern let _ECOMM:I32
extern let _EPROTO:I32
extern let _EMULTIHOP:I32
extern let _EDOTDOT:I32
extern let _EBADMSG:I32
extern let _EOVERFLOW:I32
extern let _ENOTUNIQ:I32
extern let _EBADFD:I32
extern let _EREMCHG:I32
extern let _ELIBACC:I32
extern let _ELIBBAD:I32
extern let _ELIBSCN:I32
extern let _ELIBMAX:I32
extern let _ELIBEXEC:I32
extern let _EILSEQ:I32
extern let _ERESTART:I32
extern let _ESTRPIPE:I32
extern let _EUSERS:I32
extern let _ENOTSOCK:I32
extern let _EDESTADDRREQ:I32
extern let _EMSGSIZE:I32
extern let _EPROTOTYPE:I32
extern let _ENOPROTOOPT:I32
extern let _EPROTONOSUPPORT:I32
extern let _ESOCKTNOSUPPORT:I32
extern let _EOPNOTSUPP:I32
extern let _EPFNOSUPPORT:I32
extern let _EAFNOSUPPORT:I32
extern let _EADDRINUSE:I32
extern let _EADDRNOTAVAIL:I32
extern let _ENETDOWN:I32
extern let _ENETUNREACH:I32
extern let _ENETRESET:I32
extern let _ECONNABORTED:I32
extern let _ECONNRESET:I32
extern let _ENOBUFS:I32
extern let _EISCONN:I32
extern let _ENOTCONN:I32
extern let _ESHUTDOWN:I32
extern let _ETOOMANYREFS:I32
extern let _ETIMEDOUT:I32
extern let _ECONNREFUSED:I32
extern let _EHOSTDOWN:I32
extern let _EHOSTUNREACH:I32
extern let _EALREADY:I32
extern let _EINPROGRESS:I32
extern let _ESTALE:I32
extern let _EUCLEAN:I32
extern let _ENOTNAM:I32
extern let _ENAVAIL:I32
extern let _EISNAM:I32
extern let _EREMOTEIO:I32
extern let _EDQUOT:I32
extern let _ENOMEDIUM:I32
extern let _EMEDIUMTYPE:I32
extern let _ECANCELED:I32
extern let _ENOKEY:I32
extern let _EKEYEXPIRED:I32
extern let _EKEYREVOKED:I32
extern let _EKEYREJECTED:I32
extern let _EOWNERDEAD:I32
extern let _ENOTRECOVERABLE:I32
extern let _ERFKILL:I32
extern let _EHWPOISON:I32

let EPERM = {Why=@"Operation not permitted"}:Error
let ENOENT = {Why=@"No such file or directory"}:Error
let ESRCH = {Why=@"No such process"}:Error
let EINTR = {Why=@"Interrupted system call"}:Error
let EIO = {Why=@"I/O error"}:Error
let ENXIO = {Why=@"No such device or address"}:Error
let E2BIG = {Why=@"Argument list too long"}:Error
let ENOEXEC = {Why=@"Exec format error"}:Error
let EBADF = {Why=@"Bad file number"}:Error
let ECHILD = {Why=@"No child processes"}:Error
let EAGAIN = {Why=@"Try again"}:Error
let ENOMEM = {Why=@"Out of memory"}:Error
let EACCES = {Why=@"Permission denied"}:Error
let EFAULT = {Why=@"Bad address"}:Error
let ENOTBLK = {Why=@"Block device required"}:Error
let EBUSY = {Why=@"Device or resource busy"}:Error
let EEXIST = {Why=@"File exists"}:Error
let EXDEV = {Why=@"Cross-device link"}:Error
let ENODEV = {Why=@"No such device"}:Error
let ENOTDIR = {Why=@"Not a directory"}:Error
let EISDIR = {Why=@"Is a directory"}:Error
let EINVAL = {Why=@"Invalid argument"}:Error
let ENFILE = {Why=@"File table overflow"}:Error
let EMFILE = {Why=@"Too many open files"}:Error
let ENOTTY = {Why=@"Not a typewriter"}:Error
let ETXTBSY = {Why=@"Text file busy"}:Error
let EFBIG = {Why=@"File too large"}:Error
let ENOSPC = {Why=@"No space left on device"}:Error
let ESPIPE = {Why=@"Illegal seek"}:Error
let EROFS = {Why=@"Read-only file system"}:Error
let EMLINK = {Why=@"Too many links"}:Error
let EPIPE = {Why=@"Broken pipe"}:Error
let EDOM = {Why=@"Math argument out of domain of func"}:Error
let ERANGE = {Why=@"Math result not representable"}:Error
let EDEADLK = {Why=@"Resource deadlock would occur"}:Error
let ENAMETOOLONG = {Why=@"File name too long"}:Error
let ENOLCK = {Why=@"No record locks available"}:Error
let ENOSYS = {Why=@"Function not implemented"}:Error
let ENOTEMPTY = {Why=@"Directory not empty"}:Error
let ELOOP = {Why=@"Too many symbolic links encountered"}:Error
let EWOULDBLOCK = {Why=@"Operation would block"}:Error
let ENOMSG = {Why=@"No message of desired type"}:Error
let EIDRM = {Why=@"Identifier removed"}:Error
let ECHRNG = {Why=@"Channel number out of range"}:Error
let EL2NSYNC = {Why=@"Level 2 not synchronized"}:Error
let EL3HLT = {Why=@"Level 3 halted"}:Error
let EL3RST = {Why=@"Level 3 reset"}:Error
let ELNRNG = {Why=@"Link number out of range"}:Error
let EUNATCH = {Why=@"Protocol driver not attached"}:Error
let ENOCSI = {Why=@"No CSI structure available"}:Error
let EL2HLT = {Why=@"Level 2 halted"}:Error
let EBADE = {Why=@"Invalid exchange"}:Error
let EBADR = {Why=@"Invalid request descriptor"}:Error
let EXFULL = {Why=@"Exchange full"}:Error
let ENOANO = {Why=@"No anode"}:Error
let EBADRQC = {Why=@"Invalid request code"}:Error
let EBADSLT = {Why=@"Invalid slot"}:Error
let EDEADLOCK = {Why=@"Resource deadlock would occur"}:Error
let EBFONT = {Why=@"Bad font file format"}:Error
let ENOSTR = {Why=@"Device not a stream"}:Error
let ENODATA = {Why=@"No data available"}:Error
let ETIME = {Why=@"Timer expired"}:Error
let ENOSR = {Why=@"Out of streams resources"}:Error
let ENONET = {Why=@"Machine is not on the network"}:Error
let ENOPKG = {Why=@"Package not installed"}:Error
let EREMOTE = {Why=@"Object is remote"}:Error
let ENOLINK = {Why=@"Link has been severed"}:Error
let EADV = {Why=@"Advertise error"}:Error
let ESRMNT = {Why=@"Srmount error"}:Error
let ECOMM = {Why=@"Communication error on send"}:Error
let EPROTO = {Why=@"Protocol error"}:Error
let EMULTIHOP = {Why=@"Multihop attempted"}:Error
let EDOTDOT = {Why=@"RFS specific error"}:Error
let EBADMSG = {Why=@"Not a data message"}:Error
let EOVERFLOW = {Why=@"Value too large for defined data type"}:Error
let ENOTUNIQ = {Why=@"Name not unique on network"}:Error
let EBADFD = {Why=@"File descriptor in bad state"}:Error
let EREMCHG = {Why=@"Remote address changed"}:Error
let ELIBACC = {Why=@"Can not access a needed shared library"}:Error
let ELIBBAD = {Why=@"Accessing a corrupted shared library"}:Error
let ELIBSCN = {Why=@".lib section in a.out corrupted"}:Error
let ELIBMAX = {Why=@"Attempting to link in too many shared libraries"}:Error
let ELIBEXEC = {Why=@"Cannot exec a shared library directly"}:Error
let EILSEQ = {Why=@"Illegal byte sequence"}:Error
let ERESTART = {Why=@"Interrupted system call should be restarted"}:Error
let ESTRPIPE = {Why=@"Streams pipe error"}:Error
let EUSERS = {Why=@"Too many users"}:Error
let ENOTSOCK = {Why=@"Socket operation on non-socket"}:Error
let EDESTADDRREQ = {Why=@"Destination address required"}:Error
let EMSGSIZE = {Why=@"Message too long"}:Error
let EPROTOTYPE = {Why=@"Protocol wrong type for socket"}:Error
let ENOPROTOOPT = {Why=@"Protocol not available"}:Error
let EPROTONOSUPPORT = {Why=@"Protocol not supported"}:Error
let ESOCKTNOSUPPORT = {Why=@"Socket type not supported"}:Error
let EOPNOTSUPP = {Why=@"Operation not supported on transport endpoint"}:Error
let EPFNOSUPPORT = {Why=@"Protocol family not supported"}:Error
let EAFNOSUPPORT = {Why=@"Address family not supported by protocol"}:Error
let EADDRINUSE = {Why=@"Address already in use"}:Error
let EADDRNOTAVAIL = {Why=@"Cannot assign requested address"}:Error
let ENETDOWN = {Why=@"Network is down"}:Error
let ENETUNREACH = {Why=@"Network is unreachable"}:Error
let ENETRESET = {Why=@"Network dropped connection because of reset"}:Error
let ECONNABORTED = {Why=@"Software caused connection abort"}:Error
let ECONNRESET = {Why=@"Connection reset by peer"}:Error
let ENOBUFS = {Why=@"No buffer space available"}:Error
let EISCONN = {Why=@"Transport endpoint is already connected"}:Error
let ENOTCONN = {Why=@"Transport endpoint is not connected"}:Error
let ESHUTDOWN = {Why=@"Cannot send after transport endpoint shutdown"}:Error
let ETOOMANYREFS = {Why=@"Too many references: cannot splice"}:Error
let ETIMEDOUT = {Why=@"Connection timed out"}:Error
let ECONNREFUSED = {Why=@"Connection refused"}:Error
let EHOSTDOWN = {Why=@"Host is down"}:Error
let EHOSTUNREACH = {Why=@"No route to host"}:Error
let EALREADY = {Why=@"Operation already in progress"}:Error
let EINPROGRESS = {Why=@"Operation now in progress"}:Error
let ESTALE = {Why=@"Stale file handle"}:Error
let EUCLEAN = {Why=@"Structure needs cleaning"}:Error
let ENOTNAM = {Why=@"Not a XENIX named type file"}:Error
let ENAVAIL = {Why=@"No XENIX semaphores available"}:Error
let EISNAM = {Why=@"Is a named type file"}:Error
let EREMOTEIO = {Why=@"Remote I/O error"}:Error
let EDQUOT = {Why=@"Quota exceeded"}:Error
let ENOMEDIUM = {Why=@"No medium found"}:Error
let EMEDIUMTYPE = {Why=@"Wrong medium type"}:Error
let ECANCELED = {Why=@"Operation Canceled"}:Error
let ENOKEY = {Why=@"Required key not available"}:Error
let EKEYEXPIRED = {Why=@"Key has expired"}:Error
let EKEYREVOKED = {Why=@"Key has been revoked"}:Error
let EKEYREJECTED = {Why=@"Key was rejected by service"}:Error
let EOWNERDEAD = {Why=@"Owner died"}:Error
let ENOTRECOVERABLE = {Why=@"State not recoverable"}:Error
let ERFKILL = {Why=@"Operation not possible due to RF-kill"}:Error
let EHWPOISON = {Why=@"Memory page has hardware error"}:Error

fun convert_error code:I32 = Error
	match code
	| 0 -> return OK
	| _EPERM -> return EPERM
	| _ENOENT -> return ENOENT
	| _ESRCH -> return ESRCH
	| _EINTR -> return EINTR
	| _EIO -> return EIO
	| _ENXIO -> return ENXIO
	| _E2BIG -> return E2BIG
	| _ENOEXEC -> return ENOEXEC
	| _EBADF -> return EBADF
	| _ECHILD -> return ECHILD
	| _EAGAIN -> return EAGAIN
	| _ENOMEM -> return ENOMEM
	| _EACCES -> return EACCES
	| _EFAULT -> return EFAULT
	| _ENOTBLK -> return ENOTBLK
	| _EBUSY -> return EBUSY
	| _EEXIST -> return EEXIST
	| _EXDEV -> return EXDEV
	| _ENODEV -> return ENODEV
	| _ENOTDIR -> return ENOTDIR
	| _EISDIR -> return EISDIR
	| _EINVAL -> return EINVAL
	| _ENFILE -> return ENFILE
	| _EMFILE -> return EMFILE
	| _ENOTTY -> return ENOTTY
	| _ETXTBSY -> return ETXTBSY
	| _EFBIG -> return EFBIG
	| _ENOSPC -> return ENOSPC
	| _ESPIPE -> return ESPIPE
	| _EROFS -> return EROFS
	| _EMLINK -> return EMLINK
	| _EPIPE -> return EPIPE
	| _EDOM -> return EDOM
	| _ERANGE -> return ERANGE
	| _EDEADLK -> return EDEADLK
	| _ENAMETOOLONG -> return ENAMETOOLONG
	| _ENOLCK -> return ENOLCK
	| _ENOSYS -> return ENOSYS
	| _ENOTEMPTY -> return ENOTEMPTY
	| _ELOOP -> return ELOOP
	| _EWOULDBLOCK -> return EWOULDBLOCK
	| _ENOMSG -> return ENOMSG
	| _EIDRM -> return EIDRM
	| _ECHRNG -> return ECHRNG
	| _EL2NSYNC -> return EL2NSYNC
	| _EL3HLT -> return EL3HLT
	| _EL3RST -> return EL3RST
	| _ELNRNG -> return ELNRNG
	| _EUNATCH -> return EUNATCH
	| _ENOCSI -> return ENOCSI
	| _EL2HLT -> return EL2HLT
	| _EBADE -> return EBADE
	| _EBADR -> return EBADR
	| _EXFULL -> return EXFULL
	| _ENOANO -> return ENOANO
	| _EBADRQC -> return EBADRQC
	| _EBADSLT -> return EBADSLT
	| _EDEADLOCK -> return EDEADLOCK
	| _EBFONT -> return EBFONT
	| _ENOSTR -> return ENOSTR
	| _ENODATA -> return ENODATA
	| _ETIME -> return ETIME
	| _ENOSR -> return ENOSR
	| _ENONET -> return ENONET
	| _ENOPKG -> return ENOPKG
	| _EREMOTE -> return EREMOTE
	| _ENOLINK -> return ENOLINK
	| _EADV -> return EADV
	| _ESRMNT -> return ESRMNT
	| _ECOMM -> return ECOMM
	| _EPROTO -> return EPROTO
	| _EMULTIHOP -> return EMULTIHOP
	| _EDOTDOT -> return EDOTDOT
	| _EBADMSG -> return EBADMSG
	| _EOVERFLOW -> return EOVERFLOW
	| _ENOTUNIQ -> return ENOTUNIQ
	| _EBADFD -> return EBADFD
	| _EREMCHG -> return EREMCHG
	| _ELIBACC -> return ELIBACC
	| _ELIBBAD -> return ELIBBAD
	| _ELIBSCN -> return ELIBSCN
	| _ELIBMAX -> return ELIBMAX
	| _ELIBEXEC -> return ELIBEXEC
	| _EILSEQ -> return EILSEQ
	| _ERESTART -> return ERESTART
	| _ESTRPIPE -> return ESTRPIPE
	| _EUSERS -> return EUSERS
	| _ENOTSOCK -> return ENOTSOCK
	| _EDESTADDRREQ -> return EDESTADDRREQ
	| _EMSGSIZE -> return EMSGSIZE
	| _EPROTOTYPE -> return EPROTOTYPE
	| _ENOPROTOOPT -> return ENOPROTOOPT
	| _EPROTONOSUPPORT -> return EPROTONOSUPPORT
	| _ESOCKTNOSUPPORT -> return ESOCKTNOSUPPORT
	| _EOPNOTSUPP -> return EOPNOTSUPP
	| _EPFNOSUPPORT -> return EPFNOSUPPORT
	| _EAFNOSUPPORT -> return EAFNOSUPPORT
	| _EADDRINUSE -> return EADDRINUSE
	| _EADDRNOTAVAIL -> return EADDRNOTAVAIL
	| _ENETDOWN -> return ENETDOWN
	| _ENETUNREACH -> return ENETUNREACH
	| _ENETRESET -> return ENETRESET
	| _ECONNABORTED -> return ECONNABORTED
	| _ECONNRESET -> return ECONNRESET
	| _ENOBUFS -> return ENOBUFS
	| _EISCONN -> return EISCONN
	| _ENOTCONN -> return ENOTCONN
	| _ESHUTDOWN -> return ESHUTDOWN
	| _ETOOMANYREFS -> return ETOOMANYREFS
	| _ETIMEDOUT -> return ETIMEDOUT
	| _ECONNREFUSED -> return ECONNREFUSED
	| _EHOSTDOWN -> return EHOSTDOWN
	| _EHOSTUNREACH -> return EHOSTUNREACH
	| _EALREADY -> return EALREADY
	| _EINPROGRESS -> return EINPROGRESS
	| _ESTALE -> return ESTALE
	| _EUCLEAN -> return EUCLEAN
	| _ENOTNAM -> return ENOTNAM
	| _ENAVAIL -> return ENAVAIL
	| _EISNAM -> return EISNAM
	| _EREMOTEIO -> return EREMOTEIO
	| _EDQUOT -> return EDQUOT
	| _ENOMEDIUM -> return ENOMEDIUM
	| _EMEDIUMTYPE -> return EMEDIUMTYPE
	| _ECANCELED -> return ECANCELED
	| _ENOKEY -> return ENOKEY
	| _EKEYEXPIRED -> return EKEYEXPIRED
	| _EKEYREVOKED -> return EKEYREVOKED
	| _EKEYREJECTED -> return EKEYREJECTED
	| _EOWNERDEAD -> return EOWNERDEAD
	| _ENOTRECOVERABLE -> return ENOTRECOVERABLE
	| _ERFKILL -> return ERFKILL
	| _EHWPOISON -> return EHWPOISON
	| _ -> return UNKNOWN

alias Open_flags = I32
extern let O_RDONLY:Open_flags
extern let O_WRONLY:Open_flags
extern let O_RDWR:Open_flags
extern let O_APPEND:Open_flags
extern let O_ASYNC:Open_flags
extern let O_CLOEXEC:Open_flags
extern let O_CREAT:Open_flags
extern let O_DIRECT:Open_flags
extern let O_DIRECTORY:Open_flags
extern let O_DSYNC:Open_flags
extern let O_EXCL:Open_flags
extern let O_LARGEFILE:Open_flags
extern let O_NOATIME:Open_flags
extern let O_NOCTTY:Open_flags
extern let O_NOFOLLOW:Open_flags
extern let O_NONBLOCK:Open_flags
extern let O_NDELAY:Open_flags
extern let O_PATH:Open_flags
extern let O_SYNC:Open_flags
extern let O_TMPFILE:Open_flags
extern let O_TRUNC:Open_flags

alias Mode = U32
let S_ISUID = 04000:Mode
let S_ISGID = 02000:Mode
let S_ISVTX = 01000:Mode
let S_IRWXU = 00700:Mode
let S_IRUSR = 00400:Mode
let S_IWUSR = 00200:Mode
let S_IXUSR = 00100:Mode
let S_IRWXG = 00070:Mode
let S_IRGRP = 00040:Mode
let S_IWGRP = 00020:Mode
let S_IXGRP = 00010:Mode
let S_IRWXO = 00007:Mode
let S_IROTH = 00004:Mode
let S_IWOTH = 00002:Mode
let S_IXOTH = 00001:Mode

extern let AT_FDCWD:Int
extern let AT_SYMLINK_FOLLOW:I32

extern let SEEK_SET:Int
extern let SEEK_CUR:Int
extern let SEEK_END:Int
extern let SEEK_DATA:Int
extern let SEEK_HOLE:Int

extern fun errno = I32
extern fun unlink pathname:@U8 = Int
extern fun close fd:Int = Int
extern fun open pathname:@U8 flags:Open_flags mode:Mode = Int
extern fun openat dirfd:Int pathname:@U8 flags:Open_flags mode:Mode = Int
extern fun mkfifoat dirfd:Int pathname:@U8 mode:Mode = Int
extern fun linkat olddirfd:Int oldpath:@U8 newdirfd:Int newpath:@U8 flags:I32 = Int
extern fun write fd:Int buf:@U8 count:Uint = Int
extern fun pwrite fd:Int buf:@U8 count:Uint off:Uint = Int
extern fun read fd:Int buf:@!U8 count:Uint = Int
extern fun pread fd:Int buf:@!U8 count:Uint off:Uint = Int
extern fun lseek fd:Int off:Int whence:Int = Int
extern fun sysconf name:Int = Int

fun Close fd:Int = Error
	let ret = close fd
	if ret == 0
		return OK
	else
		return convert_error errno

fun Unlink pathname:String = Error
	let ret = unlink (cstring.Mk pathname).Rawdata
	if ret >= 0
		return OK
	return convert_error errno

fun Open pathname:String flags:Open_flags mode:Mode = Int, Error
	let fd = open (cstring.Mk pathname).Rawdata flags mode
	if fd >= 0
		return fd, OK
	return -1, convert_error errno

fun Openat dirfd:Int pathname:String flags:Open_flags mode:Mode = Int, Error
	let fd = openat dirfd (cstring.Mk pathname).Rawdata flags mode
	if fd >= 0
		return fd, OK
	return fd, convert_error errno

fun Mkfifoat dirfd:Int pathname:String mode:Mode = Int, Error
	let fd = mkfifoat dirfd (cstring.Mk pathname).Rawdata mode
	if fd >= 0
		return fd, OK
	return fd, convert_error errno

fun Linkat olddirfd:Int oldpath:String newdirfd:Int newpath:String flags:I32 = Error
	let ret = linkat olddirfd (cstring.Mk oldpath).Rawdata
		\ newdirfd (cstring.Mk newpath).Rawdata flags
	if ret >= 0
		return OK
	return convert_error errno

fun Write fd:Int b:[]U8 = []U8, Error
	let cnt = write fd b.Unsafe_rawdata b.Count
	if cnt >= 0
		return b.[cnt.Unsigned ..], OK
	return b, convert_error errno

fun Pwrite fd:Int b:[]U8 off:Uint = []U8, Error
	let cnt = pwrite fd b.Unsafe_rawdata b.Count off
	if cnt >= 0
		return b.[cnt.Unsigned ..], OK
	return b, convert_error errno

fun Read fd:Int b:[]!U8 = []!U8, Error
	let dst = b![b.Count .. b.Cap]
	let cnt = read fd dst!Unsafe_rawdata dst.Count
	if cnt >= 0
		return b![.. b.Count+cnt.Unsigned], OK
	return b, convert_error errno

fun Pread fd:Int b:[]!U8 off:Uint = []!U8, Error
	let dst = b![b.Count .. b.Cap]
	let cnt = pread fd dst!Unsafe_rawdata dst.Count off
	if cnt >= 0
		return b![.. b.Count+cnt.Unsigned], OK
	return b, convert_error errno

fun Lseek fd:Int off:Int whence:Int = Error, Uint
	let r = lseek fd off whence
	if r >= 0
		return OK, r.Unsigned
	return convert_error errno, 0

fun Sysconf name:Int = Error, Int
	let r = sysconf name
	return convert_error errno, r

--fun Getcwd buf:@#Stringbuf = Error
--	buf#Reserve 4*1024
--	let p = 

example
	let fn = ".test_syscall"
	let fd, e = Open fn (O_CREAT | O_RDWR) 0666
	assert e == OK
	assert fd >= 0

	let e5 = Unlink fn
	assert e5 == OK

	let s = "test"
	let left, e2 = Write fd s.Bytes
	assert e2 == OK
	assert left.Count == 0

	let e3, roff = Lseek fd 0 SEEK_SET
	assert e3 == OK
	assert roff == 0

	let buf = {0 0 0 0 0}:[]!U8 such
		buf = buf![.. 0]
		let rd, e3 = Read fd buf
		assert e3 == OK
		assert rd.Count == 4

		let srd = String.From_bytes rd
		assert srd == s

	let e4 = Close fd
	assert e4 == OK
