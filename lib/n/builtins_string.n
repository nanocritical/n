intf `Hashable32 =
	met Hash32 = U32

intf `String_compatible =
	fun From_string s:String = final

intf `String =
	isa `String_compatible `Ordered `Hashable32 `Trivial_copy_but_owned
	fun From_bytes s:[]U8 = final--::(^Captures s)
	met Bytes = []U8
	met Operator_at n:Uint = U8
	met Operator_sub r:Range = String

--	met Begins_with s:String = Bool
--	met Ends_with s:String = Bool
--	met Index s:String = Bool, Uint
--	met Index_all s:String = Bool, []Uint
--	met Find s:String = Bool, String
--	met Find_all s:String = Bool, []String
--	met Strip any:String = String
--	met Strip_left any:String = String
--	met Strip_right any:String = String
--	met Split ?sep:?@String ?max:?@Uint = []String

intf `Stringbuf =
	isa `String `Copyable n.io.`Writer
	met# Clear
	met# Push c:Rune
	met# Pop = Rune
	met# Append b:[]U8
	met# Copy b:[]U8

intf `Show =
	met Show st:@#n.fmt.`State

inline struct Rune =
	isa `String_compatible `Show `Hashable32
	Code	:U32

inline Rune fun From_string s:String = this
	let r, _ = Rune.Decode s.bytes
	return r

inline Rune fun Decode b:[]U8 = this, Uint
	Assert <- b.Count >= 1
	-- FIXME: utf8
	return { Code=b.First.To_u32 }, 1

inline Rune fun Decode_last b:[]U8 = this, Uint
	Assert <- b.Count >= 1
	-- FIXME: utf8
	return { Code=b.Last.To_u32 }, 1

inline Rune fun From_ascii c:U8 = Rune
	return { Code=c.To_u32 }

inline Rune met Encode z:[]!U8 = Uint
	Assert <- z.Cap >= 1
	z = z.[.. 1]
	z![0]! = self.Code.Trim_u8
	-- FIXME: utf8
	return 1

inline Rune met Hash32 = U32
	return self.Code

example -> Rune.From_ascii 49 == '1':Rune

inline Rune met Show st:@#n.fmt.`State
	--let s = {}:[4]U8 ...
	self.Code.Show st

inline struct String =
	isa `String `Return_by_copy `Show
	bytes	:[]U8

inline String fun From_string s:String = this
	return s

inline String fun From_bytes b:[]U8 = this--::(^Captures s)
	return {bytes=b} -- cap b.Count]}

inline String met All = Range
	return self.bytes.All

inline String met Bytes = []U8
	return self.bytes

inline String met Operator_at n:Uint = U8
	return self.bytes.[n].

inline String met Operator_sub r:Range = String
	return String.From_bytes <- self.bytes.Operator_sub r

inline String met Operator_compare other:@this = Int
	return Bytes_compare self.bytes other.bytes
inline String met Operator_eq other:@this = Bool
	return self.Operator_compare other == 0
inline String met Operator_ne other:@this = Bool
	return self.Operator_compare other != 0
inline String met Operator_le other:@this = Bool
	return self.Operator_compare other <= 0
inline String met Operator_lt other:@this = Bool
	return self.Operator_compare other < 0
inline String met Operator_gt other:@this = Bool
	return self.Operator_compare other > 0
inline String met Operator_ge other:@this = Bool
	return self.Operator_compare other >= 0

inline String met Show st:@#n.fmt.`State
	let _ = st#Write self.bytes

-- Prime base used in the Rabin-Karp algorithm.
let _PRIME_RK = 16777619

fun Hash b:[]U8 = U32, U32
	let hash = 0 such
		foreach x in b
			hash = hash*_PRIME_RK + x.To_u32
	let pow = 1
	and sq = _PRIME_RK
	and i = b.Count such
		while i != 0
			if i bw& 1 != 0
				pow ov*= sq
			sq ov*= sq
			i >>= 1
	return hash, pow

inline String met Hash32 = U32
	let h, _ = Hash self.bytes
	return h

inline String met Begins_with s:String = Bool
	if s.bytes.Count > self.bytes.Count
		return false
	let a = self.bytes
	and b = s.bytes
	and i = 0 such
		while i < b.Count
			let ra, cnt = Rune.Decode a
			let rb, _ = Rune.Decode b
			if ra != rb
				return false
			a = a.[cnt ..]
			b = b.[cnt ..]
			i += cnt
	return true

inline String met Ends_with s:String = Bool
	if s.bytes.Count > self.bytes.Count
		return false
	let a = self.bytes
	and b = s.bytes
	and i = 0 such
		while i < b.Count
			let ra, cnt = Rune.Decode_last a
			let rb, _ = Rune.Decode_last b
			if ra != rb
				return false
			a = a.[.. a.Count - cnt]
			b = b.[.. b.Count - cnt]
			i += cnt
	return true

String met Index s:String = Bool, Uint
String met Index_all s:String = Bool, []Uint
String met Find s:String = Bool, String
String met Find_all s:String = Bool, []String
String met Strip any:String = String
String met Strip_left any:String = String
String met Strip_right any:String = String
String met Split ?sep:?@String ?max:?@Uint = []String

example -> '1234'.Bytes.Count == 4
example -> '1234'.Bytes.All == 0 .. 4
example -> '1234'.Bytes.[3] == '4'.[0]
example -> '1234'.Bytes.[1].To_u32 == ('2':Rune).Code
example -> '1234' == '1234'
example -> '1234'.Bytes.Count == 4
example -> '1234'.Bytes.[0] == 49

inline struct Stringbuf =
	isa `Stringbuf
	bytes	:[]!U8	--::^Owned

inline Stringbuf fun From_string s:String = this
	let r = {}:this such
		r#Append s.Bytes
	return r

inline Stringbuf met# Copy_ctor other:Stringbuf
	self#Copy other.bytes

inline Stringbuf fun From_bytes s:[]U8 = this
	let r = {}:this such
		r#Reserve s.Count
		r#bytes = r!bytes!Copy s
	return r

inline Stringbuf met Bytes = []U8
	return self.bytes

inline Stringbuf met All = Range
	return self.bytes.All

inline Stringbuf met Str = String
	return String.From_bytes self.bytes

inline Stringbuf met Operator_at n:Uint = U8
	return self.bytes.[n].

inline Stringbuf met Operator_sub r:Range = Stringbuf
	return Stringbuf.From_bytes <- self.bytes.Operator_sub r

inline Stringbuf met Operator_compare other:@this = Int
	return Bytes_compare self.bytes other.bytes

inline Stringbuf met Operator_eq other:@this = Bool
	return self.Operator_compare other == 0
inline Stringbuf met Operator_ne other:@this = Bool
	return self.Operator_compare other != 0
inline Stringbuf met Operator_le other:@this = Bool
	return self.Operator_compare other <= 0
inline Stringbuf met Operator_lt other:@this = Bool
	return self.Operator_compare other < 0
inline Stringbuf met Operator_gt other:@this = Bool
	return self.Operator_compare other > 0
inline Stringbuf met Operator_ge other:@this = Bool
	return self.Operator_compare other >= 0

inline Stringbuf met Show st:@#n.fmt.`State
	let _ = st#Write self.bytes

inline Stringbuf met Hash32 = U32
	let h, _ = Hash self.bytes
	return h

inline Stringbuf met# Clear
	self!bytes = self.bytes.[.. 0]
	self#Auto_shrink

inline Stringbuf met# Push r:Rune
	let nend = self.bytes.Count + 1
	self#Reserve nend
	self!bytes = self.bytes.[.. nend]
	self!bytes![nend - 1]! = r.Code.Trim_u8

inline Stringbuf met# Pop = Rune
	Assert <- self.Bytes.Count > 0
	let r = (self.bytes.Last).
	self!bytes = self.bytes.[.. self.bytes.Count-1]
	self#Auto_shrink
	return Rune.From_ascii r

inline Stringbuf met# Append b:[]U8
	self#Reserve self.bytes.Count + b.Count
	self#bytes = self!bytes!Append b

inline Stringbuf met# Copy b:[]U8
	self#Reserve b.Count
	self#bytes = self.bytes!Copy b

inline Stringbuf met# Reserve atleast:Uint within Heap
	if self.bytes.cap >= atleast
		return
	Realloc @#self#bytes atleast

inline Stringbuf met# Auto_shrink within Heap
	let cap = self.bytes.Cap
	and cnt = self.bytes.Count
	if cap == 0
		return
	let newcap = cap such
		if cnt == 0
			newcap = 0
		elif cnt < cap / 2
			newcap = cnt
	Realloc @#self#bytes newcap

inline Stringbuf met# Cat ?sep:?@String ...v:(Vararg @String)
	let first = true such
		for s in v
			if not first and sep?
				self#Append sep.Bytes
			first = false
			self#Append s.Bytes

inline Stringbuf met# Write b:[]U8 = Error, []U8
	self#Append b
	return OK, {}
