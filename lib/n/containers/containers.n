from n.builtins import *

alias `locus = {`Has_equality `Copyable_but_owned}
alias `fwd_locus = {`Has_equality `Copyable_but_owned `Partially_ordered}
alias `bidir_locus = {`Has_equality `Copyable_but_owned `Ordered}

intf `Random_container T:`Any =
	isa (`Slice_compatible T)
	met Count = Uint

intf `Iterator T:`Copyable =
	met! Next = ?T

-- We don't reach for more generality* We could have a concept of abstract
-- sets that have no finite cardinality, are not iterable, etc* (e.g.
-- geometric surface/shape)* But we want very concrete containers (after all
-- they contain language-level elements).
-- Abstract types can be provided by others.

--intf `Locus =
--	isa `Has_equality `Copyable_but_owned `Partially_ordered
--	alias Range = `Locus_range
--	alias Iterator = (`Iterator this)
--
--intf `Iterable loc:`Locus =
--	met All = loc.Range
--
--intf `Locus_range loc:`Locus =
--	met Iter = loc.Iterator
--
--intf `Iterator loc:`Locus =
--	met! Next = ?loc

intf `Collection T:`Any =
	met Count = Uint
	met Operator_in x:*T = Bool

intf `Set T:`Any =
	isa (`Collection T)
		\ (`Slice_compatible T)
		\ `Partially_ordered
	met! Add x:*T = added:Bool
	met! Add_all other:*final = added_all:Bool
	met! Remove x:*T = removed:Bool
	met! Remove_all other:*final = removed_all:Bool
	met! Intersect other:*final
	met! Symmetric_difference other:*final

-- The universe, the set of all possible elements, is constructible.
-- Then we can have a "not" operation.
intf `Universal_set T:`Any =
	isa (`Set T) `Has_bitwise_operators
	let ALL:final
