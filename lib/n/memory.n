from n.builtins import *
from n.containers import *
from n.sysheap import Sysheap Heap
import n.unsafe

--extern struct Array_impl t:`Any N:Uint =
--  export isa `Trivial_ctor `Trivial_dtor `Trivial_copy_but_owned
--
--export Array_impl fun Count = Uint
--  return N
--
--export Array_impl fun Bytecount = Uint
--  return N * (sizeof t)
--
--export Array_impl fun All = Range
--  return 0 .. N
--
--export Array_impl met$ Unsafe_rawdata = @$U8
--  return (unsafe.Cast @$this @$U8) self
--
--export Array_impl met$ Unsafe_data = @$t
--  return (unsafe.Cast @$this @$t) self
--
--export Array_impl met$ Operator_at n:Uint = @$t
--  Assert <- n < N
--  return (unsafe.Cast @$U8 @$t) (Slice_at_byte self$Unsafe_rawdata n)
--
--export Array_impl met# Copy other:[]t
--  Assert <- N == other.Count
--  let dst = self#Unsafe_rawdata
--  and src = other.Unsafe_rawdata
--  and bytecnt = N * (sizeof t)
--  Slice_memcpy dst src bytecnt
--
--export Array_impl shallow met$ operator_sub r:Range = []$t
--  Assert <- r.begin < self.Count
--  Assert <- r.end <= self.Count
--  let raw0 = self$Unsafe_rawdata
--  let raw = Slice_at_byte raw0 r.begin
--  return {dat=raw cnt=r.Count}
