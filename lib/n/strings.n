from n import *
from n.vectors import Vector
from n.sysheap import Heap Sysheap
import n.unsafe

opaque struct String =
	isa `Copyable `Show `String_buffer
	bytes	:(Vector U8)

String fun From_static_string literal:Static_string = s:this
	s.bytes#Append_slice literal.Bytes_utf8

String met Count = Uint
	return self.bytes.Count

String met All = Range
	return self.bytes.All

String met Get_char n:Uint = Char
	return Char.From_ascii self.bytes.[n].

String met substring r:Range = @`Const_string
	let sub = (Heap.Alloc String) @!Sysheap
	such
		let mem = self.bytes.Storage.[r]
		sub.bytes#Append_slice mem
		-- FIXME leaking mem
	return sub

String met Bytes_utf8 = []U8
	return self.bytes.Storage.[self.bytes.All]

String met! Set_char n:Uint c:Char
	self.bytes![n]! = c.Code.Trim_u8

String met! Fill c:Char r:Range
	let with = c.Code.Trim_u8
	let sb = self.bytes!Storage![r]
	such
		foreach i in sb.All
			let p = sb![i]
			p! = with

String met# Reserve Count:Uint
	self.bytes#Reserve Count

String met# Clear
	self.bytes#Clear

String met# Push c:Char
	self.bytes#Push c.Code.Trim_u8

String met# Pop = Char
	return Char.From_ascii self.bytes#Pop

String met# Append other:@`Const_string
	self#Reserve self.Count+other.Count
	foreach i in other.All
		self#Push (other.Get_char i)

String met# Copy at:Uint other:@`Const_string off:Uint Count:Uint
	self#Reserve at+Count
	foreach i in 0 .. Count
		let left = at + i
		let right = off + i
		let c = other.Get_char right
		if left < self.Count
			self!Set_char left c
		else
			self#Push c

String met# Copy_ctor other:@this
	self!bytes = other.bytes

String met Show buf:@#`String_buffer
	buf#Reserve buf.Count + self.Count
	foreach i in self.All
		buf#Push (self.Get_char i)
