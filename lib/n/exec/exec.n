from n import *

import n.syscall
import n.bufio
import n.io
import n.io.ioutil
import n.fs
import n.ev
import n.logging

within logging.Log

inline struct Status =
	Signal	:Uint
	Exit	:Uint

Status fun From_sys code:I32 = r:this
	r!Exit = ((0xff00 & code.Unsigned) >> 8).Uint
	r!Signal = (code.Unsigned & 0x7f).Uint

Status met Success = Bool
	return self.Signal == 0 and self.Exit == 0


intf `Completion_handler =
	met# On_completion cmd:!Cmd


inline struct Cmd =
	isa ev.`Handler

	Path	:Stringbuf
	Args	:(Buf Stringbuf)
	Envs	:(Buf Stringbuf)

	Wd	:?!fs.File

	Stdin	:?#bufio.`Fillable_reader
	Stdout	:?#bufio.`Flushable_writer
	-- If Stderr === Stdout, a single pipe is created and used for both
	-- stdout and stderr of the child.
	Stderr	:?#bufio.`Flushable_writer

	Completion	:?#`Completion_handler

	using_pin	:Bool
	using_pout	:Bool
	using_perr	:Bool
	perr_is_pout	:Bool

	stdin_empty	:bufio.Bytes_reader
	stdout_discard	:ioutil.Discard
	stderr_discard	:ioutil.Discard
	buf_stdin_empty		:bufio.Reader
	buf_stdout_discard	:bufio.Writer
	buf_stderr_discard	:bufio.Writer

	stdin_copier	:io.Copier
	stdout_copier	:io.Copier
	stderr_copier	:io.Copier

	poll	:#ev.Poll
	Pid	:Uint
	Status	:?Status

	pin_rd	:?#fs.File
	pin_wr	:?#fs.File
	pout_rd	:?#fs.File
	pout_wr	:?#fs.File
	perr_rd	:?#fs.File
	perr_wr	:?#fs.File

example cmd_failure
	var poll:ev.Poll
	except = poll#Init

	var cmd = {Path="/bin/bash" Args={"/bin/bash" "-c" "exit 1"}}:Cmd

	except = cmd#Run #poll
	except = ev.Loop #poll

	assert not cmd.Status.Success
	assert cmd.Status.Exit == 1

example cmd_stdout_only
	var poll:ev.Poll
	except = poll#Init

	var buf:Stringbuf
	var bbuf = bufio.Writer.Mk #buf
	var cmd = {Path="/bin/bash" Args={"/bin/bash" "-c" "echo stdout; >&2 echo stderr"}
		\ Stdout=#bbuf}:Cmd

	except = cmd#Run #poll
	except = ev.Loop #poll

	assert cmd.Status.Success
	assert cmd.Status.Exit == 0
	assert buf.Index "stdout" >= 0
	assert buf.Index "stderr" < 0

example cmd_stderr_only
	var poll:ev.Poll
	except = poll#Init

	var buf:Stringbuf
	var bbuf = bufio.Writer.Mk #buf
	var cmd = {Path="/bin/bash" Args={"/bin/bash" "-c" "echo stdout; >&2 echo stderr"}
		\ Stderr=#bbuf}:Cmd

	except = cmd#Run #poll
	except = ev.Loop #poll

	assert cmd.Status.Success
	assert cmd.Status.Exit == 0
	assert buf.Index "stdout" < 0
	assert buf.Index "stderr" >= 0

example cmd_same_stdout_stderr
	var poll:ev.Poll
	except = poll#Init

	var buf:Stringbuf
	var bbuf = bufio.Writer.Mk #buf
	var cmd = {Path="/bin/bash" Args={"/bin/bash" "-c" "echo stdout; >&2 echo stderr"}
		\ Stdout=#bbuf Stderr=#bbuf}:Cmd

	except = cmd#Run #poll
	except = ev.Loop #poll

	assert cmd.Status.Success
	assert cmd.Status.Exit == 0
	assert buf.Index "stdout" >= 0
	assert buf.Index "stderr" >= 0

struct example_handler =
	isa ev.`Handler
	i	:!fs.File
	o	:#io.`Read_closer
	poll	:#ev.Poll

-- This silly example assumes that reads and writes of 4 bytes always
-- complete fully, or not at all.
example_handler met# On e:ev.Event = Error
	Log#Debug "%s" e
	if HUP in e.Got or ERROR in e.Got
		never = self.poll!Register {Fd=e.Fd Ask={CLOSE}}
	if CLOSE in e.Got and e.Fd == self.i.Fd
		never = self.i!Close
	if WRITE in e.Got
		_, except = self.i!Write "test".Bytes
		-- Close to let command exit.
		never = self.poll!Register {Fd=e.Fd Ask={CLOSE}}
	if READ in e.Got
		var buf:Stringbuf
		buf#Reserve 4
		let b, err = self.o!Read buf!Bytes
		buf#Copy_from b
		assert (err == OK or err == io.EOF) and buf == "test"

example cmd_nonblocking_pipes
	var poll:ev.Poll
	except = poll#Init

	var cmd = {Path="/bin/bash" Args={"/bin/bash" "-c" "cat"}}:Cmd

	let except, input = cmd#Stdin_pipe
	let except, output = cmd#Stdout_pipe
	let h = {i=input o=output poll=#poll}:example_handler

	except = poll!Register {Fd=input.Fd Ask={WRITE} Handler=#h}
	except = poll!Register {Fd=output.Fd Ask={READ} Handler=#h}

	except = cmd#Run #poll
	except = ev.Loop #poll

	assert cmd.Status.Success

Cmd met# Dtor within the_nanny
	if not self.Status?
		drop = the_nanny#Unwait_for self

Cmd met# init_pipes = Error
	-- We check if Stdin_pipe et al. have already setup the pipes.

	if not self.pin_wr? or not self.pin_wr.Fd.Is_valid
		except = self#prepare_stdin_pipe

	if not self.pout_rd? or not self.pout_rd.Fd.Is_valid
		except = self#prepare_stdout_pipe

	if not self.perr_rd? or not self.perr_rd.Fd.Is_valid
		except = self#prepare_stderr_pipe reuse_stdout=(self.Stderr === self.Stdout)

	if not self.using_pin
		if not self.Stdin?
			self#buf_stdin_empty = bufio.Reader.Mk #self#stdin_empty
			self#Stdin = #self#buf_stdin_empty
		self#stdin_copier#Reset self#pin_wr self.Stdin

	if not self.using_pout
		if not self.Stdout?
			self#buf_stdout_discard = bufio.Writer.Mk #self#stdout_discard
			self#Stdout = #self#buf_stdout_discard
		self#stdout_copier#Reset self.Stdout self#pout_rd

	if not self.using_perr
		if not self.Stderr?
			self#buf_stderr_discard = bufio.Writer.Mk #self#stderr_discard
			self#Stderr = #self#buf_stderr_discard
		self#stderr_copier#Reset self.Stderr self#perr_rd


Cmd met# Run poll:#ev.Poll = Error within the_nanny
	install_nanny

	self#poll = poll
	except = self#init_pipes
	except, self#Pid = syscall.Fork

	if self.Pid != 0
		never = self#pin_rd!Close
		never = self#pout_wr!Close
		never = self#perr_wr!Close

		if not self.using_pin
			never = self#poll!Register {Fd=self.pin_wr.Fd Ask={WRITE} Handler=self}
		if not self.using_pout
			never = self#poll!Register {Fd=self.pout_rd.Fd Ask={READ} Handler=self}
		if not self.using_perr and not self.perr_is_pout
			never = self#poll!Register {Fd=self.perr_rd.Fd Ask={READ} Handler=self}

		except = the_nanny#Wait_for self
		return OK

	never = self#pin_wr!Close
	never = self#pout_rd!Close
	never = self#perr_rd!Close

	let d0 = syscall.Fd.Mk 0
	and d1 = syscall.Fd.Mk 1
	and d2 = syscall.Fd.Mk 2
	except, _ = syscall.Dup3 self.pin_rd.Fd d0 0
	except, _ = syscall.Dup3 self.pout_wr.Fd d1 0
	except, _ = syscall.Dup3 self.perr_wr.Fd d2 0

	never = self#pin_rd!Close
	never = self#pout_wr!Close
	never = self#perr_wr!Close

	-- We don't want the command to inherit the non-blocking behavior.
	let except, f0 = syscall.Fcntl_void d0 syscall.F_GETFL
	except, _ = syscall.Fcntl_i32 d0 syscall.F_SETFL f0 & ~syscall.O_NONBLOCK
	let except, f1 = syscall.Fcntl_void d1 syscall.F_GETFL
	except, _ = syscall.Fcntl_i32 d1 syscall.F_SETFL f1 & ~syscall.O_NONBLOCK
	let except, f2 = syscall.Fcntl_void d2 syscall.F_GETFL
	except, _ = syscall.Fcntl_i32 d2 syscall.F_SETFL f2 & ~syscall.O_NONBLOCK

	let argv:(Buf String) such
		foreach a over self.Args
			argv#Push# = a.String
	let envp:(Buf String) such
		foreach a over self.Envs
			envp#Push# = a.String

	try
		except = syscall.Execve self.Path.String argv.Slice envp.Slice
	catch err
		Log#Error "failed to exec '%s': %s" self.Path err
		syscall.Exit 1

Cmd met# on_pin e:ev.Event = Error
	if not ERROR in e.Got and (
		\ (WRITE in e.Got and e.Fd == self.pin_wr.Fd)
		\ or (MANUAL in e.Got and self.pin_wr.Fd.Is_valid) -- Maybe we already closed it.
		\ )
		let _, fill_err = self#Stdin#Fill
		let _, err = self!stdin_copier#Copy
		if err == io.EOF
			never = self!poll!Register {Fd=self.pin_wr.Fd Ask={CLOSE}}
		elif err == bufio.NEED_FILL
			except = fill_err
		else
			except = err

Cmd met# on_pout e:ev.Event = Error
	if READ in e.Got and e.Fd == self.pout_rd.Fd
		let _, err = self!stdout_copier#Copy
		let flush_err = self#Stdout#Flush
		if flush_err == io.WOULD_BLOCK
			-- FIXME(e): we're not registered to watch whatever is
			-- behind self.Stdout. So we may never finish flushing.
			except = flush_err
		if err != io.EOF
			except = err

Cmd met# on_perr e:ev.Event = Error
	if READ in e.Got and e.Fd == self.perr_rd.Fd and not self.perr_is_pout
		let _, err = self!stderr_copier#Copy
		let flush_err = self#Stderr#Flush
		if flush_err == io.WOULD_BLOCK
			-- FIXME(e): we're not registered to watch whatever is
			-- behind self.Stderr. So we may never finish flushing.
			except = flush_err
		if err != io.EOF
			except = err

Cmd met# On e:ev.Event = Error
	Log#Debug "%s" e

	except = self#on_pin e
	except = self#on_pout e
	except = self#on_perr e

	if CLOSE in e.Got and e.Fd == self.pin_wr.Fd
		never = self!pin_wr!Close
	if CLOSE in e.Got and e.Fd == self.pout_rd.Fd
		never = self!pout_rd!Close
	if CLOSE in e.Got and e.Fd == self.perr_rd.Fd
		never = self!perr_rd!Close

	-- TODO(e): on CLOSE, report when there is not yet written content for
	-- stdin.

Cmd met# prepare_stdin_pipe = Error
	let except, rd, wr = syscall.Pipe2 syscall.O_NONBLOCK
	self#pin_rd = fs.File.Open_fd rd
	self#pin_wr = fs.File.Open_fd wr

-- If establishing pipes, Stdin, Stdout, Stderr are unused.
Cmd met# Stdin_pipe = Error, #fs.File
	except = self#prepare_stdin_pipe
	self#using_pin = true
	return OK, self#pin_wr

Cmd met# prepare_stdout_pipe = Error
	let except, rd, wr = syscall.Pipe2 syscall.O_NONBLOCK
	self#pout_rd = fs.File.Open_fd rd
	self#pout_wr = fs.File.Open_fd wr

Cmd met# Stdout_pipe = Error, #fs.File
	except = self#prepare_stdout_pipe
	self#using_pout = true
	return OK, self#pout_rd

Cmd met# prepare_stderr_pipe ?reuse_stdout:?Bool = Error
	if reuse_stdout else false
		self#perr_rd = self.pout_rd
		self#perr_wr = self.pout_wr
		self#perr_is_pout = true
		return OK

	let except, rd, wr = syscall.Pipe2 syscall.O_NONBLOCK
	self#perr_rd = fs.File.Open_fd rd
	self#perr_wr = fs.File.Open_fd wr

Cmd met# Stderr_pipe ?reuse_stdout:?Bool = Error, #fs.File
	except = self#prepare_stderr_pipe reuse_stdout=reuse_stdout
	self#using_perr = true
	return OK, self#perr_rd

Cmd met! on_status status:Status
	self!Status = status

	if self.pin_wr? and self.pin_wr.Fd.Is_valid
		never = self!poll!Register {Fd=self.pin_wr.Fd Ask={CLOSE}}
	if self.pout_rd? and self.pout_rd.Fd.Is_valid
		never = self!poll!Register {Fd=self.pout_rd.Fd Ask={CLOSE}}
	if self.perr_rd? and self.perr_rd.Fd.Is_valid and not self.perr_is_pout
		never = self!poll!Register {Fd=self.perr_rd.Fd Ask={CLOSE}}

	if self.Completion?
		self.Completion#On_completion self


globalenv the_nanny:#nanny

fun install_nanny within the_nanny
	if Globalenv_installed the_nanny
		return
	let header = Alloc (Envheader #nanny)
	header#Env = Alloc nanny
	Globalenv_install the_nanny header


-- We are assuming that the kernel is not racy in its reuse of PIDs. I.e. that
-- until we read the Signalfd_siginfo struct from the signalfd, the PID will
-- not be reused.

inline struct nanny =
	isa ev.`Handler
	signalfd	:syscall.Fd
	pids		:(Map Uint ?!Cmd)
	poll_usecnt	:(Map (Ref_as_key ?#ev.Poll) Uint)

nanny met# Wait_for cmd:!Cmd = Error
	if not self.signalfd.Is_valid
		let except, mask = syscall.Sigset.Mk syscall.SIGCHLD
		except = syscall.Sigprocmask syscall.SIG_BLOCK mask nil
		except, self!signalfd = syscall.Signalfd (syscall.Fd.Mk -1)
			\ mask syscall.SFD_CLOEXEC|syscall.SFD_NONBLOCK

	except = cmd!poll!Register {Fd=self.signalfd Ask={READ} Handler=self}

	let added, pcmd = self!pids#Try_store cmd.Pid
	if not added
		Log#Critical "nanny: trying to wait for two processes with the same PID '%s'" cmd.Pid
	pcmd# = cmd

	(self!poll_usecnt#Store {Ref=cmd.poll})# += 1

nanny met# Unwait_for cmd:!Cmd = Error
	let pcmd = self!pids![cmd.Pid]
	if not pcmd?
		Log#Warning "nanny: trying to unwait for an unknown process with PID '%s'" cmd.Pid
		return OK

	-- Keep as a marker.
	pcmd# = nil

	except = self#decrement_poll_usecnt cmd

nanny met# decrement_poll_usecnt cmd:!Cmd = Error
	let usecnt = self.poll_usecnt.[{Ref=cmd.poll}]
	assert usecnt?
	if usecnt* == 1
		Log#Debug "remove signalfd from poll"
		_ = self!poll_usecnt#Delete {Ref=cmd.poll}
		except = cmd.poll!Unregister_all {Fd=self.signalfd}

nanny met# On e:ev.Event = Error
	Log#Debug "%s" e
	if not READ in e.Got
		return OK

	while true
		var si:syscall.Signalfd_siginfo
		let left, err = syscall.Read self.signalfd si#Raw
		if err == io.WOULD_BLOCK
			break
		if err != OK or left.Available != 0
			Log#Critical "nanny: failed to read Signalfd_siginfo with: %s" err
			break

		if si.Signo != syscall.SIGCHLD.Unsigned
			continue

		-- Multiple process terminations may have been merged into one
		-- signalfd message. We get them one by one.

		while true
			let werr, pid, status = syscall.Waitpid -1 syscall.WNOHANG
			if werr == syscall.EINTR or werr == syscall.ECHILD
				break
			except = werr

			if pid == 0
				-- There are children still, but there are not
				-- in a waitable state.
				break

			let pcmd = self.pids.[pid.Unsigned]
			if not pcmd?
				Log#Warning "nanny: we don't know about PID '%s'" pid
				continue

			let cmd = pcmd*
			_ = self!pids#Delete pid.Unsigned

			if not cmd?
				-- This nil mark was left by Unwait_for.
				continue

			cmd!on_status <- Status.From_sys status

			except = self#decrement_poll_usecnt cmd
