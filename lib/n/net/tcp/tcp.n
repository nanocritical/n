from n import *
import n.io
import n.syscall
import n.net
import n.fmt


-- TODO(e): implement similar IPv4/IPv6 selection logic than in go's
-- net/ipsock_posix.go
enum Protocol =
	| TCP4 = 0
	| TCP6

Protocol met sys_family = I32
	match self
	| TCP4 -> return syscall.AF_INET
	| TCP6 -> return syscall.AF_INET6

struct Addr =
	isa `Show
	Ip	:net.Ip
	Port	:Uint
	Zone	:Stringbuf

Addr met Network = Stringbuf
	return "tcp"

Addr met Show st:#fmt.`State
	let h:Stringbuf such
		if self.Zone != ""
			fmt.Cat #h self.Ip "%" self.Zone
		else
			fmt.Cat #h self.Ip
	if self.Port != 0
		net.Join_host_port st h.String self.Port
	else
		fmt.Cat st h

fun Lookup_ip_cname name:String = Error, addrs:(Buf Addr), cname:Stringbuf
	let hints = {Flags=syscall.AI_CANONNAME|syscall.AI_V4MAPPED|syscall.AI_ALL
		\ Socktype=syscall.SOCK_STREAM}:syscall.Addrinfo

	let except, res = syscall.Getaddrinfo name nil hints

	var ai = nullable <- *<- syscall.Addrinfo.From_raw res

	cname#Cat ai.Canonname
	if cname == ""
		cname#Cat name
	if cname.Count > 0 and cname.Last != "."
		cname#Cat "."

	while ai?
		if ai.Socktype != syscall.SOCK_STREAM
			continue
		if ai.Family != syscall.AF_INET and ai.Family != syscall.AF_INET6
			continue

		(addrs#Push)# = {Ip=(net.Ip.From_bytes ai.Ip_bytes)}

		ai = ai.Next

	syscall.Freeaddrinfo res

fun Lookup_ip name:String = err:Error, ips:(Buf Addr)
	err, ips, _ = Lookup_ip_cname name

fun Lookup_cname name:String = err:Error, cname:Stringbuf
	err, _, cname = Lookup_ip_cname name


struct Conn =
	isa io.`Reader io.`Writer --ev.`Pollable
	fd		:Int
	local_addr	:Addr
	remote_addr	:Addr

Conn met Fd = Int
	return self.fd

Conn met Local_addr = Addr
	return self.local_addr

Conn met Remote_addr = Addr
	return self.remote_addr

Conn met# Read b:[!]U8 = [!]U8, Error
	return syscall.Read self.fd b

Conn met# Write b:[]U8 = []U8, Error
	return syscall.Write self.fd b


struct Socket =
	protocol:Protocol
	addr	:Addr
	sockfd	:?Int

Socket met Addr = Addr
	return self.addr

Socket met# create protocol:Protocol = Error
	let except, sockfd = syscall.Socket protocol.sys_family
		\ syscall.SOCK_STREAM|syscall.SOCK_CLOEXEC 0

	except = syscall.Setsockopt_i32 sockfd syscall.SOL_SOCKET syscall.SO_REUSEADDR 1

	self#sockfd = sockfd
	self#protocol = protocol

Socket met# Listen protocol:Protocol addr:Addr ?backlog:?Uint = Error
	if not self.sockfd?
		except = self#create protocol

	var buf_addr:(Buf U8) such
		buf_addr#Resize (syscall.Sockaddr_ip_sizeof self.protocol.sys_family)
	let sys_addr = buf_addr![..] such
		syscall.Sockaddr_ip #sys_addr self.protocol.sys_family addr.Ip.Bytes addr.Port
	except = syscall.Bind self.sockfd sys_addr
	self#addr = addr
	except = syscall.Listen self.sockfd (backlog else 128)

Socket met Accept = Error, conn:Conn
	var buf_addr:(Buf U8) such
		buf_addr#Resize (syscall.Sockaddr_ip_sizeof self.protocol.sys_family)
	var sys_addr = buf_addr![..]

	let except, fd = syscall.Accept4 self.sockfd #sys_addr
		\ syscall.SOCK_CLOEXEC

	conn!fd = fd
	conn!local_addr = self.addr

	let remote_ip_bytes = syscall.Sockaddr_ip_bytes self.protocol.sys_family
		\ sys_addr.Unsafe_rawdata sys_addr.Bytecount
	let remote_port = syscall.Sockaddr_ip_port self.protocol.sys_family
		\ sys_addr.Unsafe_rawdata sys_addr.Bytecount

	conn!remote_addr = {Ip=(net.Ip.From_bytes remote_ip_bytes)
		\ Port=remote_port
		\ Zone=""}
