from n import *
import n.io
import n.syscall
import n.net
import n.fmt
import n.strconv


-- TODO(e): implement similar IPv4/IPv6 selection logic than in go's
-- net/ipsock_posix.go
enum Protocol =
	| TCP4 = 0
	| TCP6

Protocol met sys_family = I32
	match self
	| TCP4 -> return syscall.AF_INET
	| TCP6 -> return syscall.AF_INET6

inline struct Addr =
	isa `Show `Hashable32
	Ip	:net.Ip
	Port	:Uint
	Zone	:Stringbuf

Addr met Hash32 = U32
	return self.Ip.Hash32 ^ self.Port.Hash32 ^ self.Zone.Hash32

Addr met Network = Stringbuf
	return "tcp"

Addr met Needs_protocol = Protocol
	if self.Ip.Is_v4
		return TCP4
	return TCP6

Addr met Show st:#fmt.`State
	let h:Stringbuf such
		if self.Zone != ""
			fmt.Cat #h self.Ip "%" self.Zone
		else
			fmt.Cat #h self.Ip
	if self.Port != 0
		net.Join_host_port st h.String self.Port
	else
		fmt.Cat st h


fun Resolve_address addr:String = err:Error, addrs:(Buf Addr)
	var except, host, port = net.Split_host_port addr

	let num_port = 0 such
		if port?
			-- FIXME(e): handle resolution of port number by service name
			-- (e.g. "http" -> 80).
			num_port, except = strconv.Parse_uint port base=10

	let z = host.Index "%"
	let zone such
		if z >= 0
			if z.Unsigned+1 >= host.Count
				-- Invalid zero length zone.
				return INVAL, {}
			host, zone = host.Cut_around z.Unsigned

	let except, ips = net.Lookup_ip host
	foreach ip over ips
		let addr = addrs#Push
		addr#Ip = ip
		addr#Port = num_port.To_uint
		addr#Zone = zone.Buf


fun prepare_sys_addr protocol:Protocol = buf_addr:(Buf U8)
	buf_addr#Resize (syscall.Sockaddr_ip_sizeof protocol.sys_family)

fun to_sys_addr protocol:Protocol addr:*Addr = sys_addr:(Buf U8)
	sys_addr = prepare_sys_addr protocol
	var sys_addr_bytes = sys_addr![..]
	syscall.Sockaddr_ip #sys_addr_bytes protocol.sys_family addr.Ip.Bytes addr.Port
	sys_addr#Copy_from sys_addr_bytes -- May only have shrunk.

fun from_sys_addr protocol:Protocol sys_addr:[]U8 = addr:Addr
	let remote_ip_bytes = syscall.Sockaddr_ip_bytes protocol.sys_family
		\ sys_addr.Unsafe_rawdata sys_addr.Bytecount
	let remote_port = syscall.Sockaddr_ip_port protocol.sys_family
		\ sys_addr.Unsafe_rawdata sys_addr.Bytecount

	addr = {Ip=(net.Ip.From_bytes remote_ip_bytes)
		\ Port=remote_port
		\ Zone=""}


-- FIXME(e): Need Dtor, but first we need to have multiple RTR via multiple
-- args.
inline struct Conn =
	isa io.`Reader io.`Writer --ev.`Pollable
	protocol	:Protocol
	fd		:syscall.Fd
	remote_addr	:Addr

Conn met Fd = syscall.Fd
	return self.fd

Conn met# Close = Error
	if self.fd.Is_valid
		let err = syscall.Close self#fd
		if err == io.WOULD_BLOCK
			return err
		self#fd = {}
		return err

fun do_getsockname addr:#Addr protocol:Protocol sockfd:syscall.Fd = Error
	var sys_addr = prepare_sys_addr protocol
	var sys_addr_bytes = sys_addr![..]
	except = syscall.Getsockname sockfd #sys_addr_bytes
	addr# = from_sys_addr protocol sys_addr_bytes

Conn met Local_addr = Error, addr:Addr
	except = do_getsockname #addr self.protocol self.fd

Conn met Remote_addr = Addr
	return self.remote_addr

Conn met# Read b:[!]U8 = [!]U8, Error
	var c, err = syscall.Read self.fd b
	if err == OK and c.Count == b.Count
		err = io.EOF
	return c, err

Conn met# Write b:[]U8 = []U8, Error
	return syscall.Write self.fd b

Conn met! Clear_pending_error = Error
	return syscall.Getsockopt_error self.fd syscall.SOL_SOCKET


struct Socket =
	protocol:Protocol
	addr	:Addr
	sockfd	:syscall.Fd

Socket met Fd = syscall.Fd
	return self.sockfd

Socket met Addr = Addr
	return self.addr

Socket met# Close = Error
	if self.sockfd.Is_valid
		let err = syscall.Close self#sockfd
		-- In case SO_LINGER is used on a non-blocking socket. But you
		-- probably shouldn't be doing that, right?
		if err == io.WOULD_BLOCK
			return err
		self#sockfd = {}
		return err

Socket met! Clear_pending_error = Error
	return syscall.Getsockopt_error self.sockfd syscall.SOL_SOCKET

Socket met# create protocol:Protocol = Error
	let except, sockfd = syscall.Socket protocol.sys_family
		\ syscall.SOCK_STREAM|syscall.SOCK_CLOEXEC|syscall.SOCK_NONBLOCK 0

	except = syscall.Setsockopt_i32 sockfd syscall.SOL_SOCKET syscall.SO_REUSEADDR 1

	self#sockfd = sockfd
	self#protocol = protocol

Socket met# Listen addr:*Addr ?backlog:?Uint = Error
	if not self.sockfd.Is_valid
		except = self#create addr.Needs_protocol

	var sys_addr = to_sys_addr self.protocol addr
	except = syscall.Bind self.sockfd sys_addr.[..]

	drop = do_getsockname #self#addr self.protocol self.sockfd

	except = syscall.Listen self.sockfd (backlog else 128)

Socket met Accept = Error, conn:Conn
	var sys_addr = prepare_sys_addr self.protocol
	var sys_addr_bytes = sys_addr![..]
	let except, fd = syscall.Accept4 self.sockfd #sys_addr_bytes
		\ syscall.SOCK_CLOEXEC|syscall.SOCK_NONBLOCK

	conn!fd = fd
	conn!remote_addr = from_sys_addr self.protocol sys_addr_bytes
	conn!protocol = self.protocol

-- If Connect fails, the connection is closed.
-- On success, ownership of the socket is transferred to `conn` and Socket
-- is destroyed.
--
-- If the connection has not yet completed (syscall.EINPROGRESS),
-- conn!Complete_connection must be called once the connection has completed
-- (once we get ev.WRITE).
Socket met# Connect addr:*Addr = err:Error, conn:Conn
	if not self.sockfd.Is_valid
		except = self#create addr.Needs_protocol

	var sys_addr = to_sys_addr self.protocol addr
	err = syscall.Connect self.sockfd sys_addr.[..]
	if err != OK and err != syscall.EINPROGRESS
		drop = self#Close
		return err, {}

	-- Transfer ownership
	conn!fd = self.sockfd#Move
	conn!remote_addr = addr
	conn!protocol = self.protocol
	self#Dtor

	return err, conn
