let HTTP10 = 10:Int
let HTTP11 = 11:Int

-- For server-side use.
inline struct Request =
	Method		:Stringbuf
	Url		:url.Url

	Proto		:Stringbuf
	Proto_version	:Uint

	body_impl		:body_reader
	expect_continue_reader	:expect_continue_reader

	Header		:Header
	Body		:bufio.Reader
	Close_conn	:Bool

	Content_length		:?Uint
	Transfer_encoding	:(Buf Stringbuf)
	Host			:Stringbuf

	Trailer		:Header

	Remote_addr	:tcp.Addr
	Request_uri	:Stringbuf


Request met expects_continue = Bool
	return has_token (self.Header.Get "Expect")?.String "100-continue"

Request met wants_http10_keep_alive = Bool
	if self.Proto_version != 10
		return false
	return has_token (self.Header.Get "Connection")?.String "keep-alive"

Request met wants_close = Bool
	return has_token (self.Header.Get "Connection")?.String "close"


fun parse_request_line line:String = Error, method:Stringbuf, request_uri:Stringbuf, proto:Stringbuf
	let s1 = line.Index " "
	let s2 = line.[(s1+1).Unsigned ..].Index " "
	if s1 < 0 or s2 < 0
		return ERR_MALFORMED_REQUEST_LINE, "", "", ""
	s2 += s1 + 1
	let us1 = s1.Unsigned
	let us2 = s2.Unsigned
	return OK, line.[.. us1].Buf, line.[us1+1 .. us2].Buf, line.[us2+1 ..].Buf

-- Call with a fully loaded header.
fun read_request_header req:#Request b:!bufio.Reader remote_addr:*tcp.Addr = Error
	var partial, s = b!Peek_crlf_line
	assert not partial
	b!Skip_buffered s.Count+2

	except, req#Method, req#Request_uri, req#Proto = parse_request_line s
	let rawurl = req.Request_uri

	except, req#Proto_version = Parse_http_version req.Proto.String

	except, req#Url = url.Parse_request_uri rawurl.String

	except = read_header #req#Header b

	-- RFC2616: Must treat
	--      GET /index.html HTTP/1.1
	--      Host: www.google.com
	-- and
	--      GET http://www.google.com/index.html HTTP/1.1
	--      Host: doesntmatter
	-- the same.  In the second case, any Host line is ignored.
	req#Host = req.Url.Host
	if req#Host == ""
		req#Host#Set <- (req.Header.Get "Host")?.String else ""
	_ = req#Header#Map#Try_delete "Host"

	fix_pragma_cache_control #req#Header

	req#Remote_addr = remote_addr

