inline struct Headers =
	Map	:(Map Stringbuf (Buf Stringbuf))

-- Get gets the first value associated with the given key.
-- If there are no values associated with the key, Get returns
-- the empty string. To access multiple values, use the map
-- directly.
Headers met Get key:String = Stringbuf
	let normkey = key.To_lower
	let vs = self.Map.[normkey]
	if vs.Count == 0
		return ""
	return vs.[0]*

-- Set sets the key to value. It replaces any existing
-- values.
Headers met Set key:String value:String
	let normkey = key.To_lower
	let p = self#Map#Store normkey
	p#Clear
	p#Push# = value.Buf

-- Add adds the key to value. It appends to any existing
-- values associated with key.
Headers met Add key:String value:String
	let normkey = key.To_lower
	let p = self#Map#Store normkey
	p#Push#Cat value

-- Del deletes the values associated with key.
Headers met Del key:String
	let normkey = key.To_lower
	let _ = self#Map#Try_delete normkey

fun write_headers w:#io.`Writer h:*Headers = Error
	if h.Map.Count == 0
		return OK

	var bufw = #{W=w}:bufio.Writer

	for k, vs in h.Map.Iter
		foreach v in vs
			fmt.F bufw "%s: %s%s" k v crlf

	return bufw#Flush

--fun read_headers h:*Headers r:#io.`Reader = Error
--	var bufr = #{R=r}:bufio.Reader
--
--	bufr#Read_line

example headers
	var h:Headers
	foreach e in {
		\ ("Host", "example.com")
		\ ("Content-Type", "text/plain")
		\ ("Host", "x.com")}:[](String, String)
		let k, v = e
		h#Add k v

	var buf:Stringbuf
	except = write_headers #buf h
	assert buf == "host: example.com\r\nhost: x.com\r\ncontent-type: text/plain\r\n"
