let to_lower = 32 -- 'a' - 'A'

fun mime_canonical_header_key key:[!]U8
	var upper = true
	foreach i over key.All
		let c = key![i]
		if c == ' '
			c! = '-'
		elif upper and 'a' <= c and c <= 'z'
			c! -= to_lower
		elif not upper and 'A' <= c and c <= 'Z'
			c! += to_lower
		upper = c == '-'

example canonical_key
	let pairs = {("test", "Test") ("tESt", "Test")
		\ ("test-", "Test-") ("Test-tYpe", "Test-Type")
		\ ("a-b-c", "A-B-C")
		\ ("a-1-c", "A-1-C")
		\ ("User-Agent", "User-Agent")
		\ ("uSER-aGENT", "User-Agent")
		\ ("user-agent", "User-Agent")
		\ ("USER-AGENT", "User-Agent")
		\ ("üser-agenT", "üser-Agent")
		\ ("C ontent-Transfer-Encoding", "C-Ontent-Transfer-Encoding")
		\ ("foo bar", "Foo-Bar")}:[](String, String)
	var s:Stringbuf
	foreach i over pairs.All
		let a, b = pairs.[i]
		s#Clear
		s#Cat a
		mime_canonical_header_key s!Bytes
		assert s.String == b

inline struct Header =
	Map	:(Map Stringbuf (Buf Stringbuf))

-- Get gets the first value associated with the given key.
-- If there are no values associated with the key, Get returns
-- the empty string. To access multiple values, use the map
-- directly.
Header met Get key:String = ?*Stringbuf
	let normkey = key.Buf
	mime_canonical_header_key normkey!Bytes
	let vs = self.Map.[normkey]
	if not vs? or vs.Count == 0
		return nil
	return vs.[0]

-- Set sets the key to value. It replaces any existing
-- values associated with key.
Header met# Set key:String = #Stringbuf
	let normkey = key.Buf
	mime_canonical_header_key normkey!Bytes
	let p = self#Map#Store normkey
	p#Clear
	return p#Push

-- Add adds the valye to key. It appends to any existing
-- values associated with key.
Header met# Add key:String = #Stringbuf
	let normkey = key.Buf
	mime_canonical_header_key normkey!Bytes
	let p = self#Map#Store normkey
	return p#Push

-- Del deletes the values associated with key.
Header met# Del key:String
	let normkey = key.To_lower
	_ = self#Map#Delete normkey


fun no_newlines tmp:#Stringbuf s:String = String
	var i = s.Index_any "\r\n"
	if i < 0
		return s

	tmp#Clear
	while true
		tmp#Cat s.[.. i.Unsigned] " "
		s = s.[i.Unsigned+1 ..]
		i = s.Index_any "\r\n"
		if i < 0
			tmp#Cat s
			return tmp.String

example no_newlines_basic
	var tmp:Stringbuf
	assert no_newlines #tmp "test" == "test"
	assert no_newlines #tmp "test\r\ntest" == "test  test"
	assert no_newlines #tmp "test\rtest\n" == "test test "

fun trim s:String = String
	var i = 0
	while i < s.Count and (s.[i] == ' ' or s.[i] == '\t')
		i += 1
	var j = s.Count
	while j > 0 and (s.[j-1] == ' ' or s.[j-1] == '\t')
		j -= 1
	return s.[i .. j]

-- exclude must contain keys in canonical form.
-- TODO(e): Should sort headers.
fun write_header bufw:#bufio.Writer h:*Header exclude:*(Set Stringbuf)
	if h.Map.Count == 0
		return

	var tmp:Stringbuf
	for k, vs over h.Map.Iter
		if k in exclude
			continue
		foreach v over vs
			fmt.F bufw "%s: %s%s" k (trim (no_newlines #tmp v.String)) crlf
	fmt.F bufw "%s" crlf


fun is_header_loaded r:*bufio.Reader = Bool
	let s = r.Peek_string
	let i = s.Index "\r\n\r\n"
	return i >= 0

fun is_ascii_letter c:U8 = Bool
	c |= 0x20 -- make lower case
	return 'a' <= c and c <= 'z'

fun read_continued_line val:#Stringbuf r:!bufio.Reader = last:Bool
	while true
		let partial, line = r.Peek_crlf_line
		assert not partial -- We preloaded the whole header.

		r!Skip_buffered line.Count+2 -- for crlf

		if line.Count == 0
			return true

		val#Cat <- trim line

		let peek = r.Peek_string
		if peek.Count == 0 or is_ascii_letter peek.First
			return false

fun read_one h:#Header r:!bufio.Reader = Error, done:Bool
	let s = r.Peek_string
	let i = s.Index_byte ':'
	if i < 0
		if s.[0] == '\r' and s.[1] == '\n'
			return OK, true
		return ERR_MALFORMED_HEADER, false

	-- Key ends at first colon; should not have spaces but they appear in
	-- the wild, violating specs, so we remove them if present.
	let end_key = i.Unsigned such
		while end_key > 0 and s.[end_key-1] == ' '
			end_key -= 1

	let key = s.[.. end_key]
	let val = h#Add key

	r!Skip_buffered i.Unsigned+1

	return OK, read_continued_line val r

-- Use is_header_loaded first.
fun read_header h:#Header r:!bufio.Reader = Error
	while true
		let except, done = read_one h r
		if done
			return OK


struct prevent_passthrough_reader =
	isa io.`Reader
	r	:#bufio.Bytes_reader

prevent_passthrough_reader met# Read b:[!]U8 = [!]U8, Error
	return self#r#Read b


example header
	var h:Header
	foreach e over {
		\ ("Host", "example.com")
		\ ("ConteNt-type", "text/plain")
		\ ("hosT", "x.com")}:[](String, String)
		let k, v = e
		(h#Add k)#Cat v

	var buf:Stringbuf
	var bufw = #<- bufio.Writer.Mk #buf
	write_header bufw h {}
	except = bufw#Flush
	assert buf == "Host: example.com\r\nHost: x.com\r\nContent-Type: text/plain\r\n\r\n"

	var bufr = #<- bufio.Reader.Mk #({r=#(bufio.Mk_string_reader buf.String)}:prevent_passthrough_reader)
	_, except = bufr#Fill max=32
	assert not is_header_loaded bufr

	while true
		let _, err = bufr#Fill max=32
		if err != OK and err != io.EOF
			except = err
		if is_header_loaded bufr
			break

	var rh:Header
	except = read_header #rh bufr
	assert h == rh

	rh#Map#Clear
	bufr = #<- bufio.Reader.Mk #<- bufio.Mk_string_reader
		\ "Host: example.com\r\nHost : x.com\r\nContent type: text/plain\r\n\r\n"
	let _, err = bufr#Fill
	if err != io.EOF
		except = err
	except = read_header #rh bufr
	assert h == rh


-- has_token reports whether token appears with v, ASCII
-- case-insensitive, with space or comma boundaries.
-- token must be all lowercase.
-- v may contain mixed cased.
fun has_token v:?String token:String = Bool
	let v = v else ""
	if token.Count > v.Count or token == ""
		return false
	if v == token
		return true
	foreach sp over 0 .. 1+v.Count-token.Count
		-- Check that first character is good.
		-- The token is ASCII, so checking only a single byte
		-- is sufficient.  We skip this potential starting
		-- position if both the first byte and its potential
		-- ASCII uppercase equivalent (b|0x20) don't match.
		-- False positives ('^' => '~') are caught by Equal_fold.
		let b = v.[sp]
		if b != token.[0] and (b|0x20) != token.[0]
			continue
		-- Check that start pos is on a valid token boundary.
		if sp > 0 and not is_token_boundary v.[sp-1]
			continue
		-- Check that end pos is on a valid token boundary.
		let end_pos = sp + token.Count
		if end_pos != v.Count and not is_token_boundary v.[end_pos]
			continue
		-- The token is ASCII, we can use To_lower to normalize.
		if v.[sp .. sp+token.Count].To_lower.String == token
			return true
	return false

fun is_token_boundary b:U8 = Bool
	return b == ' ' or b == ',' or b == '\t'

example test_has_token
	let tests = {
		\ ("", "", false)
		\ ("", "foo", false)
		\ ("foo", "foo", true)
		\ ("foo ", "foo", true)
		\ (" foo", "foo", true)
		\ (" foo ", "foo", true)
		\ ("foo,bar", "foo", true)
		\ ("bar,foo", "foo", true)
		\ ("bar, foo", "foo", true)
		\ ("bar,foo, baz", "foo", true)
		\ ("bar, foo,baz", "foo", true)
		\ ("bar,foo, baz", "foo", true)
		\ ("bar, foo, baz", "foo", true)
		\ ("FOO", "foo", true)
		\ ("FOO ", "foo", true)
		\ (" FOO", "foo", true)
		\ (" FOO ", "foo", true)
		\ ("FOO,BAR", "foo", true)
		\ ("BAR,FOO", "foo", true)
		\ ("BAR, FOO", "foo", true)
		\ ("BAR,FOO, baz", "foo", true)
		\ ("BAR, FOO,BAZ", "foo", true)
		\ ("BAR,FOO, BAZ", "foo", true)
		\ ("BAR, FOO, BAZ", "foo", true)
		\ ("foobar", "foo", false)
		\ ("barfoo ", "foo", false)
		\ }:[](String, String, Bool)
	foreach header, token, want over tests
		assert want == has_token header token
