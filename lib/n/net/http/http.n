-- See LICENSE for details. Originally derived from go/src/pkg/net/http
-- Copyright 2009 The Go Authors. All rights reserved.

from n import *
import n.ev
import n.io
import n.io.ioutil
import n.bufio
import n.fmt
import n.strings
import n.unsafe
import n.syscall
import n.strconv
import n.net
import n.net.tcp
import n.net.url
import n.time
import n.logging
import n.bench

within logging.Log

let crlf = "\r\n"
let colon_space = ": "

let ERR_BODY_NOT_ALLOWED = {Why=*"ERR_BODY_NOT_ALLOWED: http: request method or response status code does not allow body"}:Error
let ERR_CONTENT_LENGTH = {Why=*"ERR_CONTENT_LENGTH: wrote more than the declared Content-Length"}:Error
let ERR_MALFORMED_HEADER = {Why=*"ERR_MALFORMED_HEADER: malformed HTTP header"}:Error
let ERR_MALFORMED_VERSION = {Why=*"ERR_MALFORMED_VERSION: malformed HTTP version"}:Error
let ERR_MALFORMED_REQUEST_LINE = {Why=*"ERR_MALFORMED_REQUEST_LINE: malformed HTTP request line"}:Error
let ERR_MALFORMED_CHUNK_ENCODING = {Why=*"ERR_MALFORMED_CHUNK_ENCODING: malformed HTTP chunk encoding"}:Error
let ERR_UNSUPPORTED_TRANSFER_ENCODING = {Why=*"ERR_UNSUPPORTED_TRANSFER_ENCODING: unsupported Transfer-Encoding"}:Error
let ERR_BAD_TRAILER_KEY = {Why=*"ERR_BAD_TRAILER_KEY: bad trailer key"}:Error
let ERR_BAD_CONTENT_LENGTH = {Why=*"ERR_BAD_TRAILER_KEY: bad Content-Length value"}:Error
let ERR_UNEXPECTED_TRAILER = {Why=*"ERR_UNEXPECTED_TRAILER: unexpected trailer"}:Error
let ERR_LINE_TOO_LONG = {Why=*"ERR_LINE_TOO_LONG: header line too long"}:Error


intf `Server =
	met# On_incoming r:*Request = ?#`Server_handler
	met# On_done h:#`Server_handler

-- The first time On is called, r is populated, but none of
-- the Body may be loaded. The handler must read the request body in a
-- non-blocking manner, by filling r#Body, a bufio.Reader.
--
-- The `Reponse_writer w is buffered: if the handler chooses to flush it
-- manually, it must be capable of handling any possible AGAIN.
--
-- The handler must call w#Done when it has written the whole response.
-- Once w#Done has been called, the Server will take care of flushing any
-- remaining data in the `Response_writer.
intf `Server_handler =
	met# On w:#`Response_writer r:#Request = Error

-- Unlike `Server_handler, the whole request body is buffered before calling On.
-- On is called once, and it must write the whole response to the (buffered)
-- `Response_writer. The response is then flushed automatically, and it must
-- not be flushed manually.
intf `Server_handler_buffered =
	isa `Server_handler


-- w#Done must be called before reading anything from r.
-- r#Done must be called once. (TODO(e) remove this requirement, detect when
-- r.Body its EOF).
intf `Client_handler =
	met# On r:#Response w:#`Request_writer = Error

-- Unlike `Client_handler, the request is prepared outside the handler, and
-- On is called once, with the entire response buffered.
intf `Client_handler_buffered =
	met# On r:#Response
