intf `Response_writer =
	-- TODO(e): bufio.`Writer
	isa io.`Writer
	met# Header = #Header
	met# Write_header status:Uint
	met# Flush ?max:?Uint = Error
	met# Done

struct response_writer =
	isa `Response_writer
	conn			:#tcp.Conn
	req			:#Request
	bufw			:#bufio.Writer
	header			:Header
	wrote_header		:Bool
	chunking		:Bool
	finalized		:Bool
	close_after_reply	:Bool
	close_because_hup	:Bool
	close_because_of	:Error
	done			:Bool

response_writer met# init conn:#tcp.Conn req:#Request bufw:#bufio.Writer
	self#conn = conn
	self#req = req
	self#bufw = bufw

fun write_status_line w:#bufio.Writer proto_version:Uint status_code:Uint
	let proto = "HTTP/1.0" such
		if proto_version == 11
			proto = "HTTP/1.1"

	let text = Status_text status_code
	if text?
		fmt.F w "%s %s %s\r\n" proto status_code text
	else
		fmt.F w "%s %s status code %s\r\n" proto status_code status_code

response_writer met# write_header status_code:Uint b:[]U8
	if self.wrote_header
		return

	let header = #self#header

	header#Del "Status"

	let keep_alives_enabled = true
	let is_head = self.req.Method == "HEAD"
	let cl = header.Get "Content-Length"

	-- If this was an HTTP/1.0 request with keep-alive and we sent a
	-- Content-Length back, we can make this a keep-alive response ...
	if keep_alives_enabled and self.req.wants_http10_keep_alive
		let sent_length = cl?
		let connection = header.Get "Connection"
		if sent_length and connection? and connection == "keep-alive"
			self!close_after_reply = false

	if keep_alives_enabled and self.req.wants_http10_keep_alive and (is_head or cl?)
		let connection = header.Get "Connection"
		if not connection?
			(header#Set "Connection")# = "keep-alive"
	elif self.req.Proto_version < 11 or self.req.wants_close or self.req.Close_conn
		self!close_after_reply = true

	if not keep_alives_enabled
		\ and ((header.Get "Connection") else "") == "close"
		self!close_after_reply = true

	-- FIXME(e): We should try to do something akin to what Go does here,
	-- but it's not clear how to do this with non-blocking I/O:
	-- 
	-- 	Per RFC 2616, we should consume the request body before
	-- 	replying, if the handler hasn't already done so.  But we
	-- 	don't want to do an unbounded amount of reading here for
	-- 	DoS reasons, so we only try up to a threshold.

	if not is_body_allowed_for_status status_code
		-- Must not have body.
		-- RFC 2616 section 10.3.5: "the response MUST NOT include other entity-headers"
		header#Del "Content-Type"
		header#Del "Content-Length"
		header#Del "Transfer-Encoding"
	else
		-- If no content type, apply sniffing algorithm to body.
		if not (header.Get "Content-Type")?
			(header#Set "Content-Type")#Set <- Detect_content_type b

	-- FIXME(e): set date

	let te = header.Get "Transfer-Encoding"
	if cl? and te? and te != "identity"
		-- For now just ignore the Content-Length.
		-- TODO(e): logf("http: WriteHeader called with both Transfer-Encoding of %q and a Content-Length of %d", te, w.contentLength)
		header#Del "Content-Length"
		cl = nil

	if self.req.Method == "HEAD" or not is_body_allowed_for_status status_code
		noop
	elif status_code == Status_no_content
		header#Del "Transfer-Encoding"
	elif cl?
		header#Del "Transfer-Encoding"
	elif self.req.Proto_version >= 11
		-- HTTP/1.1 or greater: use chunked transfer encoding
		-- to avoid closing the connection at EOF.
		-- TODO: this blows away any custom or stacked Transfer-Encoding they
		-- might have set.  Deal with that as need arises once we have a valid
		-- use case.
		self!chunking = true
		(header#Set "Transfer-Encoding")#Set <- "chunked"
	else
		-- HTTP version < 1.1: cannot do chunked transfer
		-- encoding and we don't know the Content-Length so
		-- signal EOF by closing connection.
		self!close_after_reply = true
		header#Del "Transfer-Encoding" -- in case already set

	-- Cannot use Content-Length with non-identity Transfer-Encoding.
	if self.chunking
		header#Del "Content-Length"

	if self.req.Proto_version < 10
		noop
	elif self.close_after_reply
		\ and (not keep_alives_enabled
		\ or not has_token ((header.Get "Connection")?.String else "") "close")
		header#Del "Connection"
		if self.req.Proto_version >= 11
			(header#Set "Connection")#Set <- "close"

	write_status_line self#bufw self.req.Proto_version status_code
	write_header self#bufw header {}

	self!wrote_header = true

response_writer met# Write b:[]U8 = left:[]U8, err:Error
	if b.Count == 0
		-- We don't want to send an empty chunk mid-stream, it means
		-- end-of-response.
		return {}, OK

	left = b

	if not self.wrote_header
		self.write_header 200 b

	if self.req.Method == "HEAD"
		-- Eat writes.
		return {}, OK

	if self.chunking
		never = write_chunk_size self#bufw b.Count

	_, never = self#bufw#Write b

	if self.chunking
		_, never = self#bufw#Write crlf.Bytes

	return {}, OK

response_writer met# Header = #Header
	return #self#header

response_writer met# Write_header status_code:Uint
	self#write_header status_code {}

response_writer met# Flush ?max:?Uint = Error
	let err = self#bufw#Flush max=max
	if err == io.WOULD_BLOCK
		return err
	if err != OK
		self!close_because_of = err
		Log#Error "will close connection because of error: %s" self.close_because_of
		return err

response_writer met# Done
	self#done = true

response_writer met# finalize ?max_flush:?Uint
	if not self.wrote_header
		self.write_header 200 {}

	if not self.finalized
		self!finalized = true
		if self.chunking
			_, never = self#bufw#Write "0\r\n\r\n".Bytes

response_writer met wants_close = Bool
	return self.close_after_reply
		\ or self.close_because_hup
		\ or self.close_because_of != OK



enum server_handling_state =
	| WAITING_HEADER = 0
	| HANDLING
	| FLUSH
	| RECYCLE
	| CLOSE


struct server_conn_handler =
	isa ev.`Handler `Not_copyable
	server		:#Server

	connected	:Bool
	connected_wr	:Bool

	state		:server_handling_state
	conn		:#tcp.Conn -- Owner

	bufr		:bufio.Reader
	request		:Request

	bufw		:bufio.Writer
	response	:response_writer

	server_handler		:?#`Server
	handler			:?#`Server_handler
	handler_buffered	:?#`Server_handler_buffered

	on_done_handler		:on_done_handler

	ev_readwrite	:ev.Event
	ev_close	:ev.Event

server_conn_handler met debug ?_Ncodeloc:?Codeloc ...s:(Vararg ?*`Show)
	Log#Debug "%s: %s" _Ncodeloc=_Ncodeloc self.conn.Fd (fmt.S ...s)

server_conn_handler met# init server:#Server conn:#tcp.Conn = Error
	self#server = server
	self#connected = true
	self#connected_wr = true
	self#conn = conn
	self#bufr = bufio.Reader.Mk self#conn
	self#bufw = bufio.Writer.Mk self#conn
	self#ev_readwrite = {Fd=self.conn.Fd Ask={READ WRITE RDHUP} Handler=self}
	self#ev_close = {Fd=self.conn.Fd Ask={CLOSE} Handler=self}

	except = self.server.poll!Register self.ev_readwrite

server_conn_handler met# recycle
	self.debug
	if not self.connected
		self#state = CLOSE
		return

	if self#bufr#Buffered != 0 or self#bufw#Buffered != 0
		-- We can't recycle this!
		self#state = CLOSE
		return

	self#request#Dtor
	self#response#Dtor
	self#server_handler = nil
	self#handler = nil
	self#handler_buffered = nil
	self#state = WAITING_HEADER

server_conn_handler met# Close = err:Error
	if not self.connected
		return OK

	self.debug

	block
		-- Linger with non-blocking socket:
		--
		-- We want to ensure the client has read everything we sent.
		-- We first let it know we won't send anymore.
		-- Then we try reading until we get a EOF (i.e. closed connection).
		--
		-- TODO(e):
		--	- rate limiting if the client is stuck with an open
		-- connection and doing nothing.
		-- 	- force close after timeout.
		--
		-- See http://blog.netherlabs.nl/articles/2009/01/18
		--	/the-ultimate-so_linger-page-or-why-is-my-tcp-not-reliable
		-- See http://developerweb.net/viewtopic.php?id=2982
		--
		-- On Linux, for some reason, after each call to Shutdown
		-- SHUT_WR, we get a WRITE event on ET epoll. So make sure
		-- we call it only once.
		if self.connected_wr
			drop = syscall.Shutdown self.conn.Fd syscall.SHUT_WR
			self!connected_wr = false

		var buf:Stringbuf
		buf#Reserve 4096
		let hole = buf!Bytes
		while true
			let left, err = self#conn#Read hole
			if err == io.EOF
				break
			if err == io.WOULD_BLOCK
				-- We'll get a HUP when the client closes:
				-- so we will eventually get back in this
				-- function.
				self.debug "waiting on client to close"
				return err
			drop = err
			if left.Count != 0
				self.debug "read leftovers:" hole.Count-left.Count

	err = self#conn#Close

	if err == syscall.EBADF
		-- Already closed
		err = OK

	if err == io.WOULD_BLOCK
		return err

	-- If other error, give up trying to close it.

	Free self#conn
	self#conn = nil
	self#connected = false
	self!connected_wr = false
	except = err

server_conn_handler met can_progress e:ev.Event = Bool
	-- Note: even in non-TLS HTTP, making progress can involve both READ or
	-- WRITE when a 100-Continue is expected.
	match self.state
	| WAITING_HEADER -> return READ in e.Got
	| HANDLING -> return READ in e.Got or WRITE in e.Got or MANUAL in e.Got
	| FLUSH -> return WRITE in e.Got or MANUAL in e.Got
	| RECYCLE -> return true
	| CLOSE -> return true

server_conn_handler met# On e:ev.Event = err:Error
	self.debug self.state e

	var pending_err
	if ERROR in e.Got
		pending_err = self!conn!Clear_pending_error
		self.debug "pending error:" pending_err

	var stop = false
	while not stop and self.can_progress e
		try
			match self.state
			| WAITING_HEADER -> except = self#waiting_header
			| HANDLING -> except = self#handling
			| FLUSH -> except = self#flush
			| RECYCLE -> stop = true
			| CLOSE -> stop = true
		catch err
			stop = true
			if err == io.WOULD_BLOCK
				noop
			elif err == syscall.EPIPE
				self#state = CLOSE
			elif err == io.EOF and self.state == WAITING_HEADER
				-- We didn't read anything at all.
				self#state = CLOSE
			else
				Log#Error "closing in state '%s' because of error: %s"
					\ self.state err
				self#state = CLOSE

	if HUP in e.Got or RDHUP in e.Got
		if self.connected
			-- There will be nothing more to read, except what
			-- may still be in kernel buffers (!), from the
			-- client.
			-- So the connection cannot be recycled.
			self#response#close_because_hup = true
		else
			self#state = CLOSE

	if pending_err != OK
		self#state = CLOSE

	if CLOSE in e.Got
		let close_err = self#Close
		if close_err == io.WOULD_BLOCK
			return close_err
		Free self
		return OK

	if self.state == RECYCLE
		self#recycle

	if self.state == CLOSE
		except = self.server.poll#Register self.ev_close

server_conn_handler met# waiting_header = Error
	while true
		let _, rerr = self#bufr#Fill

		if is_header_loaded self.bufr
			break

		if rerr == io.EOF
			if self.bufr.Buffered == 0
				-- We probably got a spurious READ event (maybe with RDHUP).
				return rerr
			self.debug "header not loaded, count:" self.bufr.Buffered
			return ERR_MALFORMED_HEADER
		if rerr == io.WOULD_BLOCK
			return rerr

	except = read_request_header #self#request !self!bufr self.conn.Remote_addr

	var handler
	foreach server_handler in self.server.Handlers
		handler = (server_handler*)#On_incoming self.request
		if handler?
			self#server_handler = server_handler*
			break
	if not handler?
		-- FIXME(e): write a 404 and recycle.
		Log#Error "no handler found for URL: %s" self.request.Url
		self#state = CLOSE
		return OK
	self#handler = handler
	self#handler_buffered = (Dyncast `Server_handler_buffered) handler

	except = prepare_request_reception #self#request #self#bufr #self#bufw
	self#response#init self#conn #self#request #self#bufw

	self#state = HANDLING
	return OK

server_conn_handler met# handling = Error
	if self.handler_buffered?
		return self#handling_buffered

	self.debug self.state

	let handler_err = self.handler#On #self#response #self#request

	if handler_err == io.WOULD_BLOCK
		return handler_err

	if handler_err != OK
		Log#Error "will close connection because of handler error: %s" handler_err
		self#state = CLOSE
		return OK

	if self.response.done
		self#state = FLUSH
	return OK

server_conn_handler met# handling_buffered = Error
	self.debug self.state

	while true
		let _, rerr = self#request#Body#Fill
		if rerr == io.EOF
			break
		except = rerr

	let handler_err = self.handler#On #self#response #self#request
	if handler_err != OK
		Log#Error "will close connection because of handler error: %s" handler_err
		self#state = CLOSE
		return OK

	self#response#Done

	self#state = FLUSH
	return OK


struct on_done_handler =
	isa ev.`Handler
	server_handler	:?#`Server
	handler		:?#`Server_handler

on_done_handler met# On e:ev.Event = Error
	Log#Debug "%s" e
	self.server_handler#On_done self.handler
	self# = {}


server_conn_handler met# flush = Error
	self.debug self.state

	self#response#finalize

	let err = self#response#Flush
	if err == io.WOULD_BLOCK
		return err
	except = err

	self#on_done_handler = {server_handler=self.server_handler handler=self.handler}
	never = self.server.poll!Schedule_manually #self#on_done_handler

	if self.response.wants_close
		self#state = CLOSE
	else
		self#state = RECYCLE
	return OK


struct Server =
	isa ev.`Handler
	poll		:#ev.Poll

	listening	:tcp.Socket
	ev_accept	:ev.Event
	Handlers	:(Buf ?#`Server)

Server fun Mk poll:#ev.Poll ?handler:?#`Server = r:this
	r#poll = poll
	if handler?
		r!Handlers#Push# = handler

Server met# Listen addr:tcp.Addr = Error
	except = self#listening#Listen addr

	self!ev_accept = {Fd=self.listening.Fd Ask={READ} Handler=self}
	except = self.poll!Register self.ev_accept

Server met# On e:ev.Event = Error
	while true
		let conn = Alloc tcp.Conn
		var err
		err, conn# = self.listening.Accept
		if err != OK
			Free conn
			if err != io.WOULD_BLOCK
				Log#Error "Accept failed with: %s" err
			return err

		Log#Info "Connect from %s" conn.Remote_addr

		let connh = Alloc server_conn_handler
		except = connh#init self conn
