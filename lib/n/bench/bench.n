from n import *

import n.time
import n.mem
import n.fs
import n.io
import n.bufio
import n.stdio
import n.logging

inline enum Standard_measures =
	| CLOCK
	| HEAP
	| FS
	| NET

inline struct Example =
	active_measures	:(Enumset Standard_measures)
	-- Use an Enummap
	clock_restorer	:Restorer
	heap_restorer	:Restorer
	fs_restorer	:Restorer

	let KB = 1024:Int
	let MB = 1024*this.KB
	let GB = 1024*this.MB
	let TB = 1024*this.GB
	let PB = 1024*this.TB

Example met! Benchmark ...v:(Vararg *Standard_measures) within Heap fs.Fs time.Clock
	for m in v
		self!active_measures |= {(m*)}
		match m
		| CLOCK
			self!clock_restorer = Clock!Save_measurements#Move
		| HEAP
			self!heap_restorer = Heap!Save_measurements#Move
		| FS
			self!fs_restorer = Fs!Save_measurements#Move
		| NET
			noop

Example met# Dtor
	for m in self.active_measures.Iter
		match m
		| CLOCK
			self!clock_restorer#Dtor
		| HEAP
			self!heap_restorer#Dtor
		| FS
			self!fs_restorer#Dtor
		| NET
			noop

Example met Clock = time.Stats within time.Clock
	assert CLOCK in self.active_measures
	return Clock.Measure

-- Example met Net = net.Stats within Net

Example met Heap = Heap_stats within Heap
	assert HEAP in self.active_measures
	return Heap.Measure

Example met Fs = fs.Stats within fs.Fs
	assert FS in self.active_measures
	return Fs.Measure


intf `Observable =
	met! Save_measurements = Restorer

intf `Measure =
	isa `Default_ctor `Additive_arithmetic `Copyable `Has_equality -- `Writer_to

intf `Observable_of m:`Measure =
	isa `Observable
	met Measure = m

intf `Has_restore =
	met! Restore_measurements


inline struct Restorer =
	target	:?!`Has_restore

Restorer met# Dtor
	_ = self!target?!Restore_measurements

-- Suitable when the 'Current' measure will be updated in-place (push model).
inline struct Stack m:`Measure =
	isa `Has_restore
	Current	:m
	impl	:(Buf m)

Stack met! Save = Restorer
	self!impl#Push# = self.Current
	self!Current = {}
	return {target=self}

Stack met! Restore_measurements
	assert self.impl.Count > 0
	let p = self.impl.Last
	self!Current += p*
	self!impl#Pop
