-- TODO(e): Should implement bufio.`Reader

struct Bytes_reader =
	isa `Reader
	B	:[]U8

Bytes_reader met# Read b:[!]U8 = [!]U8, Error
	if self.B.Count == 0
		return b, EOF

	let copied = b!Available_space!Copy self.B
	self#B = self.B.[copied.Count ..]
	return b.[.. b.Count+copied.Count], OK

example bytes_reader_whole
	let s = "testabc"
	var br = {B=s.Bytes}:Bytes_reader
	var buf:Stringbuf
	buf#Reserve 32
	var b = buf!Bytes
	b, except = br#Read b
	assert b.Count == s.Count
	assert b.Const == s.Bytes

example bytes_reader_partial
	let s = "testabc"
	var br = {B=s.Bytes}:Bytes_reader
	var buf:Stringbuf
	buf#Reserve 4
	var b = buf!Bytes

	b, except = br#Read b
	assert b.Const == "test".Bytes
	b, except = br#Read b.[.. 0]
	assert b.Const == "abc".Bytes


fun Mk_string_reader s:String = r:Bytes_reader
	r#B = s.Bytes


-- Tolerates arbitrary changes on the underlying Stringbuf between reads.
-- If the current value of `Pos` points past the end of `S`, read nothing
-- and return EOF, leaving `Pos` unchanged.
struct Stringbuf_reader =
	isa `Reader
	S	:*Stringbuf
	Pos	:Uint

Stringbuf_reader fun Mk s:*Stringbuf ?beg:?Uint = ret:this
	ret#S = s
	ret#Pos = beg else 0

Stringbuf_reader met# Read b:[!]U8 = [!]U8, err:Error
	if self.Pos >= self.S.Count
		return {}, EOF

	let copied = b!Available_space!Copy self.S.Bytes.[self.Pos ..]
	self#Pos += copied.Count

	if self.Pos == self.S.Count
		err = EOF

	return b.[.. b.Count+copied.Count], err
