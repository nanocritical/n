-- See LICENSE for details. Originally derived from go/src/pkg/io
-- Copyright 2009 The Go Authors. All rights reserved.

from n import *
import n.bufio
import n.io.ioutil
import n.fs

let EOF = {Why=*"EOF: End of file"}:Error
let SHORT_READ = {Why=*"SHORT_READ: Short read"}:Error

-- Should only return SHORT_WRITE if *some* progress was made. A writer is
-- entitled to continuously retry Write as long as it gets SHORT_WRITE.
--
-- In particular, Copier and Write_at_least, Write_full will retry on
-- SHORT_WRITE.
let SHORT_WRITE = {Why=*"SHORT_WRITE: Short write"}:Error
let SHORT_BUFFER = {Why=*"SHORT_BUFFER: Short buffer"}:Error
let UNEXPECTED_EOF = {Why=*"UNEXPECTED_EOF: Unexpected EOF"}:Error

-- We just tried to perform system I/O, but it would have blocked/hanged the
-- process. Should only be returned by the syscall module.
-- Should only be returned if *no* progress was made.
-- Use case when used in conjunction with edge-triggered polling.
let WOULD_BLOCK = {Why=*"WOULD_BLOCK: Operation would block"}:Error


let chunk_size = 4096

intf `Reader =
	-- Returns a slice of b with the same origin, extended to include the
	-- content just read.
	-- Short reads do not need to return a non-OK error, unless they were
	-- passed a non-empty buffer and read nothing at all.
	met# Read b:[!]U8 = [!]U8, Error

intf `Writer =
	-- Returns a slice of b with the content not yet written, if any.
	-- Short writes must return an non-OK error. See SHORT_WRITE.
	met# Write b:[]U8 = []U8, Error

intf `Closer =
	met# Close = Error

intf `Read_closer =
	isa `Reader `Closer
intf `Write_closer =
	isa `Writer `Closer


fun Read_at_least b:[!]U8 r:#`Reader min_count:Uint = [!]U8, err:Error
	if b.Available < min_count
		return b, SHORT_BUFFER
	let orig = b.Count
	while b.Count-orig < min_count and err == OK
		b, err = r#Read b

	let rd = b.Count-orig
	if rd >= min_count
		err = OK
	elif rd > 0 and err == EOF
		err = UNEXPECTED_EOF
	return b, err

fun Read_full b:[!]U8 r:#`Reader = [!]U8, Error
	return Read_at_least b r b.Available

fun Write_at_least w:#`Writer b:[]U8 min_count:Uint = []U8, err:Error
	let target = b.Count - (Min b.Count min_count)
	while b.Count > target and (err == OK or err == SHORT_WRITE)
		b, err = w#Write b

	if b.Count <= target
		err = OK
	return b, err

fun Write_full w:#`Writer b:[]U8 = []U8, Error
	return Write_at_least w b b.Count


fun Fast_forward r:#`Reader count:Uint = count_skipped:Uint, Error
	if count == 0
		return 0, OK

	let bufr = (Dyncast bufio.Reader) r
	if bufr?
		r = bufr.R

	let seeker = (Dyncast fs.`Seeker) r
	if seeker?
		let err, reached = seeker#Seek count.Signed CUR
		if err != OK
			return 0, err
		if reached != count
			return reached, EOF
		return reached, OK

	var discarder:Copier
	discarder#Reset nil r
	let written, err = discarder!Copy max=count
	return written, err


-- Copy until EOF on the read side.
--
-- Need a struct with state: in case of a transient write error, like AGAIN, we
-- need to keep already read data but not yet written.
inline struct Copier =
	Dst		:#`Writer
	Src		:#`Reader
	Max		:Uint
	buf		:Stringbuf
	total_written	:Uint
	discard		:ioutil.Discard

-- If 'dst' is nil, discard.
Copier met# Reset dst:?#`Writer src:#`Reader ?max:?Uint
	if dst?
		self#Dst = dst
	else
		self#Dst = #self#discard
	self#Src = src
	self#Max = max else Uint.MAX
	self#buf#Reserve chunk_size
	self#buf#Resize 0
	self#total_written = 0

Copier met Total_written = Uint
	return self.total_written

-- Return io.EOF when done (either io.EOF was read, or self.Max reached).
-- Only returns OK if this call read max bytes.
Copier met! Copy ?max:?Uint = written:Uint, err:Error
	-- First write any not-yet-written data left from a previous call.
	if self.buf.Count > 0
		let left, wr_err = self!Dst#Write self.buf.Bytes
		written += self.buf.Count - left.Count
		self!buf#Copy_from left
		if wr_err != OK
			self!total_written += written
			return written, wr_err

	let limit = max else Uint.MAX
	let total_left = self.Max - self.total_written
	var more = Min limit total_left
	while more > 0
		var b, rd_err = self!buf!Bytes, OK
		if more < b.Available
			b = b!Recapped b.Count+more

		let read_before = b.Count

		b, rd_err = self!Src#Read b
		let read = b.Count - read_before
		more -= read

		let left, wr_err = self!Dst#Write b
		assert left.Count == 0 or wr_err != OK -- By `Write.
		written += b.Count - left.Count

		-- Automatically takes into account partial reads and partial writes.
		self!buf#Copy_from left

		if rd_err == EOF and wr_err != OK
			err = wr_err
			break
		elif rd_err != OK
			err = rd_err
			break
		elif wr_err != OK and wr_err != SHORT_WRITE
			err = wr_err
			break
		elif read == 0
			err = EOF
			break

	self!total_written += written

	if err == OK and self.total_written == self.Max
		err = EOF

	return written, err

example copier
	let s = "This is a test"
	let src = bufio.Mk_string_reader s
	var buf:Stringbuf
	var copier:Copier
	copier#Reset #buf #src
	var written, err = copier!Copy
	assert err == EOF
	assert s == buf.String
	assert written == s.Count
	assert copier.Total_written == s.Count
	written, err = copier!Copy
	assert err == EOF
	assert buf.String == s
	assert written == 0
	assert copier.Total_written == s.Count

example copier_limited
	let s = "This is a test"
	let src = bufio.Mk_string_reader s
	var buf:Stringbuf
	var copier:Copier
	copier#Reset #buf #src max=4
	var written, err = copier!Copy
	assert err == EOF
	assert buf.String == "This"
	assert written == 4
	assert copier.Total_written == 4
	written, err = copier!Copy
	assert err == EOF
	assert buf.String == "This"
	assert written == 0
	assert copier.Total_written == 4

example copier_incremental
	let s = "This is a test"
	let src = bufio.Mk_string_reader s
	var buf:Stringbuf
	var copier:Copier
	copier#Reset #buf #src
	var written, err = copier!Copy max=5
	assert err == OK
	assert buf.String == "This "
	assert written == 5
	assert copier.Total_written == 5
	written, err = copier!Copy
	assert err == EOF
	assert buf.String == s
	assert written == s.Count - 5
	assert copier.Total_written == s.Count


inline struct Limited_reader =
	isa `Reader
	R	:#`Reader
	Left	:Uint

Limited_reader fun Mk r:#`Reader limit:Uint = ret:this
	ret#R = r
	ret#Left = limit

Limited_reader met# Read b:[!]U8 = rb:[!]U8, rerr:Error
	if self.Left == 0
		return b, EOF

	var lim_b = b
	if lim_b.Available > self.Left
		lim_b = lim_b!Recapped lim_b.Count+self.Left

	rb, rerr = self.R.Read lim_b
	-- Return a slice with the original cap.
	rb = b.[.. rb.Count]

	self!Left -= rb.Count - b.Count
	if self.Left == 0
		rerr = EOF

example limited_reader
	let s = "Test"
	let r = bufio.Mk_string_reader s
	let lr = Limited_reader.Mk #r 3
	var buf:Stringbuf
	buf#Reserve 100
	var b, err = lr#Read (buf!Bytes!Recapped 1)
	assert err == OK and b.Count == 1 and b.Const == "T".Bytes and lr.Left == 2 and b.Cap == 1
	b, err = lr#Read buf!Bytes![.. 1]
	assert err == EOF and b.Count == 3 and b.Const == "Tes".Bytes and lr.Left == 0 and b.Cap == 100
	b, err  = lr#Read b
	assert err == EOF and b.Count == 3 and b.Const == "Tes".Bytes and lr.Left == 0 and b.Cap == 100
