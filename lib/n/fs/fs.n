from n import *
import n.syscall
import n.path
import n.io
import n.time
import n.crypto.rand
import n.fs
import n.bench

inline struct Stats =
	isa bench.`Measure
	Opened		:Int
	Closed		:Int
	Max_open	:Int

Stats met Operator_plus other:*this = r:this
	r!Opened = self.Opened + other.Opened
	r!Closed = self.Closed + other.Closed
	r!Maintain

Stats met Operator_minus other:*this = r:this
	r!Opened = self.Opened - other.Opened
	r!Closed = self.Closed - other.Closed
	r!Maintain

Stats met Operator_uminus = r:this
	r!Opened = - self.Opened
	r!Closed = - self.Closed
	r!Maintain

Stats met Open = Int
	return self.Opened - self.Closed

Stats met! Maintain
	self!Max_open = Max self!Max_open self.Open


-- TODO
-- * Do not return syscall errors directly, define our own.

-- O_PATH is used by this implementation, but we recommend using it only on
-- directories* Support on files is limited to a few limited cases on Linux.
-- O_TMPFILE and /proc are used by Open_file when creating files with
-- permissions beyond access mode bits.

inline enum Openbits =
	| PATH
	| READ
	| WRITE
	| CREATE
	| TRUNCATE
	| APPEND
	| EXCLUSIVE
	| HIDDEN
	| DIRECTORY
	| NOFOLLOW

alias Openflags = (Enumset Openbits)

fun sys_open_flags flags:?Openflags = r:syscall.Open_flags
	r = syscall.O_CLOEXEC
	let flags = flags else {}
	if READ in flags and WRITE in flags
		r |= syscall.O_RDWR
	elif READ in flags
		r |= syscall.O_RDONLY
	elif WRITE in flags
		r |= syscall.O_WRONLY

	if TRUNCATE in flags
		r |= syscall.O_TRUNC
	if CREATE in flags
		r |= syscall.O_CREAT
	if APPEND in flags
		r |= syscall.O_APPEND

	if EXCLUSIVE in flags
		r |= syscall.O_EXCL
	if HIDDEN in flags
		r |= syscall.O_TMPFILE
	if DIRECTORY in flags
		r |= syscall.O_DIRECTORY
	if NOFOLLOW in flags
		r |= syscall.O_NOFOLLOW

inline struct Openattr =
	Access	:Accessmask
	Owner	:?Uid
	Group	:?Gid
	Xattr	:(Buf (Stringbuf, Stringbuf))

Openattr met sys_open_mode = syscall.Mode
	return sys_mode_from_accessmask self.Access

fun Path_handle name:path.Path ?at:?*File = Error, #File within Fs
	return Fs!Open_file name at=at flags={PATH}

fun Open name:path.Path ?at:?*File ?flags:?Openflags ?attr:?*Openattr = Error, #File within Fs
	return Fs!Open_file name at=at flags=(flags else {READ}) attr=attr

fun Create ?name:?path.Path ?at:?*File ?flags:?Openflags ?attr:?*Openattr = Error, #File within Fs
	flags = (flags else {}) | {CREATE WRITE TRUNCATE}
	let attr = attr else {} such
		attr!Access |= {UR UW GR GW OR OW}
	return Fs!Open_file name at=at flags=flags attr=attr

fun Open_dir name:path.Path ?at:?*File ?flags:?Openflags ?attr:?*Openattr = Error, #File within Fs
	flags = (flags else {}) | {DIRECTORY}
	return Fs!Open_file name at=at attr=attr

fun letter32_from_rand_byte b:U8 = U8
	let a = ('a':Rune).Code.Trim_u8
	let zero = ('0':Rune).Code.Trim_u8

	let c = b % 32
	if c < 26
		return a + c
	else
		return zero - 26 + c

fun make_random_name name:#path.Path prefix:?String postfix:?String
	name#Clear
	name#Cat (prefix else "tmp")

	let rndlen = 6 -- 32=2^5 different letters, 6 letters: 6*5=30 bits of entropy
	let prelen = name.Count
	name#Reserve prelen+rndlen
	let b = name![prelen ..]!Recapped rndlen such
		try
			b, except = rand.Read_full b
		catch err
			Fatal err
		foreach i in b.All
			b![i]! = letter32_from_rand_byte b.[i]
	name#Append b

	name#Cat (postfix else "")

fun Temporary ?at:?*File
	\ ?flags:?Openflags
	\ ?attr:?*Openattr
	\ ?named:?Bool
	\ ?prefix:?String
	\ ?postfix:?String
	\ = Error, #File within Fs
	let dir = at
	if not dir?
		try
			except, dir = Path_handle "/tmp"
		catch err
			return err, nil

	let flags = flags else {}
	and attr = attr else {}
	and name = {}:path.Path such
		flags |= {READ WRITE CREATE EXCLUSIVE}
		attr!Access |= {UR UW}

		if named else false
			while true
				make_random_name #name prefix postfix
				let err, file = Fs!Open_file name at=dir flags=flags attr=attr
				if err == OK
					return OK, file
				if err == syscall.EEXIST
					-- try again with a new name
					continue
				else
					return err, nil
		else
			flags |= {HIDDEN}
			flags &= ~{CREATE EXCLUSIVE}:Openflags
			return Fs!Open_file "." at=dir flags=flags attr=attr

globalenv Fs:!`Fs

fun Install_sys within Fs
	let fs = Alloc linux
	let err = fs!Init
	if err != OK
		Fatal err
	let header = Alloc (Envheader !`Fs)
	header#Env = fs
	Globalenv_install Fs header


intf `Fs =
	isa (bench.`Observable_of Stats)

	met Wd = !File
	met! Pushdir dir:!File = Error
	met! Popdir = Error

	met! Global_chdir dir:*File = Error

	met! Mkdir name:path.Path ?attr:?*Openattr ?recursive:?Bool = Error
	met! Rmdir name:path.Path ?recursive:?Bool ?even_not_empty:?Bool = Error

	met! Open_file name:path.Path ?at:?*File ?flags:?Openflags ?attr:?*Openattr = Error, #File

	-- Act on a file* Called by File.
	met! File_close f:!File = Error
	met! File_stat f:*File = Error, Stat
	met File_readlink f:*File = Error, path.Path
	met! File_datasync f:!File = Error
	met! File_sync f:!File = Error
	met! File_truncate f:!File size:Uint = Error
	met! File_chown f:!File owner:Int group:Int = Error
	met File_list_xattr f:!File buf:!Stringbuf = Error, list:(Buf String)
		\ -- ::(x in list => x::(Owned buf))
	met File_get_xattr f:!File buf:!Stringbuf name:String = Error, Uint
	met! File_set_xattr f:!File name:String value:[]U8 ?create_only:?Bool = Error
	met! File_remove_xattr f:!File name:String = Error

	met! File_read f:!File b:[!]U8 = [!]U8, Error
	met! File_read_at f:!File b:[!]U8 off:Uint = [!]U8, Error
	met! File_write f:!File b:[]U8 = []U8, Error
	met! File_write_at f:!File b:[]U8 off:Uint = []U8, Error
	met! File_mmap f:!File ?offset:?Uint ?size:?Uint ?prot:?Protmask ?shared:?Bool = Error, !Mmap
	met! Munmap m:#Mmap

	-- Act on a Path.
	-- 'at' defaults to Wd.
	met! Symlink target:path.Path name:path.Path ?at:?*File = Error
	met! Link newpath:path.Path oldpath:path.Path ?newat:?*File ?oldat:?*File ?follow:?Bool = Error
	met! Unlink name:path.Path ?at:?*File = Error
	met! Rename newpath:path.Path oldpath:path.Path ?newat:?*File ?oldat:?*File = Error
	met Stat name:path.Path ?at:?*File ?nofollow:?Bool = Error, Stat
	met! Readlink name:path.Path ?at:?*File = Error, path.Path

struct linux =
	isa `Fs
	init		:Bool
	dirstack	:(Buf !File)
	stats		:(bench.Stack Stats)

linux met! Init = Error
	assert not self.init
	self!init = true
	try
		let except, fd = syscall.Openat syscall.AT_FDCWD "." syscall.O_PATH 0
		let cwd = Alloc File such
			cwd!fs = self
			cwd!fd = fd
		self!dirstack#Push! = cwd
		return OK
	catch err
		self!init = false
		return err

linux met Wd = !File
	assert self.init
	assert self.dirstack.Count > 0
	return self.dirstack.Last*

linux met! Pushdir dir:!File = Error
	assert self.init
	let except, st = dir.Stat
	if not st.Is_dir
		return syscall.ENOTDIR
	self!dirstack#Push! = dir
	return OK

linux met! Popdir = Error
	assert self.init
	if self.dirstack.Count == 0
		return INVAL
	self!dirstack#Pop
	return OK

linux met! Global_chdir dir:*File = Error
	assert self.init
	except = syscall.Fchdir dir.Fd
	return OK

fun allows_immediate flags:?Openflags attr:?*Openattr = Bool
	return PATH in (flags else {})
		\ or not attr?
		\ or not (attr.Owner? or attr.Group? or attr.Xattr.Count > 0)

-- There is a race between the creation of the directory and the setting of the
-- attributes in permissions (to the exception of the Accessmask)* There is no
-- equivalent to O_TMPFILE for directories.
linux met! Mkdir name:path.Path ?attr:?*Openattr ?recursive:?Bool = Error
	assert not (recursive else false) -- FIXME Add support.
	assert allows_immediate {} attr -- FIXME Add support.
	except = syscall.Mkdirat self.Wd.Fd name.String attr?.sys_open_mode
	return OK

linux met! Rmdir name:path.Path ?recursive:?Bool ?even_non_empty:?Bool = Error
	assert not (recursive else false) -- FIXME Add support.
	assert not (even_non_empty else false) -- FIXME Add support.
	except = syscall.Unlinkat self.Wd.Fd name.String syscall.AT_REMOVEDIR
	return OK

linux met! Open_file name:path.Path ?at:?*File ?flags:?Openflags ?attr:?*Openattr = Error, #File
	let flags = flags else {}
	let attr = attr else {}
	let mode = attr.sys_open_mode such
		if mode == 0 and HIDDEN in flags
			-- Workaround pre-3.18 kernel bug
			mode = 0600
	let sys_flags = sys_open_flags flags
	let atfd = at?.Fd else self.Wd.Fd
	var fd = -1
	try
		if allows_immediate flags attr
			except OPEN, fd = syscall.Openat atfd name.String sys_flags mode
		else
			except OPEN, fd = syscall.Openat atfd name.String sys_flags mode

			if attr.Owner? or attr.Group?
				except CLOSE = syscall.Fchown fd
					\ (attr.Owner else -1)
					\ (attr.Group else -1)

			if attr.Xattr.Count > 0
				foreach key, val in attr.Xattr
					except CLOSE = syscall.Fsetxattr fd key.String val.String
						\ syscall.XATTR_REPLACE

			let fdpath = {}:path.Path such
				fdpath#Join "/proc/self/fd" fd
			except CLOSE = syscall.Linkat -1 fdpath.String
				\ atfd name.String
				\ syscall.AT_SYMLINK_FOLLOW
	catch OPEN err
		return err, nil
	catch CLOSE err
		Drop <- syscall.Close fd
		return err, nil

	let file = Alloc File such
		file!fs = self
		file!fd = fd
		file!name = name.Base

	self!stats!Current!Opened += 1
	self!stats!Current!Maintain

	return OK, file

linux met! File_close f:!File = Error
	let fd = f.Fd
	except = syscall.Close fd
	f!fd = nil
	self!stats!Current!Closed += 1
	self!stats!Current!Maintain
	return OK

linux met! File_stat f:*File = Error, st:Stat
	let flags = syscall.AT_SYMLINK_NOFOLLOW | syscall.AT_EMPTY_PATH
	try
		let sys = {}:syscall.Stat_t such
			except = syscall.Fstatat f.Fd "" !sys flags
		st = sys_stat_from_sys sys
		return OK, st
	catch err
		return err, {}

linux met File_readlink f:*File = Error, path.Path
	try
		var buf = {}:Stringbuf such
			buf#Resize 256
		while true
			let except, b = syscall.Readlinkat f.Fd "" buf!Bytes![..]
			if b.Count < buf.Count
				return OK, path.Mk (String.From_bytes b)

			buf#Resize 2*buf.Count
	catch err
		return err, {}

linux met! File_datasync f:!File = Error
	return syscall.Fdatasync f.Fd

linux met! File_sync f:!File = Error
	return syscall.Fsync f.Fd

linux met! File_truncate f:!File size:Uint = Error
	return syscall.Ftruncate f.Fd size

linux met! File_chown f:!File owner:Int group:Int = Error
	return syscall.Fchown f.Fd owner group

linux met File_list_xattr f:!File buf:!Stringbuf = Error, list:(Buf String)
	-- ::(x in list => x::(Owned buf))
	return syscall.ENOSYS, {}

linux met File_get_xattr f:!File buf:!Stringbuf name:String = Error, Uint
	return syscall.ENOSYS, 0

linux met! File_set_xattr f:!File name:String value:[]U8 ?create_only:?Bool = Error
	return syscall.ENOSYS

linux met! File_remove_xattr f:!File name:String = Error
	return syscall.ENOSYS

linux met! File_read f:!File b:[!]U8 = [!]U8, Error
	return syscall.Read f.Fd b

linux met! File_read_at f:!File b:[!]U8 off:Uint = [!]U8, Error
	return syscall.Pread f.Fd b off

linux met! File_write f:!File b:[]U8 = []U8, Error
	return syscall.Write f.Fd b

linux met! File_write_at f:!File b:[]U8 off:Uint = []U8, Error
	return syscall.Pwrite f.Fd b off

linux met! Symlink target:path.Path name:path.Path ?at:?*File = Error
	except = syscall.Symlinkat target.String (at?.Fd else self.Wd.Fd) name.String

linux met! Link newpath:path.Path oldpath:path.Path
	\ ?newat:?*File ?oldat:?*File ?follow:?Bool = Error
	let flags = 0 such
		if follow else false
			flags |= syscall.AT_SYMLINK_FOLLOW
	except = syscall.Linkat
		\ (oldat?.Fd else self.Wd.Fd)
		\ oldpath.String
		\ (newat?.Fd else self.Wd.Fd)
		\ newpath.String
		\ flags

linux met! Unlink name:path.Path ?at:?*File = Error
	except = syscall.Unlinkat (at?.Fd else self.Wd.Fd) name.String 0

linux met! Rename newpath:path.Path oldpath:path.Path ?newat:?*File ?oldat:?*File = Error
	except = syscall.Renameat
		\ (oldat?.Fd else self.Wd.Fd)
		\ oldpath.String
		\ (newat?.Fd else self.Wd.Fd)
		\ newpath.String
		\ 0

linux met Stat name:path.Path ?at:?*File ?nofollow:?Bool = Error, Stat
	let flags = 0 such
		if nofollow else false
			flags |= syscall.AT_SYMLINK_NOFOLLOW
	try
		let sys = {}:syscall.Stat_t such
			except = syscall.Fstatat (at?.Fd else self.Wd.Fd)
				\ name.String !sys flags
		let st = sys_stat_from_sys sys
		return OK, st
	catch err
		return err, {}

linux met! Readlink name:path.Path ?at:?*File = Error, path.Path
	let dirfd = at?.Fd else self.Wd.Fd
	try
		var buf = {}:Stringbuf such
			buf#Resize 256
		while true
			let except, b = syscall.Readlinkat dirfd name.String buf!Bytes![..]
			if b.Count < buf.Count
				return OK, path.Mk (String.From_bytes b)

			buf#Resize 2*buf.Count
	catch err
		return err, {}

linux met! Save_measurements = bench.Restorer
	return self!stats!Save

linux met Measure = Stats
	return self.stats.Current

linux met! File_mmap f:!File ?offset:?Uint ?size:?Uint ?prot:?Protmask ?shared:?Bool = Error, ?!Mmap
	let offset = offset else 0
	let size = size else block
		let except, st = f.Stat
		st.Size
	let prot = prot else {READ}
	let shared = shared else false

	let except, addr = syscall.Mmap 0 size
		\ (sys_mmap_prot prot) (sys_mmap_flags shared)
		\ f.Fd offset

	let m = Alloc Mmap such
		m!file = f
		m!range = offset .. offset+size
		m!bytes#Unsafe_wrap addr size size
		m!shared = shared
		m!prot = prot
	return OK, m

linux met! Munmap m:#Mmap
	let err = syscall.Munmap m#bytes#Unsafe_data m.bytes.Count
	if err != OK
		Fatal err
	m#range = {}
	m#bytes = {}
	m#shared = {}
	m#prot = {}
