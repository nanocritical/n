-- File operations as implemented here assume a recent Linux kernel (>= 3.11).
-- First, we rely on *at() syscalls* Secondly, when complex attr are passed
-- to Open (e.g* SELinux attributes) we rely on O_TMPFILE to first create a
-- hidden file (an inode with no name), change its owner/group/xattr, then give
-- it a name with linkat()* This prevents other processes from opening the file
-- before its permissions are fully set up.
-- On older Linux, or on systems without equivalent support, such facility
-- cannot be implemented as safely, but this module will do its best.

inline struct File =
	isa `Not_copyable io.`Reader io.`Writer
		\ io.`Read_closer io.`Write_closer
		-- io.`Reader_at io.`Writer_at
	fs	:?!`Fs
	fd	:syscall.Fd
	hidden	:Bool
	name	:path.Path

File met# Dtor
	drop = self!Close

File fun Open_fd fd:syscall.Fd = this
	var buf:Stringbuf
	fmt.F #buf "/proc/self/fd/%s" fd
	return {fd=fd name=(path.Path.From_string buf.String)}

File met Is_open = Bool
	return self.fd.Is_valid

File met Fd = syscall.Fd
	return self.fd

File met Pathname = path.Path
	return self.name

File met! Close = Error
	if not self.fs?
		let fd = self!fd#Move
		if not fd.Is_valid
			return OK
		return syscall.Close fd
	return self!fs!File_close self

File met Stat = Error, Stat
	if not self.fs?
		-- TODO(e): need support for pipes, sockets, ...
		return syscall.ENOSYS, {}
	return self.fs!File_stat self

File met Readlink = Error, path.Path
	if not self.fs?
		return syscall.ENOSYS, {}
	return self.fs!File_readlink self

File met! Datasync = Error
	if not self.fs?
		return syscall.ENOSYS
	return self!fs!File_datasync self

File met! Sync = Error
	if not self.fs?
		return syscall.ENOSYS
	return self!fs!File_sync self

File met! Truncate size:Uint = Error
	if not self.fs?
		return syscall.ENOSYS
	return self.fs!File_truncate self size

File met! Chown f:!File owner:Int group:Int = Error
	return syscall.ENOSYS

File met List_xattr f:!File buf:!Stringbuf = Error, list:(Buf String)
	-- ::(x in list => x::(Owned buf))
	return syscall.ENOSYS, {}

File met Get_xattr f:!File buf:!(Buf U8) name:String = Error, Uint
	return syscall.ENOSYS, {}

File met! Set_xattr f:!File name:String value:[]U8 ?create_only:?Bool = Error
	return syscall.ENOSYS

File met! Remove_xattr f:!File name:String = Error
	return syscall.ENOSYS

File met! Readdir buf:#(Buf Stat) ?max:?Uint = Error
	return syscall.ENOSYS

File met! Read b:[!]U8 = [!]U8, Error
	if not self.fs?
		return syscall.Read self.fd b
	return self.fs!File_read self b

File met! Read_at b:[!]U8 off:Uint = [!]U8, Error
	if not self.fs?
		return syscall.Pread self.fd b off
	return self.fs!File_read_at self b off

File met! Write b:[]U8 = []U8, Error
	if not self.fs?
		return syscall.Write self.fd b
	return self.fs!File_write self b

File met! Write_at b:[]U8 off:Uint = []U8, Error
	if not self.fs?
		return syscall.Pwrite self.fd b off
	return self.fs!File_write_at self b off
