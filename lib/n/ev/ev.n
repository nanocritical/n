from n import *
import n.syscall
import n.time
import n.unsafe
import n.fmt
import n.io
import n.logging

within logging.Log

enum Events =
	| READ
	| WRITE
	-- Always (try to) read first before processing any error or hang-up.
	| ERROR
	-- Hang up happened on the associated file descriptor. There may be
	-- more data to read.
	| HUP
	-- Stream socket peer closed connection, or shut down writing half
	-- of connection. There may be more data to read.
	| RDHUP
	| CLOSE
	| MANUAL

intf `Handler =
	met@# On ev:Event = Error

intf `Pollable =
	met Source = Source


struct user_source =
	noop

inline union Source =
	isa `Has_equality `Hashable32 `Show
	| DRY = 0
	| USER -> @user_source
	| FD -> syscall.Fd

Source met Hash32 = U32
	match self
	| DRY -> return 1
	| USER -> return (unsafe.Voidref.From_ptr self.USER).Uintptr.Hash32
	| FD -> return self.FD.Hash32

Source met Operator_eq other:*this = Bool
	if self.Tag != other.Tag
		return false
	match self
	| DRY -> return true
	| USER -> return self === other
	| FD -> return self.FD == other.FD

Source met Operator_ne other:*this = Bool
	return not self == other

Source met Show st:#fmt.`Fmt_state
	match self
	| DRY -> "DRY".Show st
	| USER -> (unsafe.Voidref.From_ptr self.USER).Uintptr.Show st
	| FD -> self.FD.Show st


inline struct Event =
	isa `Show `Has_equality
	Source	:Source
	Ask	:(Enumset Events)
	Got	:(Enumset Events)
	Handler	:?@#`Handler

	let NONE = {}:this

Event met Operator_eq other:*this = Bool
	return self.Source == other.Source
		\ and self.Ask == other.Ask
		\ and self.Got == other.Got
		\ and self.Handler === other.Handler

Event met Operator_ne other:*this = Bool
	return not self == other

Event met Show st:#fmt.`State
	fmt.F st "%s on %s" self.Got self.Source


struct sinks =
	source		:Source
	uid		:Uint -- Used for tracking by kernel-side event
	total_ask	:(Enumset Events)
	handlers	:(Map (Ref_as_key ?@#`Handler) (Enumset Events))
	-- Only one handler can be registered for CLOSE.
	closer		:?@#`Handler

inline struct Poll =
	sinks_for_source:(Map Source ?@#sinks)
	sinks_for_uid	:(Map Uint ?@#sinks)
	next_uid	:Uint

	manuals		:(Buf ?@#`Handler)
	closes		:(Set Source)

	epfd		:syscall.Fd
	sys_buf		:(Buf syscall.Epoll_event)
	sys_pending	:[!]syscall.Epoll_event

	-- We still have handlers to call for that source.
	pending_got	:(Enumset Events)
	pending_source	:Source
	pending_handlers:(Buf (?@#`Handler, (Enumset Events)))

	sleeping	:Bool

	Current_handler	:?@#`Handler

Poll met# Init = Error
	assert self.sys_buf.Count == 0

	except, self!epfd = syscall.Epoll_create1 0
	self!sys_buf#Reserve 128

Poll met Has_waiters = Bool
	return self.sinks_for_source.Count != 0 or self.Has_pending_events

-- If non-zero, Wait will return an event immediately and will not block.
Poll met Has_pending_events = Bool
	return self.pending_handlers.Count != 0 or self.sys_pending.Count != 0

fun events_to_sys_events r:Events = U32
	match r
	| READ -> return syscall.EPOLLIN
	| WRITE -> return syscall.EPOLLOUT
	| ERROR -> return syscall.EPOLLERR
	| HUP -> return syscall.EPOLLHUP
	| RDHUP -> return syscall.EPOLLRDHUP
	| CLOSE -> return 0

fun sys_events_to_events events:U32 = r:(Enumset Events)
	if syscall.EPOLLIN & events != 0
		r |= {READ}
	if syscall.EPOLLOUT & events != 0
		r |= {WRITE}
	if syscall.EPOLLERR & events != 0
		r |= {ERROR}
	if syscall.EPOLLHUP & events != 0
		r |= {HUP}
	if syscall.EPOLLRDHUP & events != 0
		r |= {RDHUP}

sinks met! init source:Source
	self!source = source
	_ = self!total_ask!Add_all {ERROR HUP}

sinks met! register ask:(Enumset Events) handler:?@#`Handler
	_ = self!total_ask!Add_all ask

	let stored_ask = self#handlers#Store {Ref=handler}
	_ = stored_ask!Add_all {ERROR HUP}
	_ = stored_ask!Add_all ask

sinks met! unregister un_ask:(Enumset Events) handler:?@#`Handler
	_ = self!total_ask!Remove_all un_ask

	if handler?
		-- Applies to a single handler.
		let ask = self!handlers![{Ref=handler}]
		assert ask?
		_ = ask!Remove_all un_ask
	else
		for _, ask over self!handlers!Iter
			_ = ask!Remove_all un_ask

Poll met! get_fresh_uid = uid:Uint
	-- Just in case we wrapped around sks.uid and an old one survived
	-- long enough to clash with a new one, we check for existence:
	while true
		uid = self.next_uid

		self!next_uid += 1
		if self.next_uid == Uint.MAX
			self!next_uid = 0

		if not uid in self.sinks_for_uid
			return uid

Poll met! Register source:Source ask:(Enumset Events) handler:?@#`Handler = Error
	if ask.Count == 0
		return OK

	if MANUAL in ask
		self!manuals#Push# = handler

	let just_pseudo = ask <= {MANUAL}
	if just_pseudo
		return OK

	let added, p_sks = self!sinks_for_source#Try_store source
	and op = syscall.EPOLL_CTL_MOD such
		if added
			p_sks# = Alloc sinks
	let sks = p_sks#
	if added
		sks!init source
		sks!uid = self!get_fresh_uid
		(self!sinks_for_uid#Store sks.uid)# = sks
		op = syscall.EPOLL_CTL_ADD

	sks!register ask handler

	if CLOSE in ask and handler?
		if sks.closer? and sks.closer !== handler
			Log#Error "Only one handler for CLOSE allowed"
			return INVAL
		sks!closer = handler

	if source !=| FD
		return OK

	let sys_events_defaults = syscall.EPOLLERR | syscall.EPOLLHUP | syscall.EPOLLET
	let events = sys_events_defaults such
		for f over sks.total_ask.Iter
			events |= events_to_sys_events f

	let sys_event = syscall.Epoll_event.Mk events sks.uid.Uintptr
	except = syscall.Epoll_ctl self.epfd op source.FD sys_event

Poll met! sys_unregister_all source:Source
	if source ==| FD
		-- Old Linux does not accept a nil event.
		let sys_event = syscall.Epoll_event.Mk 0 0
		never = syscall.Epoll_ctl self.epfd syscall.EPOLL_CTL_DEL source.FD sys_event

-- Unless you call Unregister with an explicit (Enumset Events).ALL, the source
-- will not be removed, still receiving ERROR and HUP.
-- If handler is nil, applies to handler for that source.
Poll met! Unregister source:Source un_ask:(Enumset Events) handler:?@#`Handler = Error
	if un_ask == (Enumset Events).ALL
		if not source in self.sinks_for_source
			return INVAL
		self!sys_unregister_all source
		let sks = self!remove_sinks source
		return OK

	let p_sks = self!sinks_for_source![source]
	if not p_sks?
		return INVAL

	let sks = p_sks#
	sks!unregister un_ask handler

	if CLOSE in un_ask
		sks!closer = nil

	if source !=| FD
		return OK

	let sys_events_defaults = syscall.EPOLLERR | syscall.EPOLLHUP | syscall.EPOLLET
	let events = sys_events_defaults such
		for f over sks.total_ask.Iter
			events |= events_to_sys_events f
	let sys_event = syscall.Epoll_event.Mk 0 sks.uid.Uintptr
	except = syscall.Epoll_ctl self.epfd syscall.EPOLL_CTL_MOD source.FD sys_event

Poll met! Schedule_manually h:@#`Handler = Error
	assert not self.sleeping -- FIXME(e): multithread or multi loop: use an eventfd in the pool
	return self!Register {} {MANUAL} h

Poll met! Schedule_close source:Source = Error
	if not source in self.sinks_for_source
		return INVAL

	_ = self!closes#Add source

Poll met! process_manuals = Error
	-- Processing manual handlers may add more to manuals, so we steal it:
	let manuals = self!manuals#Move
	var keep:(Buf ?@#`Handler)
	foreach ph over manuals
		let h = ph*
		if not h?
			continue
		self!Current_handler = h
		let err = h#On {Got={MANUAL} Handler=h}
		self!Current_handler = nil
		if err == io.WOULD_BLOCK
			keep#Push# = h
			continue
		if err != OK
			Log#Warning "Handler error on CLOSE: %s" err

	self!manuals#Append keep.Slice

Poll met! remove_sinks source:Source = @#sinks
	let sks = self.sinks_for_source.[source]*
	_ = self!sinks_for_source#Delete source
	return sks

sinks met! close poll:!Poll = did_close:Bool
	-- Assume it's going to be closed below and that source will become
	-- invalid (if it's a FD).
	-- sks is self, but with different mutability.
	let sks = poll!remove_sinks self.source
	assert sks === self

	if not self.closer?
		if self.source ==| FD
			drop = syscall.Close self.source.FD
		return true

	let e_close = {Source=self.source Got={CLOSE} Handler=self.closer}:Event

	poll!Current_handler = e_close.Handler
	let err = e_close.Handler#On e_close
	poll!Current_handler = nil

	var not_closing = false
	if err == io.WOULD_BLOCK
		not_closing = true
	elif err != OK
		Log#Warning "Handler error on CLOSE: %s" err

	if not_closing
		-- Put it back.
		(poll!sinks_for_source#Store self.source)# = sks
		return false

	if self.source ==| FD and self.source.FD.Is_valid
		-- Handler did not close it, so we do it.
		drop = syscall.Close self.source.FD

	return true

Poll met! process_closes = closed_some:Bool
	-- Processing close handlers may add more to closes, so we make a copy.
	let closes = self.closes.Copy_to_buf
	self!closes#Clear

	foreach source over closes
		let p_sks = self.sinks_for_source.[source]
		if not p_sks?
			Log#Warning "spurious source on close list: %s" source
			continue

		let sks = p_sks*
		let did_close = sks!close self
		if did_close
			closed_some = true

-- In a few places, we introduce a pseudo io.WOULD_BLOCK that does not come
-- from a syscall. In general that's a terrible idea, but here it let's us
-- communicate the right idea to Loop or other similar code.
fun pseudo_would_block = Error
	return io.WOULD_BLOCK

-- From epoll(7):
--
-- Q6  Will closing a file descriptor cause it to be removed from all
-- epoll sets automatically?
--
-- A6  Yes, but be aware of the following point.  A file descriptor is a
-- reference to an open file description (see open(2)).  Whenever a
-- descriptor is duplicated via dup(2), dup2(2), fcntl(2) F_DUPFD,
-- or fork(2), a new file descriptor referring to the same open file
-- description is created.  An open file description continues to
-- exist until all file descriptors referring to it have been
-- closed.  A file descriptor is removed from an epoll set only
-- after all the file descriptors referring to the underlying open
-- file description have been closed (or before if the descriptor is
-- explicitly removed using epoll_ctl(2) EPOLL_CTL_DEL).  This means
-- that even after a file descriptor that is part of an epoll set
-- has been closed, events may be reported for that file descriptor
-- if other file descriptors referring to the same underlying file
-- description remain open.
Poll met ignore_because_on_closed_fds sys_e:*syscall.Epoll_event = Bool
	let sks_uid = sys_e.Data.U64.To_uint
	let sks = self.sinks_for_uid.[sks_uid] else nil
	if not sks?
		Log#Critical "unknown sinks uid '%s' in a kernel event" sks_uid
		return true
	return sks.source ==| FD and not sks.source.FD.Is_valid

Poll met! sys_wait timeout:?time.Duration = Error
	Log#Debug ""

	assert self.sys_pending.Count == 0
	self#sleeping = true
	let err, res = syscall.Epoll_pwait self.epfd self!sys_buf![..]
		\ (timeout?.Millisec else -1) nil
	self#sleeping = false
	if err == syscall.EINTR
		return pseudo_would_block

	self!sys_pending = res

	Log#Debug "%s %s" res.Count

Poll met! Wait ?timeout:?time.Duration = Error, e:Event
	if self.pending_handlers.Count != 0
		return OK, self!pop_pending

	if self.sys_pending.Count == 0
		var closed_some
		while self.manuals.Count + self.closes.Count != 0
			closed_some = self!process_closes or closed_some

			except = self!process_manuals

		if closed_some and not self.Has_waiters and not self.Has_pending_events
			-- Give the caller a chance to notice that there are no
			-- waiters anymore. If we're called again, then we'll block
			-- on the syscall.
			-- This is a "spurious" wakeup, we don't return OK.
			return pseudo_would_block, NONE

		let err = self!sys_wait timeout
		if err == io.WOULD_BLOCK
			return err, NONE
		except = err

	-- We tried to get more events. Let's see if we did:
	if self.sys_pending.Count == 0
		return OK, NONE

	let sys_e such
		let cnt = self.sys_pending.Count
		var i
		while i < cnt
			sys_e = self.sys_pending.[i]
			if not self.ignore_because_on_closed_fds sys_e
				self!sys_pending = self.sys_pending.[i+1 ..]
				break
			i += 1
			Log#Debug "ignoring sys_event on closed FD"

		if i == cnt
			-- It's as if we got no event at all.
			self!sys_pending = {}
			return OK, NONE

	let sks_uid = sys_e.Data.U64.To_uint
	let sks = self.sinks_for_uid.[sks_uid] else nil
	if not sks?
		Log#Critical "unknown sinks uid '%s' in a kernel event" sks_uid
		return UNKNOWN, NONE

	let pending_got = sys_events_to_events sys_e.Events

	if sks.handlers.Count == 0 or sks.total_ask & pending_got == {}
		self!pending_got = {}
		self!pending_source = {}
		self!pending_handlers#Clear
		return OK, NONE

	self!pending_got = pending_got
	self!pending_source = sks.source
	self!pending_handlers#Reserve sks.handlers.Count
	for handler, ask over sks.handlers.Iter
		let got = ask & self.pending_got
		if got.Count == 0
			continue
		(self!pending_handlers#Push)# = (handler.Ref, got)

	return OK, self!pop_pending

Poll met! pop_pending = e:Event
	if self.pending_handlers.Count == 0
		return NONE

	let handler, got = self.pending_handlers.Last*
	self!pending_handlers#Pop

	e!Source = self.pending_source
	e!Handler = handler
	e!Got = got

fun Loop poll:@#Poll ?continue_despite_handler_error:?Bool = Error
	while poll.Has_waiters
		let wait_err, e = poll!Wait
		if wait_err == io.WOULD_BLOCK
			continue
		except = wait_err
		if e == NONE
			continue

		poll#Current_handler = e.Handler
		let err = e.Handler#On e
		poll#Current_handler = nil
		if err == io.WOULD_BLOCK
			continue

		if err != OK
			if continue_despite_handler_error else false
				Log#Error "%s" err
				continue
			return err
