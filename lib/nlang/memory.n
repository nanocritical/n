from nlang import *
import nlang.unsafe

extern fun realloc p:?@#u8 oldbsz:size bsz:size = @#u8
extern fun free p:?@#u8 sz:size = void

export inline type heap =
  dummy:i32

export heap (method! t:i_any) alloc = @#t
  let raw = realloc null 0 (sizeof t)
  return (nlang.unsafe.cast @#u8 @#t) raw

export heap (method! t:i_any) free p:?@#t = void
  let raw = (nlang.unsafe.cast ?@#t ?@#u8) p
  return free raw (sizeof t)

export heap (method! t:i_trivial_ctor) slice_realloc s:@#(slice t) len:size = void
  let bsz = len * (sizeof t)
  if s.len == 0
    s#_rawdata = realloc null 0 bsz
    s#_count = len
  else
    let old_bsz = s.bytelen
    let raw = s#unsafe_rawdata
    s#_rawdata = realloc raw old_bsz bsz
    s#_count = len

export heap (method! t:i_trivial_ctor) slice_free s:@#(slice t) = void
  let bsz = s.bytelen
  let raw = s#unsafe_rawdata
  free raw bsz
  s#_count = 0
  s#_rawdata = null

export let sysheap = heap{{ }}


extern inline fun slice_at_byte dp:@#u8 off:size = @#u8

export inline type slice t:i_trivial_ctor = export i_trivial_ctor
  _count:size
  _rawdata:?@#u8

export inline slice method len = size
  return self._count

export inline slice method bytelen = size
  return self._count * (sizeof t)

export inline slice method$ unsafe_rawdata = @$u8
  assert (self._count != 0)
  return (nlang.unsafe.cast ?@#u8 @$u8) self$_rawdata

export inline slice method$ unsafe_data = @$t
  assert (self._count != 0)
  return (nlang.unsafe.cast ?@#u8 @$t) self._rawdata

export inline slice method$ at n:size = @$t
  assert (n < self._count)
  let off = n * (sizeof t)
  let p = slice_at_byte ((nlang.unsafe.cast @$this @#this)self)#unsafe_rawdata off
  return (nlang.unsafe.cast @#u8 @$t) p
