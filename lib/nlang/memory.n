from nlang.literals import *
from nlang.builtins import *
from nlang.containers import *
import nlang.unsafe

export intf i_allocator =
  (method! t:i_any) alloc = @#t
  (method! t:i_any) free p:?@#t = void
  (method! t:i_trivial_ctor) slice_realloc s:@#(slice t) count:size = void
  (method! t:i_trivial_ctor) slice_free s:@#(slice t) = void


extern inline fun slice_at_byte dp:@#u8 off:size = @#u8
extern inline fun slice_memcpy dst:@#u8 at:size src:@u8 off:size count:size = void

export inline type slice t:i_trivial_ctor = export i_trivial_ctor
  _rawdata:?@#u8
  _count:size

export inline slice fun unsafe_wrap data:@#t count:size = r:this
  r!_rawdata = (nlang.unsafe.cast @#t ?@#u8) data
  r!_count = count
  return r

export inline slice method count = size
  return self._count

export inline slice method bytelen = size
  return self._count * (sizeof t)

export inline slice method all = index_range
  return range 0 self._count

export inline slice method$ unsafe_rawdata = @$u8
  assert (self._count != 0)
  return (nlang.unsafe.cast ?@#u8 @$u8) self$_rawdata

export inline slice method$ unsafe_data = @$t
  assert (self._count != 0)
  return (nlang.unsafe.cast ?@#u8 @$t) self._rawdata

export inline slice method$ at n:size = @$t
  assert (n < self._count)
  let off = n * (sizeof t)
  let p = slice_at_byte ((nlang.unsafe.cast @$this @#this) self)#unsafe_rawdata off
  return (nlang.unsafe.cast @#u8 @$t) p

export inline slice method! copy at:size other:@this off:size count:size = void
  assert (off + count <= other.count)
  assert (at + count <= self.count)
  let bat = at * (sizeof t)
  let boff = off * (sizeof t)
  let bsz = count * (sizeof t)
  slice_memcpy self#unsafe_rawdata bat other.unsafe_rawdata boff bsz
