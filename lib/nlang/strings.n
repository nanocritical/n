from nlang import *
from nlang.vectors import vector
from nlang.sysheap import heap sysheap
import nlang.unsafe

export opaque struct string =
  export isa `copyable `show `string_buffer
  bytes:(vector u8)

export string fun from_static_string literal:static_string = s:this
  s.bytes#append_slice literal.bytes_utf8

export string met `const_string.count = size
  return self.bytes.count

export string met `const_string.all = index_range
  return self.bytes.all

export string met `const_string.get_char n:size = char
  return char.from_ascii self.bytes.[n].

export string met `const_string.substring r:index_range = @`const_string
  let sub = (heap.alloc string) @!sysheap
  such
    let mem = self.bytes.storage.[r]
    sub.bytes#append_slice mem
    -- FIXME leaking mem
  return sub

export string met `const_string.bytes_utf8 = []u8
  return self.bytes.storage.[self.bytes.all]

export string met! `string.set_char n:size c:char = void
  self.bytes![n]! = c.code.trim_u8

export string met! `string.fill c:char r:index_range = void
  let with = c.code.trim_u8
  let sb = self.bytes!storage![r]
  such
    foreach i in sb.all
      let p = sb![i]
      p! = with

export string met# `string_buffer.reserve count:size = void
  self.bytes#reserve count

export string met# `string_buffer.clear = void
  self.bytes#clear

export string met# `string_buffer.push c:char = void
  self.bytes#push c.code.trim_u8

export string met# `string_buffer.pop = char
  return char.from_ascii self.bytes#pop

export string met# `string_buffer.append other:@`const_string = void
  self#reserve self.count+other.count
  foreach i in other.all
    self#push (other.get_char i)

export string met# `string_buffer.copy at:size other:@`const_string off:size count:size = void
  self#reserve at+count
  foreach i in 0 .. count
    let left = at + i
    let right = off + i
    let c = other.get_char right
    if left < self.count
      self!set_char left c
    else
      self#push c

export string met# `copyable.copy_ctor other:@this = void
  self!bytes = other.bytes

export string met `show.show buf:@#`string_buffer = void
  buf#reserve buf.count + self.count
  foreach i in self.all
    buf#push (self.get_char i)
