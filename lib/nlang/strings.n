from nlang import *
from nlang.vectors import vector
import nlang.unsafe

export opaque struct string =
  export isa `copyable `show `string_buffer
  bytes:(vector u8)

export string fun from_static_string literal:static_string = s:this
  s.bytes#append_slice literal.bytes_utf8

export string method@ `const_string.count = size
  return self.bytes.count

export string method@ `const_string.all = index_range
  return self.bytes.all

export string method@ `const_string.get_char n:size = char
  return char.from_ascii (self.bytes.at n).

export string method@ `const_string.substring r:index_range = @`const_string
  let sub = string.new
  such
    let mem = self.bytes.storage.sub r
    sub.bytes#append_slice mem
    -- FIXME leaking mem
  return sub

export string method@ `const_string.bytes_utf8 = @(slice u8)
  return self.bytes.storage.sub self.bytes.all

export string method@! `string.set_char n:size c:char = void
  (self.bytes!at n)! = c.code.trim_u8

export string method@! `string.fill c:char r:index_range = void
  let with = c.code.trim_u8
  let sb = self.bytes!storage!sub r
  such
    for i in sb.all.iter
      let p = sb!at i
      p! = with

export string method@# `string_buffer.reserve count:size = void
  self.bytes#reserve count

export string method@# `string_buffer.clear = void
  self.bytes#clear

export string method@# `string_buffer.push c:char = void
  self.bytes#push c.code.trim_u8

export string method@# `string_buffer.pop = char
  return char.from_ascii self.bytes#pop

export string method@# `string_buffer.append other:@`const_string = void
  self#reserve self.count+other.count
  for i in other.all.iter
    self#push (other.get_char i)

export string method@# `string_buffer.copy at:size other:@`const_string off:size count:size = void
  self#reserve at+count
  for i in (range 0 count).iter
    let left = at + i
    let right = off + i
    let c = other.get_char right
    if left < self.count
      self!set_char left c
    else
      self#push c

export string method@# `copyable.copy_ctor other:@this = void
  self!bytes = other.bytes

export string method@ `show.show buf:@#`string_buffer = void
  buf#reserve buf.count + self.count
  for i in self.all.iter
    buf#push (self.get_char i)
