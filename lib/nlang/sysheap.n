from nlang import *
import nlang.unsafe

extern fun realloc p:?@#u8 oldbsz:size bsz:size = @#u8
extern fun free p:?@#u8 sz:size = void

export inline type heap = export i_allocator
  dummy:i32

export heap (method! t:i_any) alloc = @#t
  let raw = realloc null 0 (sizeof t)
  return (nlang.unsafe.cast @#u8 @#t) raw

export heap (method! t:i_any) free p:?@#t = void
  let raw = (nlang.unsafe.cast ?@#t ?@#u8) p
  return free raw (sizeof t)

export heap (method! t:i_trivial_ctor) slice_realloc s:@#(slice t) count:size = void
  let bsz = count * (sizeof t)
  if s.count == 0
    s#_rawdata = realloc null 0 bsz
    s#_count = count
  else
    let old_bsz = s.bytelen
    let raw = s#unsafe_rawdata
    s#_rawdata = realloc raw old_bsz bsz
    s#_count = count

export heap (method! t:i_trivial_ctor) slice_free s:@#(slice t) = void
  let bsz = s.bytelen
  let raw = s#unsafe_rawdata
  free raw bsz
  s#_count = 0
  s#_rawdata = null

export let sysheap = heap{{ }}
