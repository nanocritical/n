from nlang.builtins export *
from nlang.containers export *
from nlang.memory export *
from nlang.chars export *

from nlang.strings import *

fun write_buf fd:i32 s:@u8 count:size = void

export fun vpr ?sep:?@string v:@!(vararg @`show) = void
  let separator = optional_ref sep @' '
  let s = string.mk
  such
    for x in v!
      x.show @#s
      if v.left > 0
	separator.show @#s
  let b = s.bytes_utf8
  write_buf 1 b.unsafe_data b.bytecount

export fun pr ?sep:?@string ...v:(vararg @`show) = void
  vpr sep=sep @!v

export fun vsay ?sep:?@string v:@!(vararg @`show) = void
  vpr sep=sep v
  let eol = '\n':char
  write_buf 1 @eol.code.trim_u8 1

export fun say ?sep:?@string ...v:(vararg @`show) = void
  vsay sep=sep @!v

export inline (fun t:`any r:(`any_ref t)) just_const p:r = @t
  return p

export inline (fun t:`any r:(`any_mutable_ref t)) just_mutable p:r = @!t
  return p
