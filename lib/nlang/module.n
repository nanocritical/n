from nlang.builtins export *
from nlang.containers export *
from nlang.memory export *
from nlang.chars export *

from nlang.strings import *

fun write_buf fd:i32 s:@u8 count:size = void

export fun vpr v:@!(vararg @`show) ?err:?@bool ?sep:?@string = void
  let separator = optional_ref sep ' '
  let s = string.mk
  such
    for x in v!
      x.show @#s
      if v.left > 0
	separator.show @#s
  let b = s.bytes_utf8
  let fd = 1 such
    if optional err false
      fd = 2
  write_buf fd b.unsafe_data b.bytecount

export fun pr ?err:?@bool ?sep:?@string ...v:(vararg @`show) = void
  vpr @!v sep=sep

export fun vsay v:@!(vararg @`show) ?err:?@bool ?sep:?@string = void
  vpr v sep=sep
  let eol = '\n':char
  let fd = 1 such
    if optional err false
      fd = 2
  write_buf fd eol.code.trim_u8 1

export fun say ?err:?@bool ?sep:?@string ...v:(vararg @`show) = void
  vsay @!v sep=sep

export fun epr ?sep:?@string ...v:(vararg @`show) = void
  vpr @!v err=true sep=sep

export fun esay ?sep:?@string ...v:(vararg @`show) = void
  vsay @!v err=true sep=sep

export inline (fun t:`any r:(`any_ref t)) just_const p:r = @t
  return p

export inline (fun t:`any r:(`any_mutable_ref t)) just_mutable p:r = @!t
  return p
