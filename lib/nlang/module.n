from nlang.builtins export *
from nlang.containers export *
from nlang.memory export *
from nlang.chars export *

from nlang.strings import *

fun write_buf fd:I32 s:@U8 Count:Size = Void

fun Vpr v:@!(Vararg @`Show) ?err:?@Bool ?sep:?@String = Void
  let separator = Optional_ref sep ' '
  let s = {}:String
  such
    for x in v!
      x.Show @#s
      if v.Count_left > 0
	separator.Show @#s
  let b = s.Bytes_utf8
  let fd = 1 such
    if Optional err false
      fd = 2
  write_buf fd b.Unsafe_data b.Bytecount

fun Pr ?err:?@Bool ?sep:?@String ...v:(Vararg @`Show) = Void
  Vpr @!v err=err sep=sep

fun Vsay v:@!(Vararg @`Show) ?err:?@Bool ?sep:?@String = Void
  Vpr v err=err sep=sep
  let eol = '\n':Char
  let fd = 1 such
    if Optional err false
      fd = 2
  write_buf fd eol.Code.Trim_u8 1

fun Say ?err:?@Bool ?sep:?@String ...v:(Vararg @`Show) = Void
  Vsay @!v err=err sep=sep

fun Epr ?sep:?@String ...v:(Vararg @`Show) = Void
  Vpr @!v err=true sep=sep

fun Esay ?sep:?@String ...v:(Vararg @`Show) = Void
  Vsay @!v err=true sep=sep

inline (fun t:`Any r:(`Any_ref t)) Just_const p:r = @t
  return p

inline (fun t:`Any r:(`Any_mutable_ref t)) Just_mutable p:r = @!t
  return p
