from nlang.builtins import *

alias `locus = {`Has_equality `Copyable_but_owned}
alias `fwd_locus = {`Has_equality `Copyable_but_owned `Ordered}
alias `bidir_locus = {`Has_equality `Copyable_but_owned `Ordered}

intf `Random_container t:`Any =
  met Count = Size

intf `Iterator t:`Copyable =
  met Has_next = Bool
  met! Next = t

inline struct Index_bounds =
  f	:Bool
  l	:Bool
  b	:Size
  e	:Size

inline Index_bounds (met t:`Any c:(`Random_container t)) Range_of v:@c = Index_range
  if self.f and self.l
    return {b=0 e=v.Count}
  elif self.f
    return {b=0 e=self.e}
  elif self.l
    return {b=self.b e=v.Count}
  else
    return {b=0 e=v.Count}

inline struct Index_range =
  isa `Trivial_copy `Trivial_equality `Trivial_ctor `Return_by_copy
  b	:Size
  e	:Size

Index_range met Begin = Size
  return self.b

Index_range met End = Size
  return self.e

Index_range met Count = Size
  return self.e - self.b

Index_range met sub begin:Size end:Size = this
  let r:this
  such
    if begin < self.Begin or end > self.End
      Abort
    r = {b=begin e=end}
  return r

Index_range met with_offset offset:Size = this
  let r = {b=self.Begin+offset e=self.End+offset}
  return r

Index_range met Iter = Index_iterator
  return { r=self. }


opaque struct Index_iterator =
  isa (`Iterator Size) `Trivial_copy `Trivial_ctor
  r:Index_range
  p:Size

Index_iterator met `Iterator.Has_next = Bool
  return self.p < self.r.End

Index_iterator met! `Iterator.Next = Size
  let r = self.p
  self!p += 1
  return r

fun Range beg:Size end:Size = Index_range
  return {b=beg e=end}
