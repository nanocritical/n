from nlang.chars import `string_buffer `show
from nlang.memory import slice
from nlang.containers import index_range range
from nlang.unsafe import cast
from nlang import say print

export extern struct __literal_null__ =
  export isa `any_nullable_ref
export extern struct __literal_integer__ =
  export isa `integer
export extern struct __literal_floating__ =
  export isa `floating

export extern struct __internal_not_typeable__ =
export extern struct __call_function_slot__ =

export extern struct __mutable__ =
export extern struct __mercurial__ =

export intf `any =

export intf `copyable =
  method@# copy_ctor other:@final = void

export intf `copyable_but_owned =
  isa `copyable -- FIXME
export intf `trivial_copy =
  isa `copyable
export intf `trivial_copy_but_owned =
  isa `trivial_copy `copyable_but_owned
export intf `return_by_copy =
export intf `default_ctor =
  method@# ctor = void
  fun mk = r:final
  fun new = @#final

export intf `trivial_ctor =
  isa `default_ctor
export intf `trivial_dtor =
export intf `matchable =
export intf `has_equality =
  isa `matchable
  method@ operator_eq other:@final = bool
  method@ operator_ne other:@final = bool
export intf `trivial_equality =
  isa `has_equality
export intf `has_compare =
  method@ operator_compare other:@final = i32
export intf `ordered =
  isa `has_equality
  method@ operator_le other:@final = bool
  method@ operator_lt other:@final = bool
  method@ operator_gt other:@final = bool
  method@ operator_ge other:@final = bool
export intf `trivial_order =
  isa `ordered
export intf `ordered_by_compare =
  isa `has_compare `ordered `has_equality
export intf `arithmetic =
  method@ operator_plus other:@final = final
  method@ operator_minus other:@final = final
  method@ operator_divide other:@final = final
  method@ operator_modulo other:@final = final
  method@ operator_times other:@final = final
  method@ operator_uminus = final
  method@! operator_assign_plus other:@final = void
  method@! operator_assign_minus other:@final = void
  method@! operator_assign_divide other:@final = void
  method@! operator_assign_modulo other:@final = void
  method@! operator_assign_times other:@final = void
export intf `bitwise =
  method@ operator_bwor other:@final = final
  method@ operator_bwxor other:@final = final
  method@ operator_bwand other:@final = final
  method@ operator_lshift by:u32 = final
  method@ operator_rshift by:u32 = final
  method@ operator_bwnot = final
  method@! operator_assign_bwor other:@final = void
  method@! operator_assign_bwxor other:@final = void
  method@! operator_assign_bwand other:@final = void
  method@! operator_assign_lshift by:u32 = void
  method@! operator_assign_rshift by:u32 = void


export intf `sum_copy =
  isa `copyable
export intf `sum_equality =
  isa `has_equality
export intf `sum_order =
  isa `ordered


export extern struct void =
  export isa `return_by_copy

export extern intf `__ref_compatible r:`any_any_ref =

export intf `any_any_ref =
  isa `return_by_copy `trivial_copy `trivial_equality
export intf `any_ref t:`any =
  isa `any_any_ref
export intf `any_mutable_ref t:`any =
  isa (`any_ref t)
export intf `any_nullable_ref t:`any =
  isa `any_any_ref
export intf `any_nullable_mutable_ref t:`any =
  isa (`any_nullable_ref t)

export extern struct ref t:`any =
  export isa (`any_ref t)
export extern struct mutable_ref t:`any =
  export isa (`any_mutable_ref t)
export extern struct mercurial_ref t:`any =
  export isa (`any_mutable_ref t)

-- FIXME: to replace with semantic constraint
export extern struct nullable_ref t:`any =
  export isa (`any_nullable_ref t)
export extern struct nullable_mutable_ref t:`any =
  export isa (`any_nullable_mutable_ref t)
export extern struct nullable_mercurial_ref t:`any =
  export isa (`any_nullable_mutable_ref t)


export intf `any_tuple =
  isa `copyable

export inline struct tuple_2 t0:`copyable t1:`copyable =
  export isa `any_tuple
  x0	:t0
  x1	:t1

export inline struct tuple_3 t0:`copyable t1:`copyable t2:`copyable =
  export isa `any_tuple
  x0	:t0
  x1	:t1
  x2	:t2

export inline struct tuple_4 t0:`copyable t1:`copyable t2:`copyable t3:`copyable =
  export isa `any_tuple
  x0	:t0
  x1	:t1
  x2	:t2
  x3	:t3

export inline struct tuple_5 t0:`copyable t1:`copyable t2:`copyable t3:`copyable t4:`copyable =
  export isa `any_tuple
  x0	:t0
  x1	:t1
  x2	:t2
  x3	:t3
  x4	:t4

export inline struct tuple_6 t0:`copyable t1:`copyable t2:`copyable t3:`copyable t4:`copyable t5:`copyable =
  export isa `any_tuple
  x0	:t0
  x1	:t1
  x2	:t2
  x3	:t3
  x4	:t4
  x5	:t5

export inline struct tuple_7 t0:`copyable t1:`copyable t2:`copyable t3:`copyable t4:`copyable t5:`copyable t6:`copyable =
  export isa `any_tuple
  x0	:t0
  x1	:t1
  x2	:t2
  x3	:t3
  x4	:t4
  x5	:t5
  x6	:t6

export inline struct tuple_8 t0:`copyable t1:`copyable t2:`copyable t3:`copyable t4:`copyable t5:`copyable t6:`copyable t7:`copyable =
  export isa `any_tuple
  x0	:t0
  x1	:t1
  x2	:t2
  x3	:t3
  x4	:t4
  x5	:t5
  x6	:t6
  x7	:t7

export inline struct tuple_9 t0:`copyable t1:`copyable t2:`copyable t3:`copyable t4:`copyable t5:`copyable t6:`copyable t7:`copyable t8:`copyable =
  export isa `any_tuple
  x0	:t0
  x1	:t1
  x2	:t2
  x3	:t3
  x4	:t4
  x5	:t5
  x6	:t6
  x7	:t7
  x8	:t8

export inline struct tuple_10 t0:`copyable t1:`copyable t2:`copyable t3:`copyable t4:`copyable t5:`copyable t6:`copyable t7:`copyable t8:`copyable t9:`copyable =
  export isa `any_tuple
  x0	:t0
  x1	:t1
  x2	:t2
  x3	:t3
  x4	:t4
  x5	:t5
  x6	:t6
  x7	:t7
  x8	:t8
  x9	:t9

export inline struct tuple_11 t0:`copyable t1:`copyable t2:`copyable t3:`copyable t4:`copyable t5:`copyable t6:`copyable t7:`copyable t8:`copyable t9:`copyable t10:`copyable =
  export isa `any_tuple
  x0	:t0
  x1	:t1
  x2	:t2
  x3	:t3
  x4	:t4
  x5	:t5
  x6	:t6
  x7	:t7
  x8	:t8
  x9	:t9
  x10	:t10

export inline struct tuple_12 t0:`copyable t1:`copyable t2:`copyable t3:`copyable t4:`copyable t5:`copyable t6:`copyable t7:`copyable t8:`copyable t9:`copyable t10:`copyable t11:`copyable =
  export isa `any_tuple
  x0	:t0
  x1	:t1
  x2	:t2
  x3	:t3
  x4	:t4
  x5	:t5
  x6	:t6
  x7	:t7
  x8	:t8
  x9	:t9
  x10	:t10
  x11	:t11

export inline struct tuple_13 t0:`copyable t1:`copyable t2:`copyable t3:`copyable t4:`copyable t5:`copyable t6:`copyable t7:`copyable t8:`copyable t9:`copyable t10:`copyable t11:`copyable t12:`copyable =
  export isa `any_tuple
  x0	:t0
  x1	:t1
  x2	:t2
  x3	:t3
  x4	:t4
  x5	:t5
  x6	:t6
  x7	:t7
  x8	:t8
  x9	:t9
  x10	:t10
  x11	:t11
  x12	:t12

export inline struct tuple_14 t0:`copyable t1:`copyable t2:`copyable t3:`copyable t4:`copyable t5:`copyable t6:`copyable t7:`copyable t8:`copyable t9:`copyable t10:`copyable t11:`copyable t12:`copyable t13:`copyable =
  export isa `any_tuple
  x0	:t0
  x1	:t1
  x2	:t2
  x3	:t3
  x4	:t4
  x5	:t5
  x6	:t6
  x7	:t7
  x8	:t8
  x9	:t9
  x10	:t10
  x11	:t11
  x12	:t12
  x13	:t13

export inline struct tuple_15 t0:`copyable t1:`copyable t2:`copyable t3:`copyable t4:`copyable t5:`copyable t6:`copyable t7:`copyable t8:`copyable t9:`copyable t10:`copyable t11:`copyable t12:`copyable t13:`copyable t14:`copyable =
  export isa `any_tuple
  x0	:t0
  x1	:t1
  x2	:t2
  x3	:t3
  x4	:t4
  x5	:t5
  x6	:t6
  x7	:t7
  x8	:t8
  x9	:t9
  x10	:t10
  x11	:t11
  x12	:t12
  x13	:t13
  x14	:t14

export inline struct tuple_16 t0:`copyable t1:`copyable t2:`copyable t3:`copyable t4:`copyable t5:`copyable t6:`copyable t7:`copyable t8:`copyable t9:`copyable t10:`copyable t11:`copyable t12:`copyable t13:`copyable t14:`copyable t15:`copyable =
  export isa `any_tuple
  x0	:t0
  x1	:t1
  x2	:t2
  x3	:t3
  x4	:t4
  x5	:t5
  x6	:t6
  x7	:t7
  x8	:t8
  x9	:t9
  x10	:t10
  x11	:t11
  x12	:t12
  x13	:t13
  x14	:t14
  x15	:t15

export intf `numeric =
  isa `copyable `arithmetic `ordered

export intf `integer =
  isa `numeric `bitwise `has_compare
  alias this_signed = `signed_integer
  alias this_unsigned = `unsigned_integer
  method@ reinterpret_signed = final.this_signed
  method@ reinterpret_unsigned = final.this_unsigned

export intf `signed_integer =
  isa `integer

export intf `unsigned_integer =
  isa `integer

export intf `native_integer =
  isa `trivial_ctor `trivial_copy `return_by_copy `integer `show

export intf `native_signed_integer =
  isa `signed_integer `native_integer

export intf `native_unsigned_integer =
  isa `unsigned_integer `native_integer

export intf `native_anysign_integer =
  isa `native_signed_integer `native_unsigned_integer

export intf `generalized_boolean =
  isa `ordered
  method@ operator_test = bool

export intf `bool_compatible =
  fun from_bool b:bool = final

export intf `native_boolean =
  isa `trivial_ctor `trivial_copy `return_by_copy `generalized_boolean `bool_compatible `show

export intf `floating =
  isa `numeric `has_compare

export intf `native_floating =
  isa `trivial_ctor `trivial_copy `return_by_copy `floating `show

export extern struct bool =
  export isa `native_boolean
export extern bool method@# `copyable.copy_ctor other:@this = void
export extern bool method@ `has_equality.operator_eq other:@this = bool
export extern bool method@ `has_equality.operator_ne other:@this = bool
export extern bool method@ `has_compare.operator_compare other:@this = i32
export extern bool method@ `ordered.operator_le other:@this = bool
export extern bool method@ `ordered.operator_lt other:@this = bool
export extern bool method@ `ordered.operator_gt other:@this = bool
export extern bool method@ `ordered.operator_ge other:@this = bool
export bool fun from_bool b:bool = this
  return b
export extern bool method@ operator_or other:@this = this
export extern bool method@ operator_and other:@this = this
export extern bool method@ operator_not = this
export extern bool method@ `generalized_boolean.operator_test = bool
export extern bool method@ to_u8 = u8
export extern bool method@ to_u16 = u16
export extern bool method@ to_u32 = u32
export extern bool method@ to_u64 = u64
export extern bool method@ `show.show buf:@#`string_buffer = void

export extern struct i8 =
  export isa `native_signed_integer
  alias this_signed = this
  alias this_unsigned = u8
export extern i8 method@# `copyable.copy_ctor other:@this = void
export extern i8 method@ `has_equality.operator_eq other:@this = bool
export extern i8 method@ `has_equality.operator_ne other:@this = bool
export extern i8 method@ `has_compare.operator_compare other:@this = i32
export extern i8 method@ `ordered.operator_le other:@this = bool
export extern i8 method@ `ordered.operator_lt other:@this = bool
export extern i8 method@ `ordered.operator_gt other:@this = bool
export extern i8 method@ `ordered.operator_ge other:@this = bool
export extern i8 method@ `arithmetic.operator_plus other:@this = this
export extern i8 method@ `arithmetic.operator_minus other:@this = this
export extern i8 method@ `arithmetic.operator_divide other:@this = this
export extern i8 method@ `arithmetic.operator_modulo other:@this = this
export extern i8 method@ `arithmetic.operator_times other:@this = this
export extern i8 method@ `arithmetic.operator_uminus = this
export extern i8 method@! `arithmetic.operator_assign_plus other:@this = void
export extern i8 method@! `arithmetic.operator_assign_minus other:@this = void
export extern i8 method@! `arithmetic.operator_assign_divide other:@this = void
export extern i8 method@! `arithmetic.operator_assign_modulo other:@this = void
export extern i8 method@! `arithmetic.operator_assign_times other:@this = void
export extern i8 method@ `bitwise.operator_bwor other:@this = this
export extern i8 method@ `bitwise.operator_bwxor other:@this = this
export extern i8 method@ `bitwise.operator_bwand other:@this = this
export extern i8 method@ `bitwise.operator_lshift by:u32 = this
export extern i8 method@ `bitwise.operator_rshift by:u32 = this
export extern i8 method@ `bitwise.operator_bwnot = this
export extern i8 method@! `bitwise.operator_assign_bwor other:@this = void
export extern i8 method@! `bitwise.operator_assign_bwxor other:@this = void
export extern i8 method@! `bitwise.operator_assign_bwand other:@this = void
export extern i8 method@! `bitwise.operator_assign_lshift by:u32 = void
export extern i8 method@! `bitwise.operator_assign_rshift by:u32 = void
export extern inline i8 method@ reinterpret_unsigned = u8
export extern inline i8 method@ reinterpret_signed = this
export extern inline i8 method@ to_i16 = i16
export extern inline i8 method@ to_i32 = i32
export extern inline i8 method@ to_i64 = i64
export extern inline i8 method@ `integer.as_ssize = ssize
export extern i8 method@ `show.show buf:@#`string_buffer = void

export extern struct i16 =
  export isa `native_signed_integer
  alias this_signed = this
  alias this_unsigned = u16
export extern i16 method@# `copyable.copy_ctor other:@this = void
export extern i16 method@ `has_equality.operator_eq other:@this = bool
export extern i16 method@ `has_equality.operator_ne other:@this = bool
export extern i16 method@ `has_compare.operator_compare other:@this = i32
export extern i16 method@ `ordered.operator_le other:@this = bool
export extern i16 method@ `ordered.operator_lt other:@this = bool
export extern i16 method@ `ordered.operator_gt other:@this = bool
export extern i16 method@ `ordered.operator_ge other:@this = bool
export extern i16 method@ `arithmetic.operator_plus other:@this = this
export extern i16 method@ `arithmetic.operator_minus other:@this = this
export extern i16 method@ `arithmetic.operator_divide other:@this = this
export extern i16 method@ `arithmetic.operator_modulo other:@this = this
export extern i16 method@ `arithmetic.operator_times other:@this = this
export extern i16 method@ `arithmetic.operator_uminus = this
export extern i16 method@! `arithmetic.operator_assign_plus other:@this = void
export extern i16 method@! `arithmetic.operator_assign_minus other:@this = void
export extern i16 method@! `arithmetic.operator_assign_divide other:@this = void
export extern i16 method@! `arithmetic.operator_assign_modulo other:@this = void
export extern i16 method@! `arithmetic.operator_assign_times other:@this = void
export extern i16 method@ `bitwise.operator_bwor other:@this = this
export extern i16 method@ `bitwise.operator_bwxor other:@this = this
export extern i16 method@ `bitwise.operator_bwand other:@this = this
export extern i16 method@ `bitwise.operator_lshift by:u32 = this
export extern i16 method@ `bitwise.operator_rshift by:u32 = this
export extern i16 method@ `bitwise.operator_bwnot = this
export extern i16 method@! `bitwise.operator_assign_bwor other:@this = void
export extern i16 method@! `bitwise.operator_assign_bwxor other:@this = void
export extern i16 method@! `bitwise.operator_assign_bwand other:@this = void
export extern i16 method@! `bitwise.operator_assign_lshift by:u32 = void
export extern i16 method@! `bitwise.operator_assign_rshift by:u32 = void
export extern inline i16 method@ reinterpret_unsigned = u16
export extern inline i16 method@ reinterpret_signed = this
export extern inline i16 method@ trim_i8 = i8
export extern inline i16 method@ to_i32 = i32
export extern inline i16 method@ to_i64 = i64
export extern inline i16 method@ `integer.as_ssize = ssize
export extern i16 method@ `show.show buf:@#`string_buffer = void

export extern struct i32 =
  export isa `native_signed_integer
  alias this_signed = this
  alias this_unsigned = u32
export extern i32 method@# `copyable.copy_ctor other:@this = void
export extern i32 method@ `has_equality.operator_eq other:@this = bool
export extern i32 method@ `has_equality.operator_ne other:@this = bool
export extern i32 method@ `has_compare.operator_compare other:@this = i32
export extern i32 method@ `ordered.operator_le other:@this = bool
export extern i32 method@ `ordered.operator_lt other:@this = bool
export extern i32 method@ `ordered.operator_gt other:@this = bool
export extern i32 method@ `ordered.operator_ge other:@this = bool
export extern i32 method@ `arithmetic.operator_plus other:@this = this
export extern i32 method@ `arithmetic.operator_minus other:@this = this
export extern i32 method@ `arithmetic.operator_divide other:@this = this
export extern i32 method@ `arithmetic.operator_modulo other:@this = this
export extern i32 method@ `arithmetic.operator_times other:@this = this
export extern i32 method@ `arithmetic.operator_uminus = this
export extern i32 method@! `arithmetic.operator_assign_plus other:@this = void
export extern i32 method@! `arithmetic.operator_assign_minus other:@this = void
export extern i32 method@! `arithmetic.operator_assign_divide other:@this = void
export extern i32 method@! `arithmetic.operator_assign_modulo other:@this = void
export extern i32 method@! `arithmetic.operator_assign_times other:@this = void
export extern i32 method@ `bitwise.operator_bwor other:@this = this
export extern i32 method@ `bitwise.operator_bwxor other:@this = this
export extern i32 method@ `bitwise.operator_bwand other:@this = this
export extern i32 method@ `bitwise.operator_lshift by:u32 = this
export extern i32 method@ `bitwise.operator_rshift by:u32 = this
export extern i32 method@ `bitwise.operator_bwnot = this
export extern i32 method@! `bitwise.operator_assign_bwor other:@this = void
export extern i32 method@! `bitwise.operator_assign_bwxor other:@this = void
export extern i32 method@! `bitwise.operator_assign_bwand other:@this = void
export extern i32 method@! `bitwise.operator_assign_lshift by:u32 = void
export extern i32 method@! `bitwise.operator_assign_rshift by:u32 = void
export extern inline i32 method@ reinterpret_unsigned = u32
export extern inline i32 method@ reinterpret_signed = this
export extern inline i32 method@ trim_i8 = i8
export extern inline i32 method@ trim_i16 = i16
export extern inline i32 method@ to_i64 = i64
export extern inline i32 method@ `integer.as_ssize = ssize
export extern inline i32 method@ trim_float = float
export extern inline i32 method@ to_double = double
export extern i32 method@ `show.show buf:@#`string_buffer = void

export extern struct i64 =
  export isa `native_signed_integer
  alias this_signed = this
  alias this_unsigned = u64
export extern i64 method@# `copyable.copy_ctor other:@this = void
export extern i64 method@ `has_equality.operator_eq other:@this = bool
export extern i64 method@ `has_equality.operator_ne other:@this = bool
export extern i64 method@ `has_compare.operator_compare other:@this = i32
export extern i64 method@ `ordered.operator_le other:@this = bool
export extern i64 method@ `ordered.operator_lt other:@this = bool
export extern i64 method@ `ordered.operator_gt other:@this = bool
export extern i64 method@ `ordered.operator_ge other:@this = bool
export extern i64 method@ `arithmetic.operator_plus other:@this = this
export extern i64 method@ `arithmetic.operator_minus other:@this = this
export extern i64 method@ `arithmetic.operator_divide other:@this = this
export extern i64 method@ `arithmetic.operator_modulo other:@this = this
export extern i64 method@ `arithmetic.operator_times other:@this = this
export extern i64 method@ `arithmetic.operator_uminus = this
export extern i64 method@! `arithmetic.operator_assign_plus other:@this = void
export extern i64 method@! `arithmetic.operator_assign_minus other:@this = void
export extern i64 method@! `arithmetic.operator_assign_divide other:@this = void
export extern i64 method@! `arithmetic.operator_assign_modulo other:@this = void
export extern i64 method@! `arithmetic.operator_assign_times other:@this = void
export extern i64 method@ `bitwise.operator_bwor other:@this = this
export extern i64 method@ `bitwise.operator_bwxor other:@this = this
export extern i64 method@ `bitwise.operator_bwand other:@this = this
export extern i64 method@ `bitwise.operator_lshift by:u32 = this
export extern i64 method@ `bitwise.operator_rshift by:u32 = this
export extern i64 method@ `bitwise.operator_bwnot = this
export extern i64 method@! `bitwise.operator_assign_bwor other:@this = void
export extern i64 method@! `bitwise.operator_assign_bwxor other:@this = void
export extern i64 method@! `bitwise.operator_assign_bwand other:@this = void
export extern i64 method@! `bitwise.operator_assign_lshift by:u32 = void
export extern i64 method@! `bitwise.operator_assign_rshift by:u32 = void
export extern inline i64 method@ reinterpret_unsigned = u64
export extern inline i64 method@ reinterpret_signed = this
export extern inline i64 method@ trim_i8 = i8
export extern inline i64 method@ trim_i16 = i16
export extern inline i64 method@ trim_i32 = i32
export extern inline i64 method@ `integer.as_ssize = ssize
export extern inline i64 method@ trim_float = float
export extern inline i64 method@ trim_double = double
export extern i64 method@ `show.show buf:@#`string_buffer = void

export extern struct u8 =
  export isa `native_unsigned_integer
  alias this_unsigned = this
  alias this_signed = i8
export extern u8 method@# `copyable.copy_ctor other:@this = void
export extern u8 method@ `has_equality.operator_eq other:@this = bool
export extern u8 method@ `has_equality.operator_ne other:@this = bool
export extern u8 method@ `has_compare.operator_compare other:@this = i32
export extern u8 method@ `ordered.operator_le other:@this = bool
export extern u8 method@ `ordered.operator_lt other:@this = bool
export extern u8 method@ `ordered.operator_gt other:@this = bool
export extern u8 method@ `ordered.operator_ge other:@this = bool
export extern u8 method@ `arithmetic.operator_plus other:@this = this
export extern u8 method@ `arithmetic.operator_minus other:@this = this
export extern u8 method@ `arithmetic.operator_divide other:@this = this
export extern u8 method@ `arithmetic.operator_modulo other:@this = this
export extern u8 method@ `arithmetic.operator_times other:@this = this
export extern u8 method@ `arithmetic.operator_uminus = this
export extern u8 method@ `bitwise.operator_bwor other:@this = this
export extern u8 method@ `bitwise.operator_bwxor other:@this = this
export extern u8 method@ `bitwise.operator_bwand other:@this = this
export extern u8 method@ `bitwise.operator_lshift by:u32 = this
export extern u8 method@ `bitwise.operator_rshift by:u32 = this
export extern u8 method@ `bitwise.operator_bwnot = this
export extern u8 method@! `arithmetic.operator_assign_plus other:@this = void
export extern u8 method@! `arithmetic.operator_assign_minus other:@this = void
export extern u8 method@! `arithmetic.operator_assign_divide other:@this = void
export extern u8 method@! `arithmetic.operator_assign_modulo other:@this = void
export extern u8 method@! `arithmetic.operator_assign_times other:@this = void
export extern u8 method@! `bitwise.operator_assign_bwor other:@this = void
export extern u8 method@! `bitwise.operator_assign_bwxor other:@this = void
export extern u8 method@! `bitwise.operator_assign_bwand other:@this = void
export extern u8 method@! `bitwise.operator_assign_lshift by:u32 = void
export extern u8 method@! `bitwise.operator_assign_rshift by:u32 = void
export extern inline u8 method@ reinterpret_unsigned = this
export extern inline u8 method@ reinterpret_signed = i8
export extern inline u8 method@ to_u16 = u16
export extern inline u8 method@ to_u32 = u32
export extern inline u8 method@ to_u64 = u64
export extern inline u8 method@ `integer.as_size = size
export extern inline u8 method@ to_float = float
export extern inline u8 method@ to_double = double
export extern u8 method@ `show.show buf:@#`string_buffer = void

export extern struct u16 =
  export isa `native_unsigned_integer
  alias this_unsigned = this
  alias this_signed = i16
export extern u16 method@# `copyable.copy_ctor other:@this = void
export extern u16 method@ `has_equality.operator_eq other:@this = bool
export extern u16 method@ `has_equality.operator_ne other:@this = bool
export extern u16 method@ `has_compare.operator_compare other:@this = i32
export extern u16 method@ `ordered.operator_le other:@this = bool
export extern u16 method@ `ordered.operator_lt other:@this = bool
export extern u16 method@ `ordered.operator_gt other:@this = bool
export extern u16 method@ `ordered.operator_ge other:@this = bool
export extern u16 method@ `arithmetic.operator_plus other:@this = this
export extern u16 method@ `arithmetic.operator_minus other:@this = this
export extern u16 method@ `arithmetic.operator_divide other:@this = this
export extern u16 method@ `arithmetic.operator_modulo other:@this = this
export extern u16 method@ `arithmetic.operator_times other:@this = this
export extern u16 method@ `arithmetic.operator_uminus = this
export extern u16 method@! `arithmetic.operator_assign_plus other:@this = void
export extern u16 method@! `arithmetic.operator_assign_minus other:@this = void
export extern u16 method@! `arithmetic.operator_assign_divide other:@this = void
export extern u16 method@! `arithmetic.operator_assign_modulo other:@this = void
export extern u16 method@! `arithmetic.operator_assign_times other:@this = void
export extern u16 method@ `bitwise.operator_bwor other:@this = this
export extern u16 method@ `bitwise.operator_bwxor other:@this = this
export extern u16 method@ `bitwise.operator_bwand other:@this = this
export extern u16 method@ `bitwise.operator_lshift by:u32 = this
export extern u16 method@ `bitwise.operator_rshift by:u32 = this
export extern u16 method@ `bitwise.operator_bwnot = this
export extern u16 method@! `bitwise.operator_assign_bwor other:@this = void
export extern u16 method@! `bitwise.operator_assign_bwxor other:@this = void
export extern u16 method@! `bitwise.operator_assign_bwand other:@this = void
export extern u16 method@! `bitwise.operator_assign_lshift by:u32 = void
export extern u16 method@! `bitwise.operator_assign_rshift by:u32 = void
export extern inline u16 method@ reinterpret_unsigned = this
export extern inline u16 method@ reinterpret_signed = i16
export extern inline u16 method@ trim_u8 = u8
export extern inline u16 method@ to_u32 = u32
export extern inline u16 method@ to_u64 = u64
export extern inline u16 method@ `integer.as_size = size
export extern inline u16 method@ to_float = float
export extern inline u16 method@ to_double = double
export extern u16 method@ `show.show buf:@#`string_buffer = void

export extern struct u32 =
  export isa `native_unsigned_integer
  alias this_unsigned = this
  alias this_signed = i32
export extern u32 method@# `copyable.copy_ctor other:@this = void
export extern u32 method@ `has_equality.operator_eq other:@this = bool
export extern u32 method@ `has_equality.operator_ne other:@this = bool
export extern u32 method@ `has_compare.operator_compare other:@this = i32
export extern u32 method@ `ordered.operator_le other:@this = bool
export extern u32 method@ `ordered.operator_lt other:@this = bool
export extern u32 method@ `ordered.operator_gt other:@this = bool
export extern u32 method@ `ordered.operator_ge other:@this = bool
export extern u32 method@ `arithmetic.operator_plus other:@this = this
export extern u32 method@ `arithmetic.operator_minus other:@this = this
export extern u32 method@ `arithmetic.operator_divide other:@this = this
export extern u32 method@ `arithmetic.operator_modulo other:@this = this
export extern u32 method@ `arithmetic.operator_times other:@this = this
export extern u32 method@ `arithmetic.operator_uminus = this
export extern u32 method@! `arithmetic.operator_assign_plus other:@this = void
export extern u32 method@! `arithmetic.operator_assign_minus other:@this = void
export extern u32 method@! `arithmetic.operator_assign_divide other:@this = void
export extern u32 method@! `arithmetic.operator_assign_modulo other:@this = void
export extern u32 method@! `arithmetic.operator_assign_times other:@this = void
export extern u32 method@ `bitwise.operator_bwor other:@this = this
export extern u32 method@ `bitwise.operator_bwxor other:@this = this
export extern u32 method@ `bitwise.operator_bwand other:@this = this
export extern u32 method@ `bitwise.operator_lshift by:u32 = this
export extern u32 method@ `bitwise.operator_rshift by:u32 = this
export extern u32 method@ `bitwise.operator_bwnot = this
export extern u32 method@! `bitwise.operator_assign_bwor other:@this = void
export extern u32 method@! `bitwise.operator_assign_bwxor other:@this = void
export extern u32 method@! `bitwise.operator_assign_bwand other:@this = void
export extern u32 method@! `bitwise.operator_assign_lshift by:u32 = void
export extern u32 method@! `bitwise.operator_assign_rshift by:u32 = void
export extern inline u32 method@ reinterpret_unsigned = this
export extern inline u32 method@ reinterpret_signed = i32
export extern inline u32 method@ trim_u8 = u8
export extern inline u32 method@ trim_u16 = u16
export extern inline u32 method@ to_u64 = u64
export extern inline u32 method@ `integer.as_size = size
export extern inline u32 method@ trim_float = float
export extern inline u32 method@ to_double = double
export extern u32 method@ `show.show buf:@#`string_buffer = void

export extern struct u64 =
  export isa `native_unsigned_integer
  alias this_unsigned = this
  alias this_signed = i64
export extern u64 method@# `copyable.copy_ctor other:@this = void
export extern u64 method@ `has_equality.operator_eq other:@this = bool
export extern u64 method@ `has_equality.operator_ne other:@this = bool
export extern u64 method@ `has_compare.operator_compare other:@this = i32
export extern u64 method@ `ordered.operator_le other:@this = bool
export extern u64 method@ `ordered.operator_lt other:@this = bool
export extern u64 method@ `ordered.operator_gt other:@this = bool
export extern u64 method@ `ordered.operator_ge other:@this = bool
export extern u64 method@ `arithmetic.operator_plus other:@this = this
export extern u64 method@ `arithmetic.operator_minus other:@this = this
export extern u64 method@ `arithmetic.operator_divide other:@this = this
export extern u64 method@ `arithmetic.operator_modulo other:@this = this
export extern u64 method@ `arithmetic.operator_times other:@this = this
export extern u64 method@ `arithmetic.operator_uminus = this
export extern u64 method@! `arithmetic.operator_assign_plus other:@this = void
export extern u64 method@! `arithmetic.operator_assign_minus other:@this = void
export extern u64 method@! `arithmetic.operator_assign_divide other:@this = void
export extern u64 method@! `arithmetic.operator_assign_modulo other:@this = void
export extern u64 method@! `arithmetic.operator_assign_times other:@this = void
export extern u64 method@ `bitwise.operator_bwor other:@this = this
export extern u64 method@ `bitwise.operator_bwxor other:@this = this
export extern u64 method@ `bitwise.operator_bwand other:@this = this
export extern u64 method@ `bitwise.operator_lshift by:u32 = this
export extern u64 method@ `bitwise.operator_rshift by:u32 = this
export extern u64 method@ `bitwise.operator_bwnot = this
export extern u64 method@! `bitwise.operator_assign_bwor other:@this = void
export extern u64 method@! `bitwise.operator_assign_bwxor other:@this = void
export extern u64 method@! `bitwise.operator_assign_bwand other:@this = void
export extern u64 method@! `bitwise.operator_assign_lshift by:u32 = void
export extern u64 method@! `bitwise.operator_assign_rshift by:u32 = void
export extern inline u64 method@ reinterpret_unsigned = this
export extern inline u64 method@ reinterpret_signed = i64
export extern inline u64 method@ trim_u8 = u8
export extern inline u64 method@ trim_u16 = u16
export extern inline u64 method@ trim_u32 = u32
export extern inline u64 method@ `integer.as_size = size
export extern inline u64 method@ trim_float = float
export extern inline u64 method@ trim_double = double
export extern u64 method@ `show.show buf:@#`string_buffer = void

export extern struct ssize =
  export isa `native_signed_integer
  alias this_signed = this
  alias this_unsigned = size
export extern ssize method@# `copyable.copy_ctor other:@this = void
export extern ssize method@ `has_equality.operator_eq other:@this = bool
export extern ssize method@ `has_equality.operator_ne other:@this = bool
export extern ssize method@ `has_compare.operator_compare other:@this = i32
export extern ssize method@ `ordered.operator_le other:@this = bool
export extern ssize method@ `ordered.operator_lt other:@this = bool
export extern ssize method@ `ordered.operator_gt other:@this = bool
export extern ssize method@ `ordered.operator_ge other:@this = bool
export extern ssize method@ `arithmetic.operator_plus other:@this = this
export extern ssize method@ `arithmetic.operator_minus other:@this = this
export extern ssize method@ `arithmetic.operator_divide other:@this = this
export extern ssize method@ `arithmetic.operator_modulo other:@this = this
export extern ssize method@ `arithmetic.operator_times other:@this = this
export extern ssize method@ `arithmetic.operator_uminus = this
export extern ssize method@! `arithmetic.operator_assign_plus other:@this = void
export extern ssize method@! `arithmetic.operator_assign_minus other:@this = void
export extern ssize method@! `arithmetic.operator_assign_divide other:@this = void
export extern ssize method@! `arithmetic.operator_assign_modulo other:@this = void
export extern ssize method@! `arithmetic.operator_assign_times other:@this = void
export extern ssize method@ `bitwise.operator_bwor other:@this = this
export extern ssize method@ `bitwise.operator_bwxor other:@this = this
export extern ssize method@ `bitwise.operator_bwand other:@this = this
export extern ssize method@ `bitwise.operator_lshift by:u32 = this
export extern ssize method@ `bitwise.operator_rshift by:u32 = this
export extern ssize method@ `bitwise.operator_bwnot = this
export extern ssize method@! `bitwise.operator_assign_bwor other:@this = void
export extern ssize method@! `bitwise.operator_assign_bwxor other:@this = void
export extern ssize method@! `bitwise.operator_assign_bwand other:@this = void
export extern ssize method@! `bitwise.operator_assign_lshift by:u32 = void
export extern ssize method@! `bitwise.operator_assign_rshift by:u32 = void
export extern inline ssize method@ reinterpret_unsigned = size
export extern inline ssize method@ reinterpret_signed = this
export extern inline ssize method@ trim_i8 = i8
export extern inline ssize method@ trim_i16 = i16
export extern inline ssize method@ trim_i32 = i32
export extern inline ssize method@ trim_i64 = i64
export extern inline ssize method@ trim_float = float
export extern inline ssize method@ trim_double = double
export extern ssize method@ `show.show buf:@#`string_buffer = void

-- FIXME: size and ssize do not have a well-defined bit size, they therefore
-- should not be `bitwise.
export extern struct size =
  export isa `native_unsigned_integer
  alias this_unsigned = this
  alias this_signed = ssize
export extern size method@# `copyable.copy_ctor other:@this = void
export extern size method@ `has_equality.operator_eq other:@this = bool
export extern size method@ `has_equality.operator_ne other:@this = bool
export extern size method@ `has_compare.operator_compare other:@this = i32
export extern size method@ `ordered.operator_le other:@this = bool
export extern size method@ `ordered.operator_lt other:@this = bool
export extern size method@ `ordered.operator_gt other:@this = bool
export extern size method@ `ordered.operator_ge other:@this = bool
export extern size method@ `arithmetic.operator_plus other:@this = this
export extern size method@ `arithmetic.operator_minus other:@this = this
export extern size method@ `arithmetic.operator_divide other:@this = this
export extern size method@ `arithmetic.operator_modulo other:@this = this
export extern size method@ `arithmetic.operator_times other:@this = this
export extern size method@ `arithmetic.operator_uminus = this
export extern size method@! `arithmetic.operator_assign_plus other:@this = void
export extern size method@! `arithmetic.operator_assign_minus other:@this = void
export extern size method@! `arithmetic.operator_assign_divide other:@this = void
export extern size method@! `arithmetic.operator_assign_modulo other:@this = void
export extern size method@! `arithmetic.operator_assign_times other:@this = void
export extern size method@ `bitwise.operator_bwor other:@this = this
export extern size method@ `bitwise.operator_bwxor other:@this = this
export extern size method@ `bitwise.operator_bwand other:@this = this
export extern size method@ `bitwise.operator_lshift by:u32 = this
export extern size method@ `bitwise.operator_rshift by:u32 = this
export extern size method@ `bitwise.operator_bwnot = this
export extern size method@! `bitwise.operator_assign_bwor other:@this = void
export extern size method@! `bitwise.operator_assign_bwxor other:@this = void
export extern size method@! `bitwise.operator_assign_bwand other:@this = void
export extern size method@! `bitwise.operator_assign_lshift by:u32 = void
export extern size method@! `bitwise.operator_assign_rshift by:u32 = void
export extern inline size method@ reinterpret_unsigned = this
export extern inline size method@ reinterpret_signed = ssize
export extern inline size method@ trim_u8 = u8
export extern inline size method@ trim_u16 = u16
export extern inline size method@ trim_u32 = u32
export extern inline size method@ trim_u64 = u64
export extern inline size method@ trim_float = float
export extern inline size method@ trim_double = double
export extern size method@ `show.show buf:@#`string_buffer = void

export extern struct float =
  export isa `native_floating
export extern float method@# `copyable.copy_ctor other:@this = void
export extern float method@ `has_equality.operator_eq other:@this = bool
export extern float method@ `has_equality.operator_ne other:@this = bool
export extern float method@ `has_compare.operator_compare other:@this = i32
export extern float method@ `ordered.operator_le other:@this = bool
export extern float method@ `ordered.operator_lt other:@this = bool
export extern float method@ `ordered.operator_gt other:@this = bool
export extern float method@ `ordered.operator_ge other:@this = bool
export extern float method@ `arithmetic.operator_plus other:@this = this
export extern float method@ `arithmetic.operator_minus other:@this = this
export extern float method@ `arithmetic.operator_divide other:@this = this
export extern float method@ `arithmetic.operator_modulo other:@this = this
export extern float method@ `arithmetic.operator_times other:@this = this
export extern float method@ `arithmetic.operator_uminus = this
export extern float method@! `arithmetic.operator_assign_plus other:@this = void
export extern float method@! `arithmetic.operator_assign_minus other:@this = void
export extern float method@! `arithmetic.operator_assign_divide other:@this = void
export extern float method@! `arithmetic.operator_assign_modulo other:@this = void
export extern float method@! `arithmetic.operator_assign_times other:@this = void
export extern inline float method@ trim_i8 = i8
export extern inline float method@ trim_i16 = i16
export extern inline float method@ to_i32 = i32
export extern inline float method@ to_i64 = i64
export extern inline float method@ to_double = double
export extern inline float method@ as_ssize = ssize
export extern float method@ `show.show buf:@#`string_buffer = void

export extern struct double =
  export isa `native_floating
export extern double method@# `copyable.copy_ctor other:@this = void
export extern double method@ `has_equality.operator_eq other:@this = bool
export extern double method@ `has_equality.operator_ne other:@this = bool
export extern double method@ `has_compare.operator_compare other:@this = i32
export extern double method@ `ordered.operator_le other:@this = bool
export extern double method@ `ordered.operator_lt other:@this = bool
export extern double method@ `ordered.operator_gt other:@this = bool
export extern double method@ `ordered.operator_ge other:@this = bool
export extern double method@ `arithmetic.operator_plus other:@this = this
export extern double method@ `arithmetic.operator_minus other:@this = this
export extern double method@ `arithmetic.operator_divide other:@this = this
export extern double method@ `arithmetic.operator_modulo other:@this = this
export extern double method@ `arithmetic.operator_times other:@this = this
export extern double method@ `arithmetic.operator_uminus = this
export extern double method@! `arithmetic.operator_assign_plus other:@this = void
export extern double method@! `arithmetic.operator_assign_minus other:@this = void
export extern double method@! `arithmetic.operator_assign_divide other:@this = void
export extern double method@! `arithmetic.operator_assign_modulo other:@this = void
export extern double method@! `arithmetic.operator_assign_times other:@this = void
export extern inline double method@ trim_i8 = i8
export extern inline double method@ trim_i16 = i16
export extern inline double method@ trim_i32 = i32
export extern inline double method@ to_i64 = i64
export extern inline double method@ trim_float = float
export extern inline double method@ as_ssize = ssize
export extern double method@ `show.show buf:@#`string_buffer = void

export intf `auto_ctor =
  fun mk = r:final
  fun new = @#final

export intf `ctor_with =
  method@# ctor = void
  fun mk = r:final
  fun new = @#final

-- FIXME: actual definition below
--export intf `ctor_with t:`copyable =
--  method@# ctor c:t = void
--  fun mk c:t = final
--  fun new c:t = @#final
--

export intf `trivial_array_ctor t:`copyable =
  isa (`array_ctor t)

export intf `array_ctor t:`copyable =
  method@# ctorv c:@(static_array t) = void
  fun mkv c:@(static_array t) = r:final
  fun newv c:@(static_array t) = @#final

extern inline fun static_array_at_byte dp:@!u8 off:size = @!u8

export inline struct static_array t:`copyable =
  export isa (`trivial_array_ctor t) `trivial_copy `return_by_copy
  _data:?@!t
  _count:size

export inline static_array method@ count = size
  return self._count

export inline static_array method@ bytecount = size
  return self._count * (sizeof t)

export inline static_array method@ all = index_range
  return range 0 self._count

export inline static_array method@$ unsafe_rawdata = @$u8
  assert <- self._count != 0
  return (cast ?@$t @$u8) self$_data

export inline static_array method@$ unsafe_data = @$t
  assert <- self._count != 0
  return self$_data

export inline static_array method@$ at n:size = @$t
  assert <- n < self._count
  let off = n * (sizeof t)
  let p = static_array_at_byte ((cast @$this @!this) self)!unsafe_rawdata off
  return (cast @!u8 @$t) p


export intf `sum_ctor_with =
  method@# ctor = void
  fun mk = r:final
  fun new = @#final


export extern fun abort = void

export fun assert cond:bool = void
  if not cond
    abort

export fun unreached = void
  abort

export fun __pre__ cond:bool = void
  if not cond
    abort

export fun __post__ cond:bool = void
  if not cond
    abort

export fun __invariant__ cond:bool = void
  if not cond
    abort

export fun __example__ cond:bool = void
  if not cond
    abort

export extern inline fun likely x:bool = bool
export extern inline fun unlikely x:bool = bool

export inline (fun t:`any) unused x:t = void
  noop

export inline (fun t:`any) optional opt:?@t fallback:t = t
  if opt !== null
    return opt.
  else
    return fallback

export inline (fun t:`numeric) min a:t b:t = t
  if a <= b
    return a
  else
    return b

export inline (fun t:`numeric) max a:t b:t = t
  if a >= b
    return a
  else
    return b


export intf `error =
  isa `trivial_ctor `copyable `generalized_boolean `show

export inline struct error =
  export isa `error `trivial_copy
  code	:i32

  export inline let OK = {}:error

export error method@ `generalized_boolean.operator_test = bool
  return self.code != 0

export error method@ `has_equality.operator_eq other:@final = bool
  return self.code == other.code

export error method@ `has_equality.operator_ne other:@final = bool
  return self.code != other.code

export error method@ `ordered.operator_le other:@final = bool
  return self.code <= other.code

export error method@ `ordered.operator_lt other:@final = bool
  return self.code < other.code

export error method@ `ordered.operator_gt other:@final = bool
  return self.code > other.code

export error method@ `ordered.operator_ge other:@final = bool
  return self.code >= other.code

export error method@ `show.show buf:@#`string_buffer = void
  self.code.show buf

export (fun e:`error) drop err:e = void
  noop

export (fun e:`error) fatal err:e = void
  print @"Fatal: "
  say @err
