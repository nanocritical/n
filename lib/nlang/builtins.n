from nlang.chars import i_string_buffer i_show
from nlang.memory import slice
from nlang.containers import index_range range
from nlang.unsafe import cast

export intf i_any =

export intf i_copyable =
  method# copy_ctor other:@final = void

export intf i_copyable_but_owned = export i_copyable -- FIXME
export intf i_trivial_copy = export i_copyable
export intf i_return_by_copy =
export intf i_default_ctor =
  method# ctor = void
  fun mk = r:final
  fun new = @#final

export intf i_trivial_ctor = export i_default_ctor
export intf i_trivial_dtor =
export intf i_matchable =
export intf i_has_equality = export i_matchable
  method operator_eq other:@final = bool
  method operator_ne other:@final = bool
export intf i_trivial_equality = export i_has_equality
export intf i_has_compare =
  method operator_compare other:@final = i32
export intf i_ordered = export i_has_equality
  method operator_le other:@final = bool
  method operator_lt other:@final = bool
  method operator_gt other:@final = bool
  method operator_ge other:@final = bool
export intf i_trivial_order = export i_ordered
export intf i_ordered_by_compare = export i_has_compare export i_ordered export i_has_equality
export intf i_arithmetic =
  method operator_plus other:@final = final
  method operator_minus other:@final = final
  method operator_divide other:@final = final
  method operator_modulo other:@final = final
  method operator_times other:@final = final
  method operator_uminus = final
  method! operator_assign_plus other:@final = void
  method! operator_assign_minus other:@final = void
  method! operator_assign_divide other:@final = void
  method! operator_assign_modulo other:@final = void
  method! operator_assign_times other:@final = void
export intf i_bitwise =
  method operator_bwor other:@final = final
  method operator_bwxor other:@final = final
  method operator_bwand other:@final = final
  method operator_lshift by:u32 = final
  method operator_rshift by:u32 = final
  method operator_bwnot = final
  method! operator_assign_bwor other:@final = void
  method! operator_assign_bwxor other:@final = void
  method! operator_assign_bwand other:@final = void
  method! operator_assign_lshift by:u32 = void
  method! operator_assign_rshift by:u32 = void


export intf i_sum_copy = export i_copyable
export intf i_sum_equality = export i_has_equality
export intf i_sum_order = export i_ordered

export extern type void = i_return_by_copy

export intf i_any_any_ref = export i_return_by_copy export i_trivial_copy export i_trivial_equality
export intf i_any_ref t:i_any = export i_any_any_ref
export intf i_ref t:i_any = export (i_any_ref t)
export intf i_mutable_ref t:i_any = export (i_ref t)
export intf i_mercurial_ref t:i_any = export (i_mutable_ref t)
export intf i_nullable_ref t:i_any = export (i_any_ref t)
export intf i_nullable_mutable_ref t:i_any = export (i_nullable_ref t)
export intf i_nullable_mercurial_ref t:i_any = export (i_nullable_mutable_ref t)

export extern type pseudo_tuple = export i_copyable

export intf i_numeric = \
    export i_copyable \
    export i_arithmetic \
    export i_ordered

export intf i_integer = \
    export i_numeric \
    export i_bitwise \
    export i_has_compare
  alias this_signed = i_signed_integer
  alias this_unsigned = i_unsigned_integer
  method reinterpret_signed = final.this_signed
  method reinterpret_unsigned = final.this_unsigned

export intf i_signed_integer = export i_integer

export intf i_unsigned_integer = export i_integer

export intf i_native_integer = \
    export i_trivial_ctor \
    export i_trivial_copy \
    export i_return_by_copy \
    export i_integer \
    export i_show

export intf i_native_signed_integer = \
    export i_signed_integer \
    export i_native_integer

export intf i_native_unsigned_integer = \
    export i_unsigned_integer \
    export i_native_integer

export intf i_native_anysign_integer = \
    export i_native_signed_integer \
    export i_native_unsigned_integer

export intf i_generalized_boolean = \
    export i_ordered
  method operator_or other:@final = final
  method operator_and other:@final = final
  method operator_not = final
  method operator_test = bool

export intf i_native_boolean = \
    export i_trivial_ctor \
    export i_trivial_copy \
    export i_return_by_copy \
    export i_generalized_boolean \
    export i_show

export intf i_floating = \
    export i_numeric \
    export i_has_compare

export intf i_native_floating = \
    export i_trivial_ctor \
    export i_trivial_copy \
    export i_return_by_copy \
    export i_floating \
    export i_show

export extern type bool = export i_native_boolean
export extern bool method# i_copyable.copy_ctor other:@this = void
export extern bool method i_has_equality.operator_eq other:@this = bool
export extern bool method i_has_equality.operator_ne other:@this = bool
export extern bool method i_has_compare.operator_compare other:@this = i32
export extern bool method i_ordered.operator_le other:@this = bool
export extern bool method i_ordered.operator_lt other:@this = bool
export extern bool method i_ordered.operator_gt other:@this = bool
export extern bool method i_ordered.operator_ge other:@this = bool
export extern bool method i_generalized_boolean.operator_or other:@this = this
export extern bool method i_generalized_boolean.operator_and other:@this = this
export extern bool method i_generalized_boolean.operator_not = this
export extern bool method i_generalized_boolean.operator_test = bool
export extern bool method to_u8 = u8
export extern bool method to_u16 = u16
export extern bool method to_u32 = u32
export extern bool method to_u64 = u64
export extern bool method i_show.show buf:@#i_string_buffer = void

export extern type i8 = export i_native_unsigned_integer
  alias this_signed = this
  alias this_unsigned = u8
export extern i8 method# i_copyable.copy_ctor other:@this = void
export extern i8 method i_has_equality.operator_eq other:@this = bool
export extern i8 method i_has_equality.operator_ne other:@this = bool
export extern i8 method i_has_compare.operator_compare other:@this = i32
export extern i8 method i_ordered.operator_le other:@this = bool
export extern i8 method i_ordered.operator_lt other:@this = bool
export extern i8 method i_ordered.operator_gt other:@this = bool
export extern i8 method i_ordered.operator_ge other:@this = bool
export extern i8 method i_arithmetic.operator_plus other:@this = this
export extern i8 method i_arithmetic.operator_minus other:@this = this
export extern i8 method i_arithmetic.operator_divide other:@this = this
export extern i8 method i_arithmetic.operator_modulo other:@this = this
export extern i8 method i_arithmetic.operator_times other:@this = this
export extern i8 method i_arithmetic.operator_uminus = this
export extern i8 method! i_arithmetic.operator_assign_plus other:@this = void
export extern i8 method! i_arithmetic.operator_assign_minus other:@this = void
export extern i8 method! i_arithmetic.operator_assign_divide other:@this = void
export extern i8 method! i_arithmetic.operator_assign_modulo other:@this = void
export extern i8 method! i_arithmetic.operator_assign_times other:@this = void
export extern i8 method i_bitwise.operator_bwor other:@this = this
export extern i8 method i_bitwise.operator_bwxor other:@this = this
export extern i8 method i_bitwise.operator_bwand other:@this = this
export extern i8 method i_bitwise.operator_lshift by:u32 = this
export extern i8 method i_bitwise.operator_rshift by:u32 = this
export extern i8 method i_bitwise.operator_bwnot = this
export extern i8 method! i_bitwise.operator_assign_bwor other:@this = void
export extern i8 method! i_bitwise.operator_assign_bwxor other:@this = void
export extern i8 method! i_bitwise.operator_assign_bwand other:@this = void
export extern i8 method! i_bitwise.operator_assign_lshift by:u32 = void
export extern i8 method! i_bitwise.operator_assign_rshift by:u32 = void
export extern inline i8 method reinterpret_unsigned = u8
export extern inline i8 method reinterpret_signed = this
export extern inline i8 method to_i16 = i16
export extern inline i8 method to_i32 = i32
export extern inline i8 method to_i64 = i64
export extern inline i8 method i_integer.as_ssize = ssize
export extern i8 method i_show.show buf:@#i_string_buffer = void

export extern type i16 = export i_native_unsigned_integer
  alias this_signed = this
  alias this_unsigned = u16
export extern i16 method# i_copyable.copy_ctor other:@this = void
export extern i16 method i_has_equality.operator_eq other:@this = bool
export extern i16 method i_has_equality.operator_ne other:@this = bool
export extern i16 method i_has_compare.operator_compare other:@this = i32
export extern i16 method i_ordered.operator_le other:@this = bool
export extern i16 method i_ordered.operator_lt other:@this = bool
export extern i16 method i_ordered.operator_gt other:@this = bool
export extern i16 method i_ordered.operator_ge other:@this = bool
export extern i16 method i_arithmetic.operator_plus other:@this = this
export extern i16 method i_arithmetic.operator_minus other:@this = this
export extern i16 method i_arithmetic.operator_divide other:@this = this
export extern i16 method i_arithmetic.operator_modulo other:@this = this
export extern i16 method i_arithmetic.operator_times other:@this = this
export extern i16 method i_arithmetic.operator_uminus = this
export extern i16 method! i_arithmetic.operator_assign_plus other:@this = void
export extern i16 method! i_arithmetic.operator_assign_minus other:@this = void
export extern i16 method! i_arithmetic.operator_assign_divide other:@this = void
export extern i16 method! i_arithmetic.operator_assign_modulo other:@this = void
export extern i16 method! i_arithmetic.operator_assign_times other:@this = void
export extern i16 method i_bitwise.operator_bwor other:@this = this
export extern i16 method i_bitwise.operator_bwxor other:@this = this
export extern i16 method i_bitwise.operator_bwand other:@this = this
export extern i16 method i_bitwise.operator_lshift by:u32 = this
export extern i16 method i_bitwise.operator_rshift by:u32 = this
export extern i16 method i_bitwise.operator_bwnot = this
export extern i16 method! i_bitwise.operator_assign_bwor other:@this = void
export extern i16 method! i_bitwise.operator_assign_bwxor other:@this = void
export extern i16 method! i_bitwise.operator_assign_bwand other:@this = void
export extern i16 method! i_bitwise.operator_assign_lshift by:u32 = void
export extern i16 method! i_bitwise.operator_assign_rshift by:u32 = void
export extern inline i16 method reinterpret_unsigned = u16
export extern inline i16 method reinterpret_signed = this
export extern inline i16 method trim_i8 = i8
export extern inline i16 method to_i32 = i32
export extern inline i16 method to_i64 = i64
export extern inline i16 method i_integer.as_ssize = ssize
export extern i16 method i_show.show buf:@#i_string_buffer = void

export extern type i32 = export i_native_unsigned_integer
  alias this_signed = this
  alias this_unsigned = u32
export extern i32 method# i_copyable.copy_ctor other:@this = void
export extern i32 method i_has_equality.operator_eq other:@this = bool
export extern i32 method i_has_equality.operator_ne other:@this = bool
export extern i32 method i_has_compare.operator_compare other:@this = i32
export extern i32 method i_ordered.operator_le other:@this = bool
export extern i32 method i_ordered.operator_lt other:@this = bool
export extern i32 method i_ordered.operator_gt other:@this = bool
export extern i32 method i_ordered.operator_ge other:@this = bool
export extern i32 method i_arithmetic.operator_plus other:@this = this
export extern i32 method i_arithmetic.operator_minus other:@this = this
export extern i32 method i_arithmetic.operator_divide other:@this = this
export extern i32 method i_arithmetic.operator_modulo other:@this = this
export extern i32 method i_arithmetic.operator_times other:@this = this
export extern i32 method i_arithmetic.operator_uminus = this
export extern i32 method! i_arithmetic.operator_assign_plus other:@this = void
export extern i32 method! i_arithmetic.operator_assign_minus other:@this = void
export extern i32 method! i_arithmetic.operator_assign_divide other:@this = void
export extern i32 method! i_arithmetic.operator_assign_modulo other:@this = void
export extern i32 method! i_arithmetic.operator_assign_times other:@this = void
export extern i32 method i_bitwise.operator_bwor other:@this = this
export extern i32 method i_bitwise.operator_bwxor other:@this = this
export extern i32 method i_bitwise.operator_bwand other:@this = this
export extern i32 method i_bitwise.operator_lshift by:u32 = this
export extern i32 method i_bitwise.operator_rshift by:u32 = this
export extern i32 method i_bitwise.operator_bwnot = this
export extern i32 method! i_bitwise.operator_assign_bwor other:@this = void
export extern i32 method! i_bitwise.operator_assign_bwxor other:@this = void
export extern i32 method! i_bitwise.operator_assign_bwand other:@this = void
export extern i32 method! i_bitwise.operator_assign_lshift by:u32 = void
export extern i32 method! i_bitwise.operator_assign_rshift by:u32 = void
export extern inline i32 method reinterpret_unsigned = u32
export extern inline i32 method reinterpret_signed = this
export extern inline i32 method trim_i8 = i8
export extern inline i32 method trim_i16 = i16
export extern inline i32 method to_i64 = i64
export extern inline i32 method i_integer.as_ssize = ssize
export extern inline i32 method trim_float = float
export extern inline i32 method to_double = double
export extern i32 method i_show.show buf:@#i_string_buffer = void

export extern type i64 = export i_native_unsigned_integer
  alias this_signed = this
  alias this_unsigned = u64
export extern i64 method# i_copyable.copy_ctor other:@this = void
export extern i64 method i_has_equality.operator_eq other:@this = bool
export extern i64 method i_has_equality.operator_ne other:@this = bool
export extern i64 method i_has_compare.operator_compare other:@this = i32
export extern i64 method i_ordered.operator_le other:@this = bool
export extern i64 method i_ordered.operator_lt other:@this = bool
export extern i64 method i_ordered.operator_gt other:@this = bool
export extern i64 method i_ordered.operator_ge other:@this = bool
export extern i64 method i_arithmetic.operator_plus other:@this = this
export extern i64 method i_arithmetic.operator_minus other:@this = this
export extern i64 method i_arithmetic.operator_divide other:@this = this
export extern i64 method i_arithmetic.operator_modulo other:@this = this
export extern i64 method i_arithmetic.operator_times other:@this = this
export extern i64 method i_arithmetic.operator_uminus = this
export extern i64 method! i_arithmetic.operator_assign_plus other:@this = void
export extern i64 method! i_arithmetic.operator_assign_minus other:@this = void
export extern i64 method! i_arithmetic.operator_assign_divide other:@this = void
export extern i64 method! i_arithmetic.operator_assign_modulo other:@this = void
export extern i64 method! i_arithmetic.operator_assign_times other:@this = void
export extern i64 method i_bitwise.operator_bwor other:@this = this
export extern i64 method i_bitwise.operator_bwxor other:@this = this
export extern i64 method i_bitwise.operator_bwand other:@this = this
export extern i64 method i_bitwise.operator_lshift by:u32 = this
export extern i64 method i_bitwise.operator_rshift by:u32 = this
export extern i64 method i_bitwise.operator_bwnot = this
export extern i64 method! i_bitwise.operator_assign_bwor other:@this = void
export extern i64 method! i_bitwise.operator_assign_bwxor other:@this = void
export extern i64 method! i_bitwise.operator_assign_bwand other:@this = void
export extern i64 method! i_bitwise.operator_assign_lshift by:u32 = void
export extern i64 method! i_bitwise.operator_assign_rshift by:u32 = void
export extern inline i64 method reinterpret_unsigned = u64
export extern inline i64 method reinterpret_signed = this
export extern inline i64 method trim_i8 = i8
export extern inline i64 method trim_i16 = i16
export extern inline i64 method trim_i32 = i32
export extern inline i64 method i_integer.as_ssize = ssize
export extern inline i64 method trim_float = float
export extern inline i64 method trim_double = double
export extern i64 method i_show.show buf:@#i_string_buffer = void

export extern type u8 = export i_native_unsigned_integer
  alias this_unsigned = this
  alias this_signed = i8
export extern u8 method# i_copyable.copy_ctor other:@this = void
export extern u8 method i_has_equality.operator_eq other:@this = bool
export extern u8 method i_has_equality.operator_ne other:@this = bool
export extern u8 method i_has_compare.operator_compare other:@this = i32
export extern u8 method i_ordered.operator_le other:@this = bool
export extern u8 method i_ordered.operator_lt other:@this = bool
export extern u8 method i_ordered.operator_gt other:@this = bool
export extern u8 method i_ordered.operator_ge other:@this = bool
export extern u8 method i_arithmetic.operator_plus other:@this = this
export extern u8 method i_arithmetic.operator_minus other:@this = this
export extern u8 method i_arithmetic.operator_divide other:@this = this
export extern u8 method i_arithmetic.operator_modulo other:@this = this
export extern u8 method i_arithmetic.operator_times other:@this = this
export extern u8 method i_arithmetic.operator_uminus = this
export extern u8 method i_bitwise.operator_bwor other:@this = this
export extern u8 method i_bitwise.operator_bwxor other:@this = this
export extern u8 method i_bitwise.operator_bwand other:@this = this
export extern u8 method i_bitwise.operator_lshift by:u32 = this
export extern u8 method i_bitwise.operator_rshift by:u32 = this
export extern u8 method i_bitwise.operator_bwnot = this
export extern u8 method! i_arithmetic.operator_assign_plus other:@this = void
export extern u8 method! i_arithmetic.operator_assign_minus other:@this = void
export extern u8 method! i_arithmetic.operator_assign_divide other:@this = void
export extern u8 method! i_arithmetic.operator_assign_modulo other:@this = void
export extern u8 method! i_arithmetic.operator_assign_times other:@this = void
export extern u8 method! i_bitwise.operator_assign_bwor other:@this = void
export extern u8 method! i_bitwise.operator_assign_bwxor other:@this = void
export extern u8 method! i_bitwise.operator_assign_bwand other:@this = void
export extern u8 method! i_bitwise.operator_assign_lshift by:u32 = void
export extern u8 method! i_bitwise.operator_assign_rshift by:u32 = void
export extern inline u8 method reinterpret_unsigned = this
export extern inline u8 method reinterpret_signed = i8
export extern inline u8 method to_u16 = u16
export extern inline u8 method to_u32 = u32
export extern inline u8 method to_u64 = u64
export extern inline u8 method i_integer.as_size = size
export extern inline u8 method to_float = float
export extern inline u8 method to_double = double
export extern u8 method i_show.show buf:@#i_string_buffer = void

export extern type u16 = export i_native_unsigned_integer
  alias this_unsigned = this
  alias this_signed = i16
export extern u16 method# i_copyable.copy_ctor other:@this = void
export extern u16 method i_has_equality.operator_eq other:@this = bool
export extern u16 method i_has_equality.operator_ne other:@this = bool
export extern u16 method i_has_compare.operator_compare other:@this = i32
export extern u16 method i_ordered.operator_le other:@this = bool
export extern u16 method i_ordered.operator_lt other:@this = bool
export extern u16 method i_ordered.operator_gt other:@this = bool
export extern u16 method i_ordered.operator_ge other:@this = bool
export extern u16 method i_arithmetic.operator_plus other:@this = this
export extern u16 method i_arithmetic.operator_minus other:@this = this
export extern u16 method i_arithmetic.operator_divide other:@this = this
export extern u16 method i_arithmetic.operator_modulo other:@this = this
export extern u16 method i_arithmetic.operator_times other:@this = this
export extern u16 method i_arithmetic.operator_uminus = this
export extern u16 method! i_arithmetic.operator_assign_plus other:@this = void
export extern u16 method! i_arithmetic.operator_assign_minus other:@this = void
export extern u16 method! i_arithmetic.operator_assign_divide other:@this = void
export extern u16 method! i_arithmetic.operator_assign_modulo other:@this = void
export extern u16 method! i_arithmetic.operator_assign_times other:@this = void
export extern u16 method i_bitwise.operator_bwor other:@this = this
export extern u16 method i_bitwise.operator_bwxor other:@this = this
export extern u16 method i_bitwise.operator_bwand other:@this = this
export extern u16 method i_bitwise.operator_lshift by:u32 = this
export extern u16 method i_bitwise.operator_rshift by:u32 = this
export extern u16 method i_bitwise.operator_bwnot = this
export extern u16 method! i_bitwise.operator_assign_bwor other:@this = void
export extern u16 method! i_bitwise.operator_assign_bwxor other:@this = void
export extern u16 method! i_bitwise.operator_assign_bwand other:@this = void
export extern u16 method! i_bitwise.operator_assign_lshift by:u32 = void
export extern u16 method! i_bitwise.operator_assign_rshift by:u32 = void
export extern inline u16 method reinterpret_unsigned = this
export extern inline u16 method reinterpret_signed = i16
export extern inline u16 method trim_u8 = u8
export extern inline u16 method to_u32 = u32
export extern inline u16 method to_u64 = u64
export extern inline u16 method i_integer.as_size = size
export extern inline u16 method to_float = float
export extern inline u16 method to_double = double
export extern u16 method i_show.show buf:@#i_string_buffer = void

export extern type u32 = export i_native_unsigned_integer
  alias this_unsigned = this
  alias this_signed = i32
export extern u32 method# i_copyable.copy_ctor other:@this = void
export extern u32 method i_has_equality.operator_eq other:@this = bool
export extern u32 method i_has_equality.operator_ne other:@this = bool
export extern u32 method i_has_compare.operator_compare other:@this = i32
export extern u32 method i_ordered.operator_le other:@this = bool
export extern u32 method i_ordered.operator_lt other:@this = bool
export extern u32 method i_ordered.operator_gt other:@this = bool
export extern u32 method i_ordered.operator_ge other:@this = bool
export extern u32 method i_arithmetic.operator_plus other:@this = this
export extern u32 method i_arithmetic.operator_minus other:@this = this
export extern u32 method i_arithmetic.operator_divide other:@this = this
export extern u32 method i_arithmetic.operator_modulo other:@this = this
export extern u32 method i_arithmetic.operator_times other:@this = this
export extern u32 method i_arithmetic.operator_uminus = this
export extern u32 method! i_arithmetic.operator_assign_plus other:@this = void
export extern u32 method! i_arithmetic.operator_assign_minus other:@this = void
export extern u32 method! i_arithmetic.operator_assign_divide other:@this = void
export extern u32 method! i_arithmetic.operator_assign_modulo other:@this = void
export extern u32 method! i_arithmetic.operator_assign_times other:@this = void
export extern u32 method i_bitwise.operator_bwor other:@this = this
export extern u32 method i_bitwise.operator_bwxor other:@this = this
export extern u32 method i_bitwise.operator_bwand other:@this = this
export extern u32 method i_bitwise.operator_lshift by:u32 = this
export extern u32 method i_bitwise.operator_rshift by:u32 = this
export extern u32 method i_bitwise.operator_bwnot = this
export extern u32 method! i_bitwise.operator_assign_bwor other:@this = void
export extern u32 method! i_bitwise.operator_assign_bwxor other:@this = void
export extern u32 method! i_bitwise.operator_assign_bwand other:@this = void
export extern u32 method! i_bitwise.operator_assign_lshift by:u32 = void
export extern u32 method! i_bitwise.operator_assign_rshift by:u32 = void
export extern inline u32 method reinterpret_unsigned = this
export extern inline u32 method reinterpret_signed = i32
export extern inline u32 method trim_u8 = u8
export extern inline u32 method trim_u16 = u16
export extern inline u32 method to_u64 = u64
export extern inline u32 method i_integer.as_size = size
export extern inline u32 method trim_float = float
export extern inline u32 method to_double = double
export extern u32 method i_show.show buf:@#i_string_buffer = void

export extern type u64 = export i_native_unsigned_integer
  alias this_unsigned = this
  alias this_signed = i64
export extern u64 method# i_copyable.copy_ctor other:@this = void
export extern u64 method i_has_equality.operator_eq other:@this = bool
export extern u64 method i_has_equality.operator_ne other:@this = bool
export extern u64 method i_has_compare.operator_compare other:@this = i32
export extern u64 method i_ordered.operator_le other:@this = bool
export extern u64 method i_ordered.operator_lt other:@this = bool
export extern u64 method i_ordered.operator_gt other:@this = bool
export extern u64 method i_ordered.operator_ge other:@this = bool
export extern u64 method i_arithmetic.operator_plus other:@this = this
export extern u64 method i_arithmetic.operator_minus other:@this = this
export extern u64 method i_arithmetic.operator_divide other:@this = this
export extern u64 method i_arithmetic.operator_modulo other:@this = this
export extern u64 method i_arithmetic.operator_times other:@this = this
export extern u64 method i_arithmetic.operator_uminus = this
export extern u64 method! i_arithmetic.operator_assign_plus other:@this = void
export extern u64 method! i_arithmetic.operator_assign_minus other:@this = void
export extern u64 method! i_arithmetic.operator_assign_divide other:@this = void
export extern u64 method! i_arithmetic.operator_assign_modulo other:@this = void
export extern u64 method! i_arithmetic.operator_assign_times other:@this = void
export extern u64 method i_bitwise.operator_bwor other:@this = this
export extern u64 method i_bitwise.operator_bwxor other:@this = this
export extern u64 method i_bitwise.operator_bwand other:@this = this
export extern u64 method i_bitwise.operator_lshift by:u32 = this
export extern u64 method i_bitwise.operator_rshift by:u32 = this
export extern u64 method i_bitwise.operator_bwnot = this
export extern u64 method! i_bitwise.operator_assign_bwor other:@this = void
export extern u64 method! i_bitwise.operator_assign_bwxor other:@this = void
export extern u64 method! i_bitwise.operator_assign_bwand other:@this = void
export extern u64 method! i_bitwise.operator_assign_lshift by:u32 = void
export extern u64 method! i_bitwise.operator_assign_rshift by:u32 = void
export extern inline u64 method reinterpret_unsigned = this
export extern inline u64 method reinterpret_signed = i64
export extern inline u64 method trim_u8 = u8
export extern inline u64 method trim_u16 = u16
export extern inline u64 method trim_u32 = u32
export extern inline u64 method i_integer.as_size = size
export extern inline u64 method trim_float = float
export extern inline u64 method trim_double = double
export extern u64 method i_show.show buf:@#i_string_buffer = void

export extern type ssize = export i_native_integer
  alias this_signed = this
  alias this_unsigned = size
export extern ssize method# i_copyable.copy_ctor other:@this = void
export extern ssize method i_has_equality.operator_eq other:@this = bool
export extern ssize method i_has_equality.operator_ne other:@this = bool
export extern ssize method i_has_compare.operator_compare other:@this = i32
export extern ssize method i_ordered.operator_le other:@this = bool
export extern ssize method i_ordered.operator_lt other:@this = bool
export extern ssize method i_ordered.operator_gt other:@this = bool
export extern ssize method i_ordered.operator_ge other:@this = bool
export extern ssize method i_arithmetic.operator_plus other:@this = this
export extern ssize method i_arithmetic.operator_minus other:@this = this
export extern ssize method i_arithmetic.operator_divide other:@this = this
export extern ssize method i_arithmetic.operator_modulo other:@this = this
export extern ssize method i_arithmetic.operator_times other:@this = this
export extern ssize method i_arithmetic.operator_uminus = this
export extern ssize method! i_arithmetic.operator_assign_plus other:@this = void
export extern ssize method! i_arithmetic.operator_assign_minus other:@this = void
export extern ssize method! i_arithmetic.operator_assign_divide other:@this = void
export extern ssize method! i_arithmetic.operator_assign_modulo other:@this = void
export extern ssize method! i_arithmetic.operator_assign_times other:@this = void
export extern ssize method i_bitwise.operator_bwor other:@this = this
export extern ssize method i_bitwise.operator_bwxor other:@this = this
export extern ssize method i_bitwise.operator_bwand other:@this = this
export extern ssize method i_bitwise.operator_lshift by:u32 = this
export extern ssize method i_bitwise.operator_rshift by:u32 = this
export extern ssize method i_bitwise.operator_bwnot = this
export extern ssize method! i_bitwise.operator_assign_bwor other:@this = void
export extern ssize method! i_bitwise.operator_assign_bwxor other:@this = void
export extern ssize method! i_bitwise.operator_assign_bwand other:@this = void
export extern ssize method! i_bitwise.operator_assign_lshift by:u32 = void
export extern ssize method! i_bitwise.operator_assign_rshift by:u32 = void
export extern inline ssize method reinterpret_unsigned = size
export extern inline ssize method reinterpret_signed = this
export extern inline ssize method trim_i8 = i8
export extern inline ssize method trim_i16 = i16
export extern inline ssize method trim_i32 = i32
export extern inline ssize method trim_i64 = i64
export extern inline ssize method trim_float = float
export extern inline ssize method trim_double = double
export extern ssize method i_show.show buf:@#i_string_buffer = void

export extern type size = export i_native_unsigned_integer
  alias this_unsigned = this
  alias this_signed = ssize
export extern size method# i_copyable.copy_ctor other:@this = void
export extern size method i_has_equality.operator_eq other:@this = bool
export extern size method i_has_equality.operator_ne other:@this = bool
export extern size method i_has_compare.operator_compare other:@this = i32
export extern size method i_ordered.operator_le other:@this = bool
export extern size method i_ordered.operator_lt other:@this = bool
export extern size method i_ordered.operator_gt other:@this = bool
export extern size method i_ordered.operator_ge other:@this = bool
export extern size method i_arithmetic.operator_plus other:@this = this
export extern size method i_arithmetic.operator_minus other:@this = this
export extern size method i_arithmetic.operator_divide other:@this = this
export extern size method i_arithmetic.operator_modulo other:@this = this
export extern size method i_arithmetic.operator_times other:@this = this
export extern size method i_arithmetic.operator_uminus = this
export extern size method! i_arithmetic.operator_assign_plus other:@this = void
export extern size method! i_arithmetic.operator_assign_minus other:@this = void
export extern size method! i_arithmetic.operator_assign_divide other:@this = void
export extern size method! i_arithmetic.operator_assign_modulo other:@this = void
export extern size method! i_arithmetic.operator_assign_times other:@this = void
export extern size method i_bitwise.operator_bwor other:@this = this
export extern size method i_bitwise.operator_bwxor other:@this = this
export extern size method i_bitwise.operator_bwand other:@this = this
export extern size method i_bitwise.operator_lshift by:u32 = this
export extern size method i_bitwise.operator_rshift by:u32 = this
export extern size method i_bitwise.operator_bwnot = this
export extern size method! i_bitwise.operator_assign_bwor other:@this = void
export extern size method! i_bitwise.operator_assign_bwxor other:@this = void
export extern size method! i_bitwise.operator_assign_bwand other:@this = void
export extern size method! i_bitwise.operator_assign_lshift by:u32 = void
export extern size method! i_bitwise.operator_assign_rshift by:u32 = void
export extern inline size method reinterpret_unsigned = this
export extern inline size method reinterpret_signed = ssize
export extern inline size method trim_u8 = u8
export extern inline size method trim_u16 = u16
export extern inline size method trim_u32 = u32
export extern inline size method trim_u64 = u64
export extern inline size method trim_float = float
export extern inline size method trim_double = double
export extern size method i_show.show buf:@#i_string_buffer = void

export extern type float = export i_native_floating
export extern float method# i_copyable.copy_ctor other:@this = void
export extern float method i_has_equality.operator_eq other:@this = bool
export extern float method i_has_equality.operator_ne other:@this = bool
export extern float method i_has_compare.operator_compare other:@this = i32
export extern float method i_ordered.operator_le other:@this = bool
export extern float method i_ordered.operator_lt other:@this = bool
export extern float method i_ordered.operator_gt other:@this = bool
export extern float method i_ordered.operator_ge other:@this = bool
export extern float method i_arithmetic.operator_plus other:@this = this
export extern float method i_arithmetic.operator_minus other:@this = this
export extern float method i_arithmetic.operator_divide other:@this = this
export extern float method i_arithmetic.operator_modulo other:@this = this
export extern float method i_arithmetic.operator_times other:@this = this
export extern float method i_arithmetic.operator_uminus = this
export extern float method! i_arithmetic.operator_assign_plus other:@this = void
export extern float method! i_arithmetic.operator_assign_minus other:@this = void
export extern float method! i_arithmetic.operator_assign_divide other:@this = void
export extern float method! i_arithmetic.operator_assign_modulo other:@this = void
export extern float method! i_arithmetic.operator_assign_times other:@this = void
export extern inline float method trim_i8 = i8
export extern inline float method trim_i16 = i16
export extern inline float method to_i32 = i32
export extern inline float method to_i64 = i64
export extern inline float method to_double = double
export extern inline float method as_ssize = ssize
export extern float method i_show.show buf:@#i_string_buffer = void

export extern type double = export i_native_floating
export extern double method# i_copyable.copy_ctor other:@this = void
export extern double method i_has_equality.operator_eq other:@this = bool
export extern double method i_has_equality.operator_ne other:@this = bool
export extern double method i_has_compare.operator_compare other:@this = i32
export extern double method i_ordered.operator_le other:@this = bool
export extern double method i_ordered.operator_lt other:@this = bool
export extern double method i_ordered.operator_gt other:@this = bool
export extern double method i_ordered.operator_ge other:@this = bool
export extern double method i_arithmetic.operator_plus other:@this = this
export extern double method i_arithmetic.operator_minus other:@this = this
export extern double method i_arithmetic.operator_divide other:@this = this
export extern double method i_arithmetic.operator_modulo other:@this = this
export extern double method i_arithmetic.operator_times other:@this = this
export extern double method i_arithmetic.operator_uminus = this
export extern double method! i_arithmetic.operator_assign_plus other:@this = void
export extern double method! i_arithmetic.operator_assign_minus other:@this = void
export extern double method! i_arithmetic.operator_assign_divide other:@this = void
export extern double method! i_arithmetic.operator_assign_modulo other:@this = void
export extern double method! i_arithmetic.operator_assign_times other:@this = void
export extern inline double method trim_i8 = i8
export extern inline double method trim_i16 = i16
export extern inline double method trim_i32 = i32
export extern inline double method to_i64 = i64
export extern inline double method trim_float = float
export extern inline double method as_ssize = ssize
export extern double method i_show.show buf:@#i_string_buffer = void

export intf i_auto_ctor =
  fun mk = r:final
  fun new = @#final

export intf i_ctor_with =
  method# ctor = void
  fun mk = r:final
  fun new = @#final

-- FIXME: actual definition below
--export intf i_ctor_with t:i_copyable =
--  method# ctor c:t = void
--  fun mk c:t = final
--  fun new c:t = @#final
--

export intf i_trivial_array_ctor t:i_copyable = export (i_array_ctor t)

export intf i_array_ctor t:i_copyable =
  method# ctorv c:@(static_array t) = void
  fun mkv c:@(static_array t) = r:final
  fun newv c:@(static_array t) = @#final

extern inline fun static_array_at_byte dp:@!u8 off:size = @!u8

export inline type static_array t:i_copyable = export (i_trivial_array_ctor t)
  _data:?@!t
  _count:size

export inline static_array method count = size
  return self._count

export inline static_array method bytecount = size
  return self._count * (sizeof t)

export inline static_array method all = index_range
  return range 0 self._count

export inline static_array method$ unsafe_rawdata = @$u8
  assert (self._count != 0)
  return (cast ?@!t @$u8) self$_data

export inline static_array method$ unsafe_data = @$t
  assert (self._count != 0)
  return self$_data

export inline static_array method$ at n:size = @$t
  assert (n < self._count)
  let off = n * (sizeof t)
  let p = static_array_at_byte ((cast @$this @!this) self)!unsafe_rawdata off
  return (cast @!u8 @$t) p


export intf i_sum_ctor_with =
  method# ctor = void
  fun mk = r:final
  fun new = @#final

export extern fun abort = void

export fun assert cond:bool = void
  if not cond
    abort

export extern inline fun likely x:bool = bool
export extern inline fun unlikely x:bool = bool

export inline (fun t:i_any) unused x:t = void
  pass

export inline (fun t:i_any) optional opt:?@t fallback:t = t
  if opt !== null
    return opt.
  else
    return fallback
