-- In this file, imports go at the end of the file.

export extern intf `__literal_null__ =
  isa `any_nullable_ref
export extern intf `__literal_integer__ =
  isa `integer
export extern intf `__literal_floating__ =
  isa `floating

export extern struct __internal_not_typeable__ =
export extern struct __call_function_slot__ =

export extern struct __mutable__ =
export extern struct __mercurial__ =

export intf `any =

-- `prevent_dyn stops the compiler from generating a dyntable for the rest of
-- the isa list.
export intf `prevent_dyn =

export intf `copyable =
  method# copy_ctor other:@final = void
export intf `not_copyable =
export intf `copyable_but_owned =
  isa `copyable -- FIXME
-- FIXME: `trivial_copy should have other:@this, as it only needs `any.sizeof.
-- And there should be a copy_slice operation over `trivial_copy. That's kinda
-- the point.
export intf `trivial_copy =
  isa `copyable
export intf `trivial_copy_but_owned =
  isa `trivial_copy -- FIXME
export intf `return_by_copy =
export intf `not_return_by_copy =
export intf `default_ctor =
  method# ctor = void
export intf `non_default_ctor =

export intf `default_dtor =
  method# dtor = void
export intf `error_dtor =
  method# dtor = error

export intf `trivial_ctor =
  isa `default_ctor
export intf `trivial_dtor =
  isa `default_dtor

export intf `matchable =
export intf `has_compare =
  -- The relation defined by `has_compare.operator_compare may be a partial
  -- order, or maybe not an order, or maybe not even an equality.
  -- `equality_by_compare and `ordered_by_compare must be used to indicate what
  -- this relation actually is.
  method operator_compare other:@final = i32
export intf `trivial_compare =
  isa `has_compare
export intf `has_equality =
  isa `has_compare `matchable
  method operator_eq other:@final = bool
  method operator_ne other:@final = bool
export intf `not_has_equality =
export intf `equality_by_compare =
  -- Compiler generates operator_{eq,ne}.
  isa `has_compare `has_equality
export intf `trivial_equality =
  isa `trivial_compare `equality_by_compare
export intf `ordered =
  isa `has_equality `has_compare
  method operator_le other:@final = bool
  method operator_lt other:@final = bool
  method operator_gt other:@final = bool
  method operator_ge other:@final = bool
export intf `not_ordered =
export intf `ordered_by_compare =
  -- Compiler generates operator_{le,lt,gt,ge}.
  isa `has_compare `ordered
export intf `trivial_order =
  isa `trivial_compare `ordered_by_compare
export intf `arithmetic =
  method operator_plus other:@final = final
  method operator_minus other:@final = final
  method operator_divide other:@final = final
  method operator_modulo other:@final = final
  method operator_times other:@final = final
  method operator_uminus = final
  method! operator_assign_plus other:@final = void
  method! operator_assign_minus other:@final = void
  method! operator_assign_divide other:@final = void
  method! operator_assign_modulo other:@final = void
  method! operator_assign_times other:@final = void
export intf `bitwise =
  method operator_bwor other:@final = final
  method operator_bwxor other:@final = final
  method operator_bwand other:@final = final
  method operator_lshift by:u32 = final
  method operator_rshift by:u32 = final
  method operator_bwnot = final
  method! operator_assign_bwor other:@final = void
  method! operator_assign_bwxor other:@final = void
  method! operator_assign_bwand other:@final = void
  method! operator_assign_lshift by:u32 = void
  method! operator_assign_rshift by:u32 = void


export intf `sum_copy =
  isa `copyable
export intf `sum_equality =
  isa `has_equality
export intf `sum_order =
  isa `ordered


export extern inline struct void =
  export isa `prevent_dyn `return_by_copy `trivial_copy `trivial_ctor


export intf `any_any_ref =
  isa `return_by_copy `trivial_copy_but_owned
export intf `any_ref t:`any =
  isa `any_any_ref
export intf `any_mutable_ref t:`any =
  isa (`any_ref t)
export intf `any_nullable_ref t:`any =
  isa `any_any_ref `trivial_ctor
export intf `any_nullable_mutable_ref t:`any =
  isa (`any_nullable_ref t)

export extern struct ref t:`any =
  export isa (`any_ref t)
export extern struct mutable_ref t:`any =
  export isa (`any_mutable_ref t)
export extern struct mercurial_ref t:`any =
  export isa (`any_mutable_ref t)

-- FIXME: to replace with semantic constraint
export extern struct nullable_ref t:`any =
  export isa (`any_nullable_ref t)
export extern struct nullable_mutable_ref t:`any =
  export isa (`any_nullable_mutable_ref t)
export extern struct nullable_mercurial_ref t:`any =
  export isa (`any_nullable_mutable_ref t)


export intf `any_any_slice =
  isa `trivial_ctor `trivial_dtor `return_by_copy `trivial_copy_but_owned

export intf `any_slice t:`any =
  isa `any_any_slice (`random_container t)
  method bytecount = size
  method all = index_range
  shallow method$ unsafe_rawdata = @$u8
  shallow method$ unsafe_data = @$t
  shallow method$ operator_at n:size = @$t
  shallow method$ operator_sub r:index_range = []$t

export intf `any_mutable_slice t:`any =
  isa (`any_slice t)
  method! copy other:[]t = void

-- The body of the methods for slice and mutable_slice are actually not used, as
-- slice_impl is used in codegen for both slice and mutable_slice. The code in
-- these functions has only one purpose: triggering the instantiation of the
-- corresponding slice_impl methods.
-- We will need a better solution down the road, as the code in these bogus
-- methods is all sorts of wrong and is bound to be rejected by the compiler.

export opaque struct slice t:`any =
  export isa (`any_slice t)
  dat	:?@#t
  cnt	:size

export inline slice fun create_impl_instance = (slice_impl t)
  return {}
export inline slice method# unsafe_wrap p:@u8 c:size = void
  let s = this.create_impl_instance
  s#unsafe_wrap p c
export inline slice method count = size
  let s = this.create_impl_instance
  return s.count
export inline slice method bytecount = size
  let s = this.create_impl_instance
  return s.bytecount
export inline slice method all = index_range
  let s = this.create_impl_instance
  return s.all
export inline slice shallow method$ unsafe_rawdata = @u8
  let s = this.create_impl_instance
  return s.unsafe_rawdata
export inline slice shallow method$ unsafe_data = @t
  let s = this.create_impl_instance
  return s.unsafe_data
export inline slice shallow method$ operator_at n:size = @t
  let s = this.create_impl_instance
  return s.operator_at n
export inline slice shallow method$ operator_sub r:index_range = []t
  let s = this.create_impl_instance
  such
    let _ = s.operator_sub r
  return {}

export opaque struct mutable_slice t:`any =
  export isa (`any_mutable_slice t)
  dat	:?@#t
  cnt	:size

export inline mutable_slice fun create_impl_instance = (slice_impl t)
  return {}
export inline mutable_slice method# unsafe_wrap p:@u8 c:size = void
  let s = this.create_impl_instance
  s#unsafe_wrap p c
export inline mutable_slice method count = size
  let s = this.create_impl_instance
  return s.count
export inline mutable_slice method bytecount = size
  let s = this.create_impl_instance
  return s.bytecount
export inline mutable_slice method all = index_range
  let s = this.create_impl_instance
  return s.all
export inline mutable_slice shallow method$ unsafe_rawdata = @$u8
  let s = this.create_impl_instance
  such
    let _ = s.unsafe_rawdata
    let _ = s!unsafe_rawdata
    let _ = s#unsafe_rawdata
    return s$unsafe_rawdata
export inline mutable_slice shallow method$ unsafe_data = @$t
  let s = this.create_impl_instance
  such
    let _ = s.unsafe_data
    let _ = s!unsafe_data
    let _ = s#unsafe_data
    return s$unsafe_data
export inline mutable_slice shallow method$ operator_at n:size = @$t
  let s = this.create_impl_instance
  such
    let _ = s.operator_at n
    let _ = s!operator_at n
    let p = s#operator_at n
    return s$operator_at n
export inline mutable_slice method! copy other:[]t = void
  let s = this.create_impl_instance
  such
    s!copy s
export inline mutable_slice shallow method$ operator_sub r:index_range = []$t
  let s = this.create_impl_instance
  such
    let _ = (s.operator_sub r)
    let _ = (s!operator_sub r)
    let _ = (s#operator_sub r)
    return {}


export extern inline fun slice_at_byte dp:@#u8 off:size = @#u8
export extern inline fun slice_memcpy dst:@#u8 src:@u8 count:size = void

export opaque struct slice_impl t:`any =
  export isa (`any_mutable_slice t)
  dat	:?@#t
  cnt	:size

export inline slice_impl method# unsafe_wrap p:@u8 c:size = void
  self#dat = (cast @u8 @#t) p
  self#cnt = c

export inline slice_impl method count = size
  return self.cnt

export inline slice_impl method bytecount = size
  return (sizeof t) * self.cnt

export inline slice_impl method all = index_range
  return range 0 self.cnt

export inline slice_impl shallow method$ unsafe_rawdata = @$u8
  return (cast ?@$t @$u8) self$dat

export inline slice_impl shallow method$ unsafe_data = @$t
  return (nonnull_cast t ?@$t @$t) self$dat

export inline slice_impl shallow method$ operator_at n:size = @$t
  assert <- n < self.count
  let raw = (cast ?@t @#u8) self.dat
  and off = n * (sizeof t)
  return (cast @#u8 @$t) <- slice_at_byte raw off

export inline slice_impl method! copy other:this = void
  assert <- self.count == other.count
  let dst = self!unsafe_rawdata
  and src = other.unsafe_rawdata
  and bytecnt = other.cnt * (sizeof t)
  slice_memcpy dst src bytecnt

export inline slice_impl shallow method$ operator_sub r:index_range = this
  assert <- r.begin < self.count
  assert <- r.end <= self.count
  let raw0 = (cast @u8 @#u8) self.unsafe_rawdata
  let raw = slice_at_byte raw0 r.begin
  return {dat=((cast @#u8 @#t) raw) cnt=r.count}


export intf `any_tuple =
  isa `copyable

export inline struct tuple_2 t0:`copyable t1:`copyable =
  export isa `any_tuple
  x0	:t0
  x1	:t1

export inline struct tuple_3 t0:`copyable t1:`copyable t2:`copyable =
  export isa `any_tuple
  x0	:t0
  x1	:t1
  x2	:t2

export inline struct tuple_4 t0:`copyable t1:`copyable t2:`copyable t3:`copyable =
  export isa `any_tuple
  x0	:t0
  x1	:t1
  x2	:t2
  x3	:t3

export inline struct tuple_5 t0:`copyable t1:`copyable t2:`copyable t3:`copyable t4:`copyable =
  export isa `any_tuple
  x0	:t0
  x1	:t1
  x2	:t2
  x3	:t3
  x4	:t4

export inline struct tuple_6 t0:`copyable t1:`copyable t2:`copyable t3:`copyable t4:`copyable t5:`copyable =
  export isa `any_tuple
  x0	:t0
  x1	:t1
  x2	:t2
  x3	:t3
  x4	:t4
  x5	:t5

export inline struct tuple_7 t0:`copyable t1:`copyable t2:`copyable t3:`copyable t4:`copyable t5:`copyable t6:`copyable =
  export isa `any_tuple
  x0	:t0
  x1	:t1
  x2	:t2
  x3	:t3
  x4	:t4
  x5	:t5
  x6	:t6

export inline struct tuple_8 t0:`copyable t1:`copyable t2:`copyable t3:`copyable t4:`copyable t5:`copyable t6:`copyable t7:`copyable =
  export isa `any_tuple
  x0	:t0
  x1	:t1
  x2	:t2
  x3	:t3
  x4	:t4
  x5	:t5
  x6	:t6
  x7	:t7

export inline struct tuple_9 t0:`copyable t1:`copyable t2:`copyable t3:`copyable t4:`copyable t5:`copyable t6:`copyable t7:`copyable t8:`copyable =
  export isa `any_tuple
  x0	:t0
  x1	:t1
  x2	:t2
  x3	:t3
  x4	:t4
  x5	:t5
  x6	:t6
  x7	:t7
  x8	:t8

export inline struct tuple_10 t0:`copyable t1:`copyable t2:`copyable t3:`copyable t4:`copyable t5:`copyable t6:`copyable t7:`copyable t8:`copyable t9:`copyable =
  export isa `any_tuple
  x0	:t0
  x1	:t1
  x2	:t2
  x3	:t3
  x4	:t4
  x5	:t5
  x6	:t6
  x7	:t7
  x8	:t8
  x9	:t9

export inline struct tuple_11 t0:`copyable t1:`copyable t2:`copyable t3:`copyable t4:`copyable t5:`copyable t6:`copyable t7:`copyable t8:`copyable t9:`copyable t10:`copyable =
  export isa `any_tuple
  x0	:t0
  x1	:t1
  x2	:t2
  x3	:t3
  x4	:t4
  x5	:t5
  x6	:t6
  x7	:t7
  x8	:t8
  x9	:t9
  x10	:t10

export inline struct tuple_12 t0:`copyable t1:`copyable t2:`copyable t3:`copyable t4:`copyable t5:`copyable t6:`copyable t7:`copyable t8:`copyable t9:`copyable t10:`copyable t11:`copyable =
  export isa `any_tuple
  x0	:t0
  x1	:t1
  x2	:t2
  x3	:t3
  x4	:t4
  x5	:t5
  x6	:t6
  x7	:t7
  x8	:t8
  x9	:t9
  x10	:t10
  x11	:t11

export inline struct tuple_13 t0:`copyable t1:`copyable t2:`copyable t3:`copyable t4:`copyable t5:`copyable t6:`copyable t7:`copyable t8:`copyable t9:`copyable t10:`copyable t11:`copyable t12:`copyable =
  export isa `any_tuple
  x0	:t0
  x1	:t1
  x2	:t2
  x3	:t3
  x4	:t4
  x5	:t5
  x6	:t6
  x7	:t7
  x8	:t8
  x9	:t9
  x10	:t10
  x11	:t11
  x12	:t12

export inline struct tuple_14 t0:`copyable t1:`copyable t2:`copyable t3:`copyable t4:`copyable t5:`copyable t6:`copyable t7:`copyable t8:`copyable t9:`copyable t10:`copyable t11:`copyable t12:`copyable t13:`copyable =
  export isa `any_tuple
  x0	:t0
  x1	:t1
  x2	:t2
  x3	:t3
  x4	:t4
  x5	:t5
  x6	:t6
  x7	:t7
  x8	:t8
  x9	:t9
  x10	:t10
  x11	:t11
  x12	:t12
  x13	:t13

export inline struct tuple_15 t0:`copyable t1:`copyable t2:`copyable t3:`copyable t4:`copyable t5:`copyable t6:`copyable t7:`copyable t8:`copyable t9:`copyable t10:`copyable t11:`copyable t12:`copyable t13:`copyable t14:`copyable =
  export isa `any_tuple
  x0	:t0
  x1	:t1
  x2	:t2
  x3	:t3
  x4	:t4
  x5	:t5
  x6	:t6
  x7	:t7
  x8	:t8
  x9	:t9
  x10	:t10
  x11	:t11
  x12	:t12
  x13	:t13
  x14	:t14

export inline struct tuple_16 t0:`copyable t1:`copyable t2:`copyable t3:`copyable t4:`copyable t5:`copyable t6:`copyable t7:`copyable t8:`copyable t9:`copyable t10:`copyable t11:`copyable t12:`copyable t13:`copyable t14:`copyable t15:`copyable =
  export isa `any_tuple
  x0	:t0
  x1	:t1
  x2	:t2
  x3	:t3
  x4	:t4
  x5	:t5
  x6	:t6
  x7	:t7
  x8	:t8
  x9	:t9
  x10	:t10
  x11	:t11
  x12	:t12
  x13	:t13
  x14	:t14
  x15	:t15

export intf `numeric =
  isa `copyable `arithmetic `ordered `show

export intf `integer =
  isa `numeric `bitwise `has_compare
  alias this_signed = `signed_integer
  alias this_unsigned = `unsigned_integer
  method reinterpret_signed = final.this_signed
  method reinterpret_unsigned = final.this_unsigned

export intf `signed_integer =
  isa `integer

export intf `unsigned_integer =
  isa `integer

export intf `native_integer =
  isa `trivial_ctor `trivial_dtor `trivial_copy `trivial_order `return_by_copy
      \ `integer `show


export intf `native_signed_integer =
  isa `signed_integer `native_integer

export intf `native_unsigned_integer =
  isa `unsigned_integer `native_integer

export intf `native_anysign_integer =
  isa `native_signed_integer `native_unsigned_integer

export intf `generalized_boolean =
  isa `ordered
  method operator_test = bool

export intf `bool_compatible =
  fun from_bool b:bool = final

export intf `native_boolean =
  isa `trivial_ctor `trivial_dtor `trivial_copy `return_by_copy `generalized_boolean
      \ `trivial_order `bool_compatible `show

export intf `floating =
  isa `numeric `has_compare

export intf `native_floating =
  isa `trivial_ctor `trivial_dtor `trivial_copy `return_by_copy
      \ `floating `show

export intf `enum =
  isa `trivial_order `trivial_equality `trivial_copy `return_by_copy `trivial_dtor `show
  alias tag_type = `integer
  fun from_tag value:final.tag_type = final
  method tag = final.tag_type

export intf `union =
  alias tag_type = `integer
  method tag = final.tag_type

export intf `union_trivial_ctor =
  isa `union `trivial_ctor
  fun from_tag value:final.tag_type = final

export extern inline struct bool =
  export isa `native_boolean
export extern bool method `has_equality.operator_eq other:@this = bool
export extern bool method `has_equality.operator_ne other:@this = bool
export extern bool method `ordered.operator_le other:@this = bool
export extern bool method `ordered.operator_lt other:@this = bool
export extern bool method `ordered.operator_gt other:@this = bool
export extern bool method `ordered.operator_ge other:@this = bool
export bool fun from_bool b:bool = this
  return b
export extern bool method `generalized_boolean.operator_test = bool
export extern bool method to_u8 = u8
export extern bool method to_u16 = u16
export extern bool method to_u32 = u32
export extern bool method to_u64 = u64
export extern bool method `show.show buf:@#`string_buffer = void

export extern inline struct i8 =
  export isa `native_signed_integer
  alias this_signed = this
  alias this_unsigned = u8
export extern i8 method `has_equality.operator_eq other:@this = bool
export extern i8 method `has_equality.operator_ne other:@this = bool
export extern i8 method `ordered.operator_le other:@this = bool
export extern i8 method `ordered.operator_lt other:@this = bool
export extern i8 method `ordered.operator_gt other:@this = bool
export extern i8 method `ordered.operator_ge other:@this = bool
export extern i8 method `arithmetic.operator_plus other:@this = this
export extern i8 method `arithmetic.operator_minus other:@this = this
export extern i8 method `arithmetic.operator_divide other:@this = this
export extern i8 method `arithmetic.operator_modulo other:@this = this
export extern i8 method `arithmetic.operator_times other:@this = this
export extern i8 method `arithmetic.operator_uminus = this
export extern i8 method! `arithmetic.operator_assign_plus other:@this = void
export extern i8 method! `arithmetic.operator_assign_minus other:@this = void
export extern i8 method! `arithmetic.operator_assign_divide other:@this = void
export extern i8 method! `arithmetic.operator_assign_modulo other:@this = void
export extern i8 method! `arithmetic.operator_assign_times other:@this = void
export extern i8 method `bitwise.operator_bwor other:@this = this
export extern i8 method `bitwise.operator_bwxor other:@this = this
export extern i8 method `bitwise.operator_bwand other:@this = this
export extern i8 method `bitwise.operator_lshift by:u32 = this
export extern i8 method `bitwise.operator_rshift by:u32 = this
export extern i8 method `bitwise.operator_bwnot = this
export extern i8 method! `bitwise.operator_assign_bwor other:@this = void
export extern i8 method! `bitwise.operator_assign_bwxor other:@this = void
export extern i8 method! `bitwise.operator_assign_bwand other:@this = void
export extern i8 method! `bitwise.operator_assign_lshift by:u32 = void
export extern i8 method! `bitwise.operator_assign_rshift by:u32 = void
export extern inline i8 method reinterpret_unsigned = u8
export extern inline i8 method reinterpret_signed = this
export extern inline i8 method to_i16 = i16
export extern inline i8 method to_i32 = i32
export extern inline i8 method to_i64 = i64
export extern inline i8 method `integer.as_ssize = ssize
export extern i8 method `show.show buf:@#`string_buffer = void

export extern inline struct i16 =
  export isa `native_signed_integer
  alias this_signed = this
  alias this_unsigned = u16
export extern i16 method `has_equality.operator_eq other:@this = bool
export extern i16 method `has_equality.operator_ne other:@this = bool
export extern i16 method `ordered.operator_le other:@this = bool
export extern i16 method `ordered.operator_lt other:@this = bool
export extern i16 method `ordered.operator_gt other:@this = bool
export extern i16 method `ordered.operator_ge other:@this = bool
export extern i16 method `arithmetic.operator_plus other:@this = this
export extern i16 method `arithmetic.operator_minus other:@this = this
export extern i16 method `arithmetic.operator_divide other:@this = this
export extern i16 method `arithmetic.operator_modulo other:@this = this
export extern i16 method `arithmetic.operator_times other:@this = this
export extern i16 method `arithmetic.operator_uminus = this
export extern i16 method! `arithmetic.operator_assign_plus other:@this = void
export extern i16 method! `arithmetic.operator_assign_minus other:@this = void
export extern i16 method! `arithmetic.operator_assign_divide other:@this = void
export extern i16 method! `arithmetic.operator_assign_modulo other:@this = void
export extern i16 method! `arithmetic.operator_assign_times other:@this = void
export extern i16 method `bitwise.operator_bwor other:@this = this
export extern i16 method `bitwise.operator_bwxor other:@this = this
export extern i16 method `bitwise.operator_bwand other:@this = this
export extern i16 method `bitwise.operator_lshift by:u32 = this
export extern i16 method `bitwise.operator_rshift by:u32 = this
export extern i16 method `bitwise.operator_bwnot = this
export extern i16 method! `bitwise.operator_assign_bwor other:@this = void
export extern i16 method! `bitwise.operator_assign_bwxor other:@this = void
export extern i16 method! `bitwise.operator_assign_bwand other:@this = void
export extern i16 method! `bitwise.operator_assign_lshift by:u32 = void
export extern i16 method! `bitwise.operator_assign_rshift by:u32 = void
export extern inline i16 method reinterpret_unsigned = u16
export extern inline i16 method reinterpret_signed = this
export extern inline i16 method trim_i8 = i8
export extern inline i16 method to_i32 = i32
export extern inline i16 method to_i64 = i64
export extern inline i16 method `integer.as_ssize = ssize
export extern i16 method `show.show buf:@#`string_buffer = void

export extern inline struct i32 =
  export isa `native_signed_integer
  alias this_signed = this
  alias this_unsigned = u32
export extern i32 method `has_equality.operator_eq other:@this = bool
export extern i32 method `has_equality.operator_ne other:@this = bool
export extern i32 method `ordered.operator_le other:@this = bool
export extern i32 method `ordered.operator_lt other:@this = bool
export extern i32 method `ordered.operator_gt other:@this = bool
export extern i32 method `ordered.operator_ge other:@this = bool
export extern i32 method `arithmetic.operator_plus other:@this = this
export extern i32 method `arithmetic.operator_minus other:@this = this
export extern i32 method `arithmetic.operator_divide other:@this = this
export extern i32 method `arithmetic.operator_modulo other:@this = this
export extern i32 method `arithmetic.operator_times other:@this = this
export extern i32 method `arithmetic.operator_uminus = this
export extern i32 method! `arithmetic.operator_assign_plus other:@this = void
export extern i32 method! `arithmetic.operator_assign_minus other:@this = void
export extern i32 method! `arithmetic.operator_assign_divide other:@this = void
export extern i32 method! `arithmetic.operator_assign_modulo other:@this = void
export extern i32 method! `arithmetic.operator_assign_times other:@this = void
export extern i32 method `bitwise.operator_bwor other:@this = this
export extern i32 method `bitwise.operator_bwxor other:@this = this
export extern i32 method `bitwise.operator_bwand other:@this = this
export extern i32 method `bitwise.operator_lshift by:u32 = this
export extern i32 method `bitwise.operator_rshift by:u32 = this
export extern i32 method `bitwise.operator_bwnot = this
export extern i32 method! `bitwise.operator_assign_bwor other:@this = void
export extern i32 method! `bitwise.operator_assign_bwxor other:@this = void
export extern i32 method! `bitwise.operator_assign_bwand other:@this = void
export extern i32 method! `bitwise.operator_assign_lshift by:u32 = void
export extern i32 method! `bitwise.operator_assign_rshift by:u32 = void
export extern inline i32 method reinterpret_unsigned = u32
export extern inline i32 method reinterpret_signed = this
export extern inline i32 method trim_i8 = i8
export extern inline i32 method trim_i16 = i16
export extern inline i32 method to_i64 = i64
export extern inline i32 method `integer.as_ssize = ssize
export extern inline i32 method trim_float = float
export extern inline i32 method to_double = double
export extern i32 method `show.show buf:@#`string_buffer = void

export extern inline struct i64 =
  export isa `native_signed_integer
  alias this_signed = this
  alias this_unsigned = u64
export extern i64 method `has_equality.operator_eq other:@this = bool
export extern i64 method `has_equality.operator_ne other:@this = bool
export extern i64 method `ordered.operator_le other:@this = bool
export extern i64 method `ordered.operator_lt other:@this = bool
export extern i64 method `ordered.operator_gt other:@this = bool
export extern i64 method `ordered.operator_ge other:@this = bool
export extern i64 method `arithmetic.operator_plus other:@this = this
export extern i64 method `arithmetic.operator_minus other:@this = this
export extern i64 method `arithmetic.operator_divide other:@this = this
export extern i64 method `arithmetic.operator_modulo other:@this = this
export extern i64 method `arithmetic.operator_times other:@this = this
export extern i64 method `arithmetic.operator_uminus = this
export extern i64 method! `arithmetic.operator_assign_plus other:@this = void
export extern i64 method! `arithmetic.operator_assign_minus other:@this = void
export extern i64 method! `arithmetic.operator_assign_divide other:@this = void
export extern i64 method! `arithmetic.operator_assign_modulo other:@this = void
export extern i64 method! `arithmetic.operator_assign_times other:@this = void
export extern i64 method `bitwise.operator_bwor other:@this = this
export extern i64 method `bitwise.operator_bwxor other:@this = this
export extern i64 method `bitwise.operator_bwand other:@this = this
export extern i64 method `bitwise.operator_lshift by:u32 = this
export extern i64 method `bitwise.operator_rshift by:u32 = this
export extern i64 method `bitwise.operator_bwnot = this
export extern i64 method! `bitwise.operator_assign_bwor other:@this = void
export extern i64 method! `bitwise.operator_assign_bwxor other:@this = void
export extern i64 method! `bitwise.operator_assign_bwand other:@this = void
export extern i64 method! `bitwise.operator_assign_lshift by:u32 = void
export extern i64 method! `bitwise.operator_assign_rshift by:u32 = void
export extern inline i64 method reinterpret_unsigned = u64
export extern inline i64 method reinterpret_signed = this
export extern inline i64 method trim_i8 = i8
export extern inline i64 method trim_i16 = i16
export extern inline i64 method trim_i32 = i32
export extern inline i64 method `integer.as_ssize = ssize
export extern inline i64 method trim_float = float
export extern inline i64 method trim_double = double
export extern i64 method `show.show buf:@#`string_buffer = void

export extern inline struct u8 =
  export isa `native_unsigned_integer
  alias this_unsigned = this
  alias this_signed = i8
export extern u8 method `has_equality.operator_eq other:@this = bool
export extern u8 method `has_equality.operator_ne other:@this = bool
export extern u8 method `ordered.operator_le other:@this = bool
export extern u8 method `ordered.operator_lt other:@this = bool
export extern u8 method `ordered.operator_gt other:@this = bool
export extern u8 method `ordered.operator_ge other:@this = bool
export extern u8 method `arithmetic.operator_plus other:@this = this
export extern u8 method `arithmetic.operator_minus other:@this = this
export extern u8 method `arithmetic.operator_divide other:@this = this
export extern u8 method `arithmetic.operator_modulo other:@this = this
export extern u8 method `arithmetic.operator_times other:@this = this
export extern u8 method `arithmetic.operator_uminus = this
export extern u8 method `bitwise.operator_bwor other:@this = this
export extern u8 method `bitwise.operator_bwxor other:@this = this
export extern u8 method `bitwise.operator_bwand other:@this = this
export extern u8 method `bitwise.operator_lshift by:u32 = this
export extern u8 method `bitwise.operator_rshift by:u32 = this
export extern u8 method `bitwise.operator_bwnot = this
export extern u8 method! `arithmetic.operator_assign_plus other:@this = void
export extern u8 method! `arithmetic.operator_assign_minus other:@this = void
export extern u8 method! `arithmetic.operator_assign_divide other:@this = void
export extern u8 method! `arithmetic.operator_assign_modulo other:@this = void
export extern u8 method! `arithmetic.operator_assign_times other:@this = void
export extern u8 method! `bitwise.operator_assign_bwor other:@this = void
export extern u8 method! `bitwise.operator_assign_bwxor other:@this = void
export extern u8 method! `bitwise.operator_assign_bwand other:@this = void
export extern u8 method! `bitwise.operator_assign_lshift by:u32 = void
export extern u8 method! `bitwise.operator_assign_rshift by:u32 = void
export extern inline u8 method reinterpret_unsigned = this
export extern inline u8 method reinterpret_signed = i8
export extern inline u8 method to_u16 = u16
export extern inline u8 method to_u32 = u32
export extern inline u8 method to_u64 = u64
export extern inline u8 method `integer.as_size = size
export extern inline u8 method to_float = float
export extern inline u8 method to_double = double
export extern u8 method `show.show buf:@#`string_buffer = void

export extern inline struct u16 =
  export isa `native_unsigned_integer
  alias this_unsigned = this
  alias this_signed = i16
export extern u16 method `has_equality.operator_eq other:@this = bool
export extern u16 method `has_equality.operator_ne other:@this = bool
export extern u16 method `ordered.operator_le other:@this = bool
export extern u16 method `ordered.operator_lt other:@this = bool
export extern u16 method `ordered.operator_gt other:@this = bool
export extern u16 method `ordered.operator_ge other:@this = bool
export extern u16 method `arithmetic.operator_plus other:@this = this
export extern u16 method `arithmetic.operator_minus other:@this = this
export extern u16 method `arithmetic.operator_divide other:@this = this
export extern u16 method `arithmetic.operator_modulo other:@this = this
export extern u16 method `arithmetic.operator_times other:@this = this
export extern u16 method `arithmetic.operator_uminus = this
export extern u16 method! `arithmetic.operator_assign_plus other:@this = void
export extern u16 method! `arithmetic.operator_assign_minus other:@this = void
export extern u16 method! `arithmetic.operator_assign_divide other:@this = void
export extern u16 method! `arithmetic.operator_assign_modulo other:@this = void
export extern u16 method! `arithmetic.operator_assign_times other:@this = void
export extern u16 method `bitwise.operator_bwor other:@this = this
export extern u16 method `bitwise.operator_bwxor other:@this = this
export extern u16 method `bitwise.operator_bwand other:@this = this
export extern u16 method `bitwise.operator_lshift by:u32 = this
export extern u16 method `bitwise.operator_rshift by:u32 = this
export extern u16 method `bitwise.operator_bwnot = this
export extern u16 method! `bitwise.operator_assign_bwor other:@this = void
export extern u16 method! `bitwise.operator_assign_bwxor other:@this = void
export extern u16 method! `bitwise.operator_assign_bwand other:@this = void
export extern u16 method! `bitwise.operator_assign_lshift by:u32 = void
export extern u16 method! `bitwise.operator_assign_rshift by:u32 = void
export extern inline u16 method reinterpret_unsigned = this
export extern inline u16 method reinterpret_signed = i16
export extern inline u16 method trim_u8 = u8
export extern inline u16 method to_u32 = u32
export extern inline u16 method to_u64 = u64
export extern inline u16 method `integer.as_size = size
export extern inline u16 method to_float = float
export extern inline u16 method to_double = double
export extern u16 method `show.show buf:@#`string_buffer = void

export extern inline struct u32 =
  export isa `native_unsigned_integer
  alias this_unsigned = this
  alias this_signed = i32
export extern u32 method `has_equality.operator_eq other:@this = bool
export extern u32 method `has_equality.operator_ne other:@this = bool
export extern u32 method `ordered.operator_le other:@this = bool
export extern u32 method `ordered.operator_lt other:@this = bool
export extern u32 method `ordered.operator_gt other:@this = bool
export extern u32 method `ordered.operator_ge other:@this = bool
export extern u32 method `arithmetic.operator_plus other:@this = this
export extern u32 method `arithmetic.operator_minus other:@this = this
export extern u32 method `arithmetic.operator_divide other:@this = this
export extern u32 method `arithmetic.operator_modulo other:@this = this
export extern u32 method `arithmetic.operator_times other:@this = this
export extern u32 method `arithmetic.operator_uminus = this
export extern u32 method! `arithmetic.operator_assign_plus other:@this = void
export extern u32 method! `arithmetic.operator_assign_minus other:@this = void
export extern u32 method! `arithmetic.operator_assign_divide other:@this = void
export extern u32 method! `arithmetic.operator_assign_modulo other:@this = void
export extern u32 method! `arithmetic.operator_assign_times other:@this = void
export extern u32 method `bitwise.operator_bwor other:@this = this
export extern u32 method `bitwise.operator_bwxor other:@this = this
export extern u32 method `bitwise.operator_bwand other:@this = this
export extern u32 method `bitwise.operator_lshift by:u32 = this
export extern u32 method `bitwise.operator_rshift by:u32 = this
export extern u32 method `bitwise.operator_bwnot = this
export extern u32 method! `bitwise.operator_assign_bwor other:@this = void
export extern u32 method! `bitwise.operator_assign_bwxor other:@this = void
export extern u32 method! `bitwise.operator_assign_bwand other:@this = void
export extern u32 method! `bitwise.operator_assign_lshift by:u32 = void
export extern u32 method! `bitwise.operator_assign_rshift by:u32 = void
export extern inline u32 method reinterpret_unsigned = this
export extern inline u32 method reinterpret_signed = i32
export extern inline u32 method trim_u8 = u8
export extern inline u32 method trim_u16 = u16
export extern inline u32 method to_u64 = u64
export extern inline u32 method `integer.as_size = size
export extern inline u32 method trim_float = float
export extern inline u32 method to_double = double
export extern u32 method `show.show buf:@#`string_buffer = void

export extern inline struct u64 =
  export isa `native_unsigned_integer
  alias this_unsigned = this
  alias this_signed = i64
export extern u64 method `has_equality.operator_eq other:@this = bool
export extern u64 method `has_equality.operator_ne other:@this = bool
export extern u64 method `ordered.operator_le other:@this = bool
export extern u64 method `ordered.operator_lt other:@this = bool
export extern u64 method `ordered.operator_gt other:@this = bool
export extern u64 method `ordered.operator_ge other:@this = bool
export extern u64 method `arithmetic.operator_plus other:@this = this
export extern u64 method `arithmetic.operator_minus other:@this = this
export extern u64 method `arithmetic.operator_divide other:@this = this
export extern u64 method `arithmetic.operator_modulo other:@this = this
export extern u64 method `arithmetic.operator_times other:@this = this
export extern u64 method `arithmetic.operator_uminus = this
export extern u64 method! `arithmetic.operator_assign_plus other:@this = void
export extern u64 method! `arithmetic.operator_assign_minus other:@this = void
export extern u64 method! `arithmetic.operator_assign_divide other:@this = void
export extern u64 method! `arithmetic.operator_assign_modulo other:@this = void
export extern u64 method! `arithmetic.operator_assign_times other:@this = void
export extern u64 method `bitwise.operator_bwor other:@this = this
export extern u64 method `bitwise.operator_bwxor other:@this = this
export extern u64 method `bitwise.operator_bwand other:@this = this
export extern u64 method `bitwise.operator_lshift by:u32 = this
export extern u64 method `bitwise.operator_rshift by:u32 = this
export extern u64 method `bitwise.operator_bwnot = this
export extern u64 method! `bitwise.operator_assign_bwor other:@this = void
export extern u64 method! `bitwise.operator_assign_bwxor other:@this = void
export extern u64 method! `bitwise.operator_assign_bwand other:@this = void
export extern u64 method! `bitwise.operator_assign_lshift by:u32 = void
export extern u64 method! `bitwise.operator_assign_rshift by:u32 = void
export extern inline u64 method reinterpret_unsigned = this
export extern inline u64 method reinterpret_signed = i64
export extern inline u64 method trim_u8 = u8
export extern inline u64 method trim_u16 = u16
export extern inline u64 method trim_u32 = u32
export extern inline u64 method `integer.as_size = size
export extern inline u64 method trim_float = float
export extern inline u64 method trim_double = double
export extern u64 method `show.show buf:@#`string_buffer = void

export extern inline struct ssize =
  export isa `native_signed_integer
  alias this_signed = this
  alias this_unsigned = size
export extern ssize method `has_equality.operator_eq other:@this = bool
export extern ssize method `has_equality.operator_ne other:@this = bool
export extern ssize method `ordered.operator_le other:@this = bool
export extern ssize method `ordered.operator_lt other:@this = bool
export extern ssize method `ordered.operator_gt other:@this = bool
export extern ssize method `ordered.operator_ge other:@this = bool
export extern ssize method `arithmetic.operator_plus other:@this = this
export extern ssize method `arithmetic.operator_minus other:@this = this
export extern ssize method `arithmetic.operator_divide other:@this = this
export extern ssize method `arithmetic.operator_modulo other:@this = this
export extern ssize method `arithmetic.operator_times other:@this = this
export extern ssize method `arithmetic.operator_uminus = this
export extern ssize method! `arithmetic.operator_assign_plus other:@this = void
export extern ssize method! `arithmetic.operator_assign_minus other:@this = void
export extern ssize method! `arithmetic.operator_assign_divide other:@this = void
export extern ssize method! `arithmetic.operator_assign_modulo other:@this = void
export extern ssize method! `arithmetic.operator_assign_times other:@this = void
export extern ssize method `bitwise.operator_bwor other:@this = this
export extern ssize method `bitwise.operator_bwxor other:@this = this
export extern ssize method `bitwise.operator_bwand other:@this = this
export extern ssize method `bitwise.operator_lshift by:u32 = this
export extern ssize method `bitwise.operator_rshift by:u32 = this
export extern ssize method `bitwise.operator_bwnot = this
export extern ssize method! `bitwise.operator_assign_bwor other:@this = void
export extern ssize method! `bitwise.operator_assign_bwxor other:@this = void
export extern ssize method! `bitwise.operator_assign_bwand other:@this = void
export extern ssize method! `bitwise.operator_assign_lshift by:u32 = void
export extern ssize method! `bitwise.operator_assign_rshift by:u32 = void
export extern inline ssize method reinterpret_unsigned = size
export extern inline ssize method reinterpret_signed = this
export extern inline ssize method trim_i8 = i8
export extern inline ssize method trim_i16 = i16
export extern inline ssize method trim_i32 = i32
export extern inline ssize method trim_i64 = i64
export extern inline ssize method trim_float = float
export extern inline ssize method trim_double = double
export extern ssize method `show.show buf:@#`string_buffer = void

-- FIXME: size and ssize do not have a well-defined bit size, they therefore
-- should not be `bitwise.
export extern inline struct size =
  export isa `native_unsigned_integer
  alias this_unsigned = this
  alias this_signed = ssize
export extern size method `has_equality.operator_eq other:@this = bool
export extern size method `has_equality.operator_ne other:@this = bool
export extern size method `ordered.operator_le other:@this = bool
export extern size method `ordered.operator_lt other:@this = bool
export extern size method `ordered.operator_gt other:@this = bool
export extern size method `ordered.operator_ge other:@this = bool
export extern size method `arithmetic.operator_plus other:@this = this
export extern size method `arithmetic.operator_minus other:@this = this
export extern size method `arithmetic.operator_divide other:@this = this
export extern size method `arithmetic.operator_modulo other:@this = this
export extern size method `arithmetic.operator_times other:@this = this
export extern size method `arithmetic.operator_uminus = this
export extern size method! `arithmetic.operator_assign_plus other:@this = void
export extern size method! `arithmetic.operator_assign_minus other:@this = void
export extern size method! `arithmetic.operator_assign_divide other:@this = void
export extern size method! `arithmetic.operator_assign_modulo other:@this = void
export extern size method! `arithmetic.operator_assign_times other:@this = void
export extern size method `bitwise.operator_bwor other:@this = this
export extern size method `bitwise.operator_bwxor other:@this = this
export extern size method `bitwise.operator_bwand other:@this = this
export extern size method `bitwise.operator_lshift by:u32 = this
export extern size method `bitwise.operator_rshift by:u32 = this
export extern size method `bitwise.operator_bwnot = this
export extern size method! `bitwise.operator_assign_bwor other:@this = void
export extern size method! `bitwise.operator_assign_bwxor other:@this = void
export extern size method! `bitwise.operator_assign_bwand other:@this = void
export extern size method! `bitwise.operator_assign_lshift by:u32 = void
export extern size method! `bitwise.operator_assign_rshift by:u32 = void
export extern inline size method reinterpret_unsigned = this
export extern inline size method reinterpret_signed = ssize
export extern inline size method trim_u8 = u8
export extern inline size method trim_u16 = u16
export extern inline size method trim_u32 = u32
export extern inline size method trim_u64 = u64
export extern inline size method trim_float = float
export extern inline size method trim_double = double
export extern size method `show.show buf:@#`string_buffer = void

export extern inline struct float =
  export isa `native_floating
export extern float method `has_equality.operator_eq other:@this = bool
export extern float method `has_equality.operator_ne other:@this = bool
export extern float method `ordered.operator_le other:@this = bool
export extern float method `ordered.operator_lt other:@this = bool
export extern float method `ordered.operator_gt other:@this = bool
export extern float method `ordered.operator_ge other:@this = bool
export extern float method `has_compare.operator_compare other:@this = i32
export extern float method `arithmetic.operator_plus other:@this = this
export extern float method `arithmetic.operator_minus other:@this = this
export extern float method `arithmetic.operator_divide other:@this = this
export extern float method `arithmetic.operator_modulo other:@this = this
export extern float method `arithmetic.operator_times other:@this = this
export extern float method `arithmetic.operator_uminus = this
export extern float method! `arithmetic.operator_assign_plus other:@this = void
export extern float method! `arithmetic.operator_assign_minus other:@this = void
export extern float method! `arithmetic.operator_assign_divide other:@this = void
export extern float method! `arithmetic.operator_assign_modulo other:@this = void
export extern float method! `arithmetic.operator_assign_times other:@this = void
export extern inline float method trim_i8 = i8
export extern inline float method trim_i16 = i16
export extern inline float method to_i32 = i32
export extern inline float method to_i64 = i64
export extern inline float method to_double = double
export extern inline float method as_ssize = ssize
export extern float method `show.show buf:@#`string_buffer = void

export extern inline struct double =
  export isa `native_floating
export extern double method `has_equality.operator_eq other:@this = bool
export extern double method `has_equality.operator_ne other:@this = bool
export extern double method `ordered.operator_le other:@this = bool
export extern double method `ordered.operator_lt other:@this = bool
export extern double method `ordered.operator_gt other:@this = bool
export extern double method `ordered.operator_ge other:@this = bool
export extern double method `has_compare.operator_compare other:@this = i32
export extern double method `arithmetic.operator_plus other:@this = this
export extern double method `arithmetic.operator_minus other:@this = this
export extern double method `arithmetic.operator_divide other:@this = this
export extern double method `arithmetic.operator_modulo other:@this = this
export extern double method `arithmetic.operator_times other:@this = this
export extern double method `arithmetic.operator_uminus = this
export extern double method! `arithmetic.operator_assign_plus other:@this = void
export extern double method! `arithmetic.operator_assign_minus other:@this = void
export extern double method! `arithmetic.operator_assign_divide other:@this = void
export extern double method! `arithmetic.operator_assign_modulo other:@this = void
export extern double method! `arithmetic.operator_assign_times other:@this = void
export extern inline double method trim_i8 = i8
export extern inline double method trim_i16 = i16
export extern inline double method trim_i32 = i32
export extern inline double method to_i64 = i64
export extern inline double method trim_float = float
export extern inline double method as_ssize = ssize
export extern double method `show.show buf:@#`string_buffer = void

export intf `trivial_array_ctor t:`copyable =
  isa `prevent_dyn (`array_ctor t)

export intf `array_ctor t:`copyable =
  fun from_array c:@(static_array t) = final

extern inline fun static_array_at_byte dp:@!u8 off:size = @!u8

export opaque struct static_array t:`copyable =
  export isa (`trivial_array_ctor t) `trivial_copy `return_by_copy
  d	:?@!t
  c	:size

export inline static_array method count = size
  return self.c

export inline static_array method bytecount = size
  return self.c * (sizeof t)

export inline static_array method all = index_range
  return range 0 self.c

export inline static_array method$ unsafe_rawdata = @$u8
  assert <- self.c != 0
  return (cast ?@$t @$u8) self$d

export inline static_array method$ unsafe_data = @$t
  assert <- self.c != 0
  return (cast ?@$t @$t) self$d

export inline static_array shallow method$ operator_at n:size = @$t
  assert <- n < self.c
  let off = n * (sizeof t)
  let p = static_array_at_byte ((cast @$this @!this) self)!unsafe_rawdata off
  return (cast @!u8 @$t) p


export extern fun abort = void

export extern inline fun likely x:bool = bool
export extern inline fun unlikely x:bool = bool

export inline (fun t:`any) unused x:t = void
  noop

export inline (fun t:`any) optional opt:?@t fallback:t = t
  if opt !== null
    return opt.
  else
    return fallback

export inline (fun t:`any) optional_ref opt:?@t fallback:@t = @t
  if opt !== null
    return (nonnull_cast t ?@t @t) opt
  else
    return fallback

export inline (fun t:`numeric) min a:t b:t = t
  if a <= b
    return a
  else
    return b

export inline (fun t:`numeric) max a:t b:t = t
  if a >= b
    return a
  else
    return b


export intf `error =
  isa `copyable `generalized_boolean `show

export inline struct error =
  export isa `error
  code	:i32

  export inline let OK = {}:error

export error method `generalized_boolean.operator_test = bool
  return self.code != 0

export error method `show.show buf:@#`string_buffer = void
  self.code.show buf

export (fun e:`error) drop err:e = void
  noop

export (fun e:`error) fatal err:e = void
  epr "Fatal: "
  esay err


export extern inline struct valist =
  export isa `trivial_copy `trivial_ctor

intf `no_dyn_iterator r:`any_any_ref =
  isa `prevent_dyn (`iterator r)

export opaque struct vararg r:`any_any_ref =
  export isa (`no_dyn_iterator r)
  export isa `trivial_copy -- FIXME: remove `trivial_copy, needed by bootstrap
  ap	:valist
  n	:size

export inline vararg method `iterator.has_next = bool
  return self.n > 0

export extern vararg method! `iterator.next = r

export inline vararg method left = size
  return self.n


export intf `any_environment =
  isa `trivial_ctor

-- FIXME? Instead of 'declaring', we could use 'final'.
export intf `environment declaring:`any =
  isa `any_environment
  -- Implementation of these methods is generated by the compiler.
  method parent = @!declaring
  method! install where:@!@!declaring = void
  method# uninstall where:@!@#declaring = void

--export intf `debugenv =
--  isa (`environment this)
--  method! _assert cond:bool ?expr:?@string = void
--  method! _pre cond:bool ?expr:?@string = void
--  method! _post cond:bool ?expr:?@string = void
--  method! _invariant cond:bool ?expr:?@string = void
--  method! _example cond:bool ?expr:?@string = void
--
--  method! pr ?sep:?@string ...v:(vararg @`showable) = void
--  method! say ?sep:?@string ...v:(vararg @`showable) = void
--
--export struct debugenv =
--  export isa `debugenv


--atom identity_transitivity P =
--  forall P, x
--    P x => forall y
--      y === x => P y
--atom equality_transitivity P =
--  identity_transitivity P
--  forall P, x
--    P x => forall y
--      y == x => P y
--
--atom nonnull x =
--  equality_transitivity this
--
--atom has_tag tag x =
--  x ==| tag

-- We place the imports at the end of this file for the benefit of the bootstrap
-- compiler lack of understanding of definition ordering across modules, in
-- codegen. As types defined in this module are used everywhere, they really
-- need to appear first to the C compiler.
from nlang.chars import `string_buffer `show static_string
from nlang.containers import index_range range `iterator `random_container
from nlang.unsafe import cast nonnull_cast
from nlang import esay epr

export inline struct codeloc =
  where		:static_string
  expression	:static_string

export fun assert cond:bool ?_Ncodeloc:?@codeloc = void
  if not cond
    if _Ncodeloc !== null
      esay _Ncodeloc.where ": failed '" _Ncodeloc.expression "'"
    abort

export fun unreached = void
  abort

export fun __pre__ cond:bool ?_Ncodeloc:?@codeloc = void
  if not cond
    if _Ncodeloc !== null
      esay _Ncodeloc.where ": failed '" _Ncodeloc.expression "'"
    abort

export fun __post__ cond:bool ?_Ncodeloc:?@codeloc = void
  if not cond
    if _Ncodeloc !== null
      esay _Ncodeloc.where ": failed '" _Ncodeloc.expression "'"
    abort

export fun __invariant__ cond:bool ?_Ncodeloc:?@codeloc = void
  if not cond
    if _Ncodeloc !== null
      esay _Ncodeloc.where ": failed '" _Ncodeloc.expression "'"
    abort

export fun __example__ cond:bool ?_Ncodeloc:?@codeloc = void
  if not cond
    if _Ncodeloc !== null
      esay _Ncodeloc.where ": failed '" _Ncodeloc.expression "'"
    abort
