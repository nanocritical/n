from nlang import *
import nlang.heap

fun foo x:u32 y:u32 = u32
  return x*y

fun bar x:i32 y:i32 = i32
  return x*y

type tb =

tb method@ foo = i64
  return 0

fun error_prone = i32
  let x = 0:u32
    try
      let except = nerror.OK
      x = 1
      let except = nerror.EINVAL
      x = 2
      return 0
    catch err
      if err != nerror.EINVAL
        return 1
      if x != 1
        return 2

    try
      throw 1:u32
    catch n
      if n != 1
        return 3

  return 0

fun main = i32
  let a = 0:i32
  let b = 0:i32
  let c = 010:i32
  let d = 0x018:i32
  if 3*c != d
    return 123

  let e = 0:i32
    e += 1
    e *= 1
    e /= 1
    e %= 1
  if e != 0
    return 1

  block
    if false
      return 1

  let minus_one = -1:i32
  if minus_one != 0 - 1
    return 1

  let addr = @a
  let addr2:(nlang.meta.ref i32) = @a
  if addr != addr2
    return 1

  let maddr = @!a
  let maddr2:(nlang.meta.mutable_ref i32) = @!a
  if maddr != maddr2
    return 1

  let mem = nlang.heap.the!alloc u32
  let mem_val = mem.

  let errtry = error_prone
  if errtry != 0
    return errtry

  if true
    return bar a + b a -- Shouldn't be parsed as (b a)
  else
    let f = {}:tb
    return f.foo.trim_i32
