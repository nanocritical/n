from nlang import *
import nlang.heap

fun foo x:u32 y:u32 = u32
  return x*y

fun bar x:i32 y:i32 = i32
  return x*y

type tb =
  method foo = i64
    return 0

fun main = i32
  let a = 0:i32
  let b = 0:i32
  let c = 010:i32
  let d = 0x018:i32
  if 3*c != d
    return 123

  let minus_one = -1:i32
  if minus_one != 0 - 1
    return 1

  let addr = @a
  let addr2:(nlang.meta.ref i32) = @a
  if addr != addr2
    return 1

  let maddr = @!a
  let maddr2:(nlang.meta.mutable_ref i32) = @!a
  if maddr != maddr2
    return 1

  let mem = nlang.heap.the!alloc u32
  let mem_val = mem.

  if true
    return bar a + b a -- Shouldn't be parsed as (b a)
  else
    let x = tb{{}}
    let f = x.foo
    return f.slice_i32 -- Should be tb{}.foo.slice_i32, but the bootstrap code generator cannot yet handle it
